{
    "version": "https://jsonfeed.org/version/1",
    "title": "Live My Life",
    "description": "个人学习使用",
    "home_page_url": "http://1405904364.github.io",
    "items": [
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/6.%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/6.%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "title": "Mysql综合案例",
            "date_published": "2023-08-31T01:30:35.883Z",
            "content_html": "<ol>\n<li>\n<p>找出工资在 1250 到 3000 之间的员工信息，要求按照薪资降序排列。</p>\n<p>select ename, sal</p>\n<p>​\tfrom emp</p>\n<p>​\twhere sal between 1250 and 3000</p>\n<p>order by sal desc;</p>\n</li>\n</ol>\n<p>以上语句的执行顺序：</p>\n<ol>\n<li>from</li>\n<li>where</li>\n<li>select</li>\n<li>order by (排序总是在最后执行的！！！)</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/5.%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/5.%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/",
            "title": "Mysql排序",
            "date_published": "2023-08-31T01:30:35.876Z",
            "content_html": "<ol>\n<li>\n<p>查询所有员工薪资，排序</p>\n<p>select ename,sal from emp order by sal;// 默认升序</p>\n<p>select ename,sal from emp order by sal asc;// 指定 ASC 升序</p>\n<p>select ename,sal from emp order by sal desc;// 指定 DESC 降序</p>\n</li>\n<li>\n<p>多个字段进行排序</p>\n<p>例如：查询员工名字和薪资，要求按照薪资升序，如果薪资相同，再按照名字升序排列。</p>\n<p>select ename, sal from emp order by sal asc, ename asc;</p>\n</li>\n<li>\n<p>根据字段位置进行排序</p>\n<p>例如：按照查询结果的第 2 列 sal 进行排序。</p>\n<p>select ename, sal from emp order by 2;</p>\n<p>注意：不建议在开发中这样写，因为不健壮。</p>\n<p>因为列的顺序很容易发生改变，列顺序修改之后，2 就废了。</p>\n<p><strong>排序采用 order by 子句，order by 后面跟上排序字段，排序可以放多个，多个可以采用逗号（,）间隔，order by 默认采用升序，如果存在 where 子句那么 order by 必须放到最后面。</strong></p>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
            "title": "简单的查询语句",
            "date_published": "2023-08-31T01:30:35.869Z",
            "content_html": "<ol>\n<li>\n<p>查询一个字段</p>\n<p>select 字段名 from 表名；</p>\n<p>其中要注意：</p>\n<p>​\tselect 和 from 都是关键字。</p>\n<p>​\t字段名和表名都是标识符。</p>\n<p><strong>强调：对于 SQL 语句来说，是通用的。所有的 SQL 语句以 &quot;;&quot; 结尾。另外 SQL 语句不区分大小写，都行。</strong></p>\n</li>\n<li>\n<p>查询多个字段</p>\n<p>使用逗号隔开 &quot;,&quot;</p>\n<p>select deptno,dname from dept;</p>\n</li>\n<li>\n<p>查询所有字段</p>\n<ol>\n<li>\n<p>可以把每个字段都写上</p>\n</li>\n<li>\n<p>可以使用 *</p>\n<ol>\n<li>\n<p>效率低</p>\n</li>\n<li>\n<p>可读性差</p>\n<p>在实际开发中不建议。</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>给查询的列起别名</p>\n<ol>\n<li>\n<p>使用 as 关键字起别名。</p>\n<p>select deptno, dname as deptname from dept;</p>\n</li>\n<li>\n<p>省略 as 关键字。</p>\n<p>select deptno, dname deptname from dept;</p>\n</li>\n<li>\n<p>起别名的时候，别名中有空格，怎么办？</p>\n<p>例如：</p>\n<p>select deptno, dname dept name from dept;</p>\n<p>DBMS 会进行 SQL 编译，检查出不符合 SQL 语法，编译报错。</p>\n<p>解决:</p>\n<p>​\tselect deptno, dname ‘dept name’ from dept;// 加单引号</p>\n<p>​\tselect deptno, dname “dept name” from dept;// 加双引号</p>\n<p><strong>注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准。双引号在 oracle 数据库中用不了。但是在 mysql 中可以使用。</strong></p>\n<p><strong>再次强调：数据库中的字符串都是采用单引号括起来。这是标准的，双引号不标准。</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"二列参与数学运算\"><a class=\"markdownIt-Anchor\" href=\"#二列参与数学运算\">#</a> 二：列参与数学运算</h2>\n<ol>\n<li>\n<p>计算员工年薪？sal * 12</p>\n<p>select ename, sal * 12 from emp;// 结论：列可以参与数学运算</p>\n<p>select ename, sal * 12 as ‘年薪’ from emp;// 别名是中文，用单引号括起来。</p>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql条件查询",
            "date_published": "2023-08-31T01:30:35.864Z",
            "content_html": "<h2 id=\"条件查询\"><a class=\"markdownIt-Anchor\" href=\"#条件查询\">#</a> 条件查询</h2>\n<p>什么是条件查询？</p>\n<p>不是将表中所有数据都查出来。是查询出来符合条件的。</p>\n<p>语法格式：</p>\n<p>​\tselect 字段 1，字段 2，字段 3 from 表名 where 条件；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">=</span> 等于</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;></span>或<span class=\"token operator\">!=</span> 不等于</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span> 小于</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;=</span> 小于等于</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> 大于</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>=</span> 大于等于</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">between</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 两个值之间，等同于 <span class=\"token operator\">>=</span> <span class=\"token operator\">and</span> <span class=\"token operator\">&lt;=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t注意：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t在使用<span class=\"token operator\">between</span> <span class=\"token operator\">and</span> 时，必须要遵循左小右大。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">between</span> <span class=\"token operator\">and</span> 是闭区间，包括两端的值。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t例如： <span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">between</span> <span class=\"token number\">2450</span> <span class=\"token operator\">and</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t错误写法：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">between</span> <span class=\"token number\">3000</span> <span class=\"token operator\">and</span> <span class=\"token number\">2450</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> 为 <span class=\"token boolean\">null</span> （<span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> 不为空）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>查询那些员工的津贴<span class=\"token operator\">/</span>补助为<span class=\"token boolean\">null</span>？</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>错误查询：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> comm <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>正确写法：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> comm <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">and</span> 并且</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>查询工作岗位是MANAGER并且工资大于<span class=\"token number\">2500</span>的员工信息？</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'MANAGER'</span> <span class=\"token operator\">and</span> sal<span class=\"token operator\">></span><span class=\"token number\">2500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">or</span> 或者</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>查询工作岗位是MANAGER或SALESMAN的员工信息？</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emo <span class=\"token keyword\">where</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'MANAGER'</span> <span class=\"token operator\">or</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'SALESMAN'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">in</span> 包含，相当于多个 <span class=\"token operator\">or</span> （<span class=\"token operator\">not</span> <span class=\"token operator\">in</span> 不在这个范围中）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>注意：<span class=\"token operator\">in</span>不是一个区间。<span class=\"token operator\">in</span>后面跟的是具体的值。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">not</span> <span class=\"token operator\">not</span>可以取非，主要用在<span class=\"token operator\">is</span> 或 <span class=\"token operator\">in</span> 中</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>相当于多个 <span class=\"token operator\">or</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">like</span> <span class=\"token operator\">like</span>称为模糊匹配查询，支持<span class=\"token operator\">%</span> 或下划线匹配</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">%</span> 匹配任意个字符</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>下划线，一个下划线只匹配一个字符</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>找出名字中有下划线的</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> t_student <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">\"%\\_%\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 \\ 转义字符</span></pre></td></tr></table></figure><p>注意： 在数据库中 null 不能使用等号进行衡量。需要使用 is null。因为数据库中的 null 代表什么也没有，它不是一个值，所以不能用等号衡量。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/3.%E7%90%86%E8%A7%A3Sql/%E7%90%86%E8%A7%A3Sql/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/3.%E7%90%86%E8%A7%A3Sql/%E7%90%86%E8%A7%A3Sql/",
            "title": "理解Sql",
            "date_published": "2023-08-31T01:30:35.855Z",
            "content_html": "<ol>\n<li>数据库当中最近基本的单元是表：table</li>\n</ol>\n<p>数据库当中是以表格的形式表示数据的。因为比较直观。</p>\n<p>任何一张表都有行和列：</p>\n<p>​\t行（row）：被称为数据 / 记录。</p>\n<p>​\t列（column）：被称为字段。</p>\n<p>每个字段都有：字段名，数据类型，约束等属性。</p>\n<ol start=\"2\">\n<li>\n<p>关于 SQL 语句的分类</p>\n<p>SQL 语句有很多，最好进行分门别类，这样更容易记忆。</p>\n<p>分为：</p>\n<ol>\n<li>\n<p>DQL：数据查询语言（凡是带 select 关键字的都是查询语句）</p>\n</li>\n<li>\n<p>DML：数据操作语言（凡是对表中的数据进行增删改查的都是 DML）</p>\n<ol>\n<li>\n<p>insert：增</p>\n</li>\n<li>\n<p>update：改</p>\n</li>\n<li>\n<p>delete：删</p>\n<p><strong>！！！主要操作表中的数据 data。</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>DDL：数据定义语言（凡是带有 create，drop，alter 的都是 DDL），DDL 主要操作的是表结构。不是表中的数据。</p>\n<ol>\n<li>\n<p>alter：修改</p>\n</li>\n<li>\n<p>create：新建，等同于增</p>\n</li>\n<li>\n<p>drop：删除</p>\n<p><strong>！！！主要对表结构进行操作。</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>TCL：事务控制语言。</p>\n<p>包括：</p>\n<ol>\n<li>事务提交：commit;</li>\n<li>事务回滚：rollback;</li>\n</ol>\n</li>\n<li>\n<p>DCL：是数据控制语言。</p>\n<p>例如：授权 grant，撤销权限 revoke…</p>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/2.Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/2.Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "Mysql常用命令",
            "date_published": "2023-08-31T01:30:35.800Z",
            "content_html": "<ol>\n<li>在 windows 操作系统中，怎么使用命令行来启动 Mysql 和关闭 Mysql 服务？</li>\n</ol>\n<p>语法：</p>\n<p>​\tnet stop 服务名称；</p>\n<p>​\tnet start 服务名称；</p>\n<ol start=\"2\">\n<li>\n<p>登录 Mysql 数据库</p>\n<p>明文密码登录：mysql -u [用户名] -p [密码]</p>\n<p>隐藏密码登录：mysql -u [用户名] -p + 回车键，然后输入密码</p>\n</li>\n<li>\n<p>退出 Mysql</p>\n<p>exit</p>\n</li>\n<li>\n<p>查看数据库有哪些数据库？mysql 默认自带了 4 个数据库</p>\n<p>show databases;</p>\n</li>\n<li>\n<p>怎么选择使用哪个数据库？</p>\n<p>use [数据库名]</p>\n</li>\n<li>\n<p>怎么创建数据库？</p>\n<p>create database [数据库名];</p>\n</li>\n<li>\n<p>怎么查看有哪些表？</p>\n<p>show tables;</p>\n</li>\n<li>\n<p>怎么查看表结构？</p>\n<p>desc [表名]</p>\n<p>全写为：</p>\n<p>​\tdescribe [表名]</p>\n</li>\n<li>\n<p>将 sql 文件中的数据导入？</p>\n<p>source [路径]</p>\n<p><strong>注意路径中不要有中文。</strong></p>\n<p>例如： source D:\\coure\\03-Mysql\\document\\bjpowernode.sql</p>\n</li>\n<li>\n<p>查看数据库版本号</p>\n<p>select version();</p>\n</li>\n<li>\n<p>查看当前使用的是那个数据库</p>\n<p>select database();</p>\n</li>\n<li>\n<p>中止输入的 mysql 命令（还未执行的命令）</p>\n<p>\\c 用来中止一条命令的输入。</p>\n<p>例如：</p>\n<p><em>mysql&gt; show</em><br>\n<em>-&gt;</em><br>\n<em>-&gt;</em><br>\n<em>-&gt;</em><br>\n<em>-&gt; \\c</em><br>\n<em>mysql&gt;</em></p>\n</li>\n<li>\n<p>查看 Mysql 支持那些存储引擎</p>\n</li>\n</ol>\n<p>show engines \\G;</p>\n<ol start=\"14\">\n<li>查看建表语句</li>\n</ol>\n<p>show create table 表名；</p>\n<p>！！！以上命令不区分大小写</p>\n<p>！！！注意：Mysql 中命令是不见分号；则不会执行命令。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/1.Mysql%E6%A6%82%E8%BF%B0/%E6%A6%82%E8%BF%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/1.Mysql%E6%A6%82%E8%BF%B0/%E6%A6%82%E8%BF%B0/",
            "title": "Mysql概述",
            "date_published": "2023-08-31T01:30:35.714Z",
            "content_html": "<p>1. 什么是数据库？什么是数据库管理系统？什么是 SQL？他们之间的关系是什么？</p>\n<p>​\t数据库：</p>\n<p>​\t\t英文单词 DataBase，简称 DB。按照一定格式存储数据的一些文件的组合。</p>\n<p>​\t\t顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p>\n<p>​\t数据库管理系统：</p>\n<p>​\t\tDataBaseManagement，简称 DBMS。</p>\n<p>​\t\t数据库管理系统是专门用来管理数据库中的数据，数据库管理系统可以对数据库当中的数据进行增删改查。</p>\n<p>​\t常见的数据库管理系统：</p>\n<p>​\t\tMysql，Oracle，MS，SqlServer，DB2，sybase 等。。。。。。</p>\n<p>​\tSQL:</p>\n<p>​\t\t结构化查询语言。程序员需要学习 SQL 语句，程序员通过编写 SQL 语句，然后 DBMS 负责执行 SQL 语句，最终来完成数据库中数据的增删改查操作。</p>\n<p>​\t\tSQL 是一套标准，主要学习的就是 SQL 语句。这个 SQL 在 mysql 中可以使用，同时在 Oracle 中也可以使用，在 DB2 中也可以使用。</p>\n<p>​\t三者之间的关系：</p>\n<p>​\t\tDBMS–&gt; 执行–&gt;SQL–&gt; 操作–&gt;DB</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/9.%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/9.%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql分组查询",
            "date_published": "2023-08-31T01:26:47.757Z",
            "content_html": "<h2 id=\"分组查询\"><a class=\"markdownIt-Anchor\" href=\"#分组查询\">#</a> 分组查询</h2>\n<h3 id=\"sql语句各个关键字的执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#sql语句各个关键字的执行顺序\">#</a> SQL 语句各个关键字的执行顺序</h3>\n<pre><code>select\n    ...         5\nfrom\n    ...         1\nwhere\n    ...         2\ngroup by\n    ...         3\nhaving\n    ...         4\norder by\n    ...         6\n</code></pre>\n<p>执行顺序：<br>\n1. from<br>\n2. where<br>\n3. group by<br>\n4. having<br>\n5. select<br>\n6. order by</p>\n<h3 id=\"重点结论\"><a class=\"markdownIt-Anchor\" href=\"#重点结论\">#</a> 重点结论</h3>\n<pre><code>在一条select语句当中，如果有group by语句的话，select后面只能跟分组函数，以及参加分组的字段。其他的一律不能跟。（Mysql可以执行，但没有意义，Oracle数据库当中会报错）\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/8.%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E8%A1%8C%E6%95%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/8.%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E8%A1%8C%E6%95%B0/",
            "title": "Mysql多行处理行数",
            "date_published": "2023-08-31T01:26:47.754Z",
            "content_html": "<h2 id=\"多行处理行数分组函数\"><a class=\"markdownIt-Anchor\" href=\"#多行处理行数分组函数\">#</a> 多行处理行数（分组函数）</h2>\n<p>特点：输入多行、最终输出一行</p>\n<h4 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h4>\n<pre><code>分组函数在使用时必须先进行分组，然后才能使用。\n如果你没有对数据进行分组，整张表默认为一组\n</code></pre>\n<h3 id=\"count-计数\"><a class=\"markdownIt-Anchor\" href=\"#count-计数\">#</a> count 计数</h3>\n<p>计算员工数量总和<br>\n select count (name) from emp;</p>\n<h3 id=\"sum-求和\"><a class=\"markdownIt-Anchor\" href=\"#sum-求和\">#</a> sum 求和</h3>\n<p>计算工资合<br>\n select sum (sal) from emp;</p>\n<h3 id=\"avg-平均值\"><a class=\"markdownIt-Anchor\" href=\"#avg-平均值\">#</a> avg 平均值</h3>\n<p>计算平均工资<br>\n select avg (sal) from emp;</p>\n<h3 id=\"max-最大值\"><a class=\"markdownIt-Anchor\" href=\"#max-最大值\">#</a> max 最大值</h3>\n<p>找出最高工资<br>\n select max (sal) from emp;</p>\n<h3 id=\"min-最小值\"><a class=\"markdownIt-Anchor\" href=\"#min-最小值\">#</a> min 最小值</h3>\n<p>找出最低工资<br>\n select min (sal) from emp;</p>\n<h2 id=\"分组函数使用时需要注意的地方\"><a class=\"markdownIt-Anchor\" href=\"#分组函数使用时需要注意的地方\">#</a> 分组函数使用时，需要注意的地方</h2>\n<pre><code>1. 分组函数自动忽略 NULL, 不需要提前处理。\n 例如：求所有员工津贴/补助的总和。\n    select sum(comm) from emp;//不需要加where comm is not null条件。\n2. 分组函数count(*) 和 count(具体字段)的区别。\n   1. count(具体字段)：表示统计该字段下所有不为 NULL 的元素的总数。\n   2. count(*)：统计表中所有行数。\n3. 分组函数不能直接用在where子句中。\n 例如：找出比最低工资高的员工信息。\n select ename, sal from emp where sal &gt; min(sal);// 错误SQL语句\n4. 所有分组函数可以组合起来一起使用。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/7.%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/7.%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/",
            "title": "Mysql单行处理函数",
            "date_published": "2023-08-31T01:26:47.751Z",
            "content_html": "<p>单行处理函数也叫做数据处理函数</p>\n<p>单行处理函数的特点：</p>\n<p>​\t一个输入对应一个输出</p>\n<p>和单行处理函数相对的是：</p>\n<p>​\t多行处理函数（特点：多个输入，对应一个输出）</p>\n<p>常见的单行处理函数</p>\n<ol>\n<li>\n<p>lower 转换小写</p>\n<p>select  lower(name)  from city;</p>\n</li>\n<li>\n<p>upper 转换大写</p>\n<p>select  upper(name)  from city;</p>\n</li>\n<li>\n<p>substr 取子串</p>\n<p>substr (被截取的字符串，起始下标，截取的长度)// 注意起始下标从 1 开始，没有 0</p>\n<p>select  substr(name, 1, length(name))  from city;</p>\n</li>\n<li>\n<p>concat 进行字符串拼接</p>\n<p>select concat(name, countrycode) from city;</p>\n</li>\n<li>\n<p>length 取长度</p>\n<p>select length(name) from city;</p>\n</li>\n<li>\n<p>trim 去除空格</p>\n<p>select * from city where name = trim (’   King   ');// 将查询条件中的前后空格去除</p>\n</li>\n<li>\n<p>round 四舍五入</p>\n<p>select 字段 from 表名；</p>\n<p>select name from city;</p>\n<p>select ‘abc’ from city;//select 后面直接跟 “字面量”/“字面值”</p>\n<p><strong>结论：select 后面可以跟某个表的字段名（可以等同看作变量名），也可以跟字面量 / 字面值（数据）</strong></p>\n<p>例如：</p>\n<p>select round (1276.567, 2) from city;// 保留二位小数 1276.57</p>\n<p>select round (1276.567, 1) from city;// 保留一位小数 1276.6</p>\n<p>select round (1276.567, 0) from city;// 保留整数 1277</p>\n<p>select round (1276.567, -1) from city;// 保留到十位 1270</p>\n<p>select round (1276.567, -2) from city;// 保留到百位 1280</p>\n</li>\n<li>\n<p>rand 生成随机数</p>\n<p>select rand() from city;</p>\n<p>例如：生成 100 以内的随机数</p>\n<p>select round(rand() * 100, 0) from city;</p>\n</li>\n<li>\n<p>ifnull 可以将 null 转换成一个具体值。</p>\n<p>ifnull 是空处理函数。专门处理空的。（因为在所有数据库中，只要有 null 参与的数学运算，最终结果都为 null）</p>\n<p>ifnull 函数语法：ifnull (数据，被当作那个值)</p>\n<p>如果 “数据” 为 null 的时候，把这个数据当作那个值</p>\n</li>\n<li>\n<p>case when … then … when … then … else … end</p>\n<p>例如：当员工的岗位为 MANAGER 的时候，工资上调 %10，当工作岗位是 SALESMAN 的时候，工资上调 %50，其他正常。</p>\n<p>（注意：不修改数据库，只是将查询结果显示为工资上调）</p>\n<p>select</p>\n<p>ename,</p>\n<p>job,</p>\n<p>sal as oldsal,</p>\n<p>(case when ‘MANAGER’ then sal*1.1 when ‘SALESMAN’ then sal**1.5 else sal end) as newsal</p>\n<p>from emp;</p>\n</li>\n<li>\n<p>format 数字格式化<br>\n format (数字，‘格式’)</p>\n<p>select ename, (sal, ‘$999,999’) from emp;</p>\n</li>\n<li>\n<p>str_to_date</p>\n<p>字符串转换为 date 类型</p>\n<p>str_to_date (‘日期字符串’, ‘日期格式’)</p>\n<p>Mysql 中日期格式：<br>\n% Y 年<br>\n % m 月<br>\n % d 日<br>\n % h 时<br>\n % i 分<br>\n % s 秒</p>\n<p>Java 中日期格式：<br>\nyyyy-MM-dd HH:mm:ss SSS</p>\n</li>\n<li>\n<p>date_format</p>\n</li>\n</ol>\n<p>从 date 类型转换为具有一定格式的字符串类型</p>\n<p>date_format (日期值，‘日期格式’)</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘10:13:20 11-11-1999’, ‘%h:%i:%s %d-%m-%Y’));</p>\n<p>insert into test values (1, ‘zhangsan’, str_to_date (‘11-1999’, ‘% m-% Y’));//date 类型为年月日，插入的值不完整，所以报错</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘11-1999’, ‘11-%m-%Y’));</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘10-11-1999’, ‘10-%m-%Y’));</p>\n<p>insert into test values (1, ‘zhangsan’, str_to_date (‘10-11-1999’, ‘% d-% m-% Y’));// 正确</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/6.%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/6.%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "title": "Mysql综合案例",
            "date_published": "2023-08-31T01:26:47.748Z",
            "content_html": "<ol>\n<li>\n<p>找出工资在 1250 到 3000 之间的员工信息，要求按照薪资降序排列。</p>\n<p>select ename, sal</p>\n<p>​\tfrom emp</p>\n<p>​\twhere sal between 1250 and 3000</p>\n<p>order by sal desc;</p>\n</li>\n</ol>\n<p>以上语句的执行顺序：</p>\n<ol>\n<li>from</li>\n<li>where</li>\n<li>select</li>\n<li>order by (排序总是在最后执行的！！！)</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/5.%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/5.%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/",
            "title": "Mysql排序",
            "date_published": "2023-08-31T01:26:47.745Z",
            "content_html": "<ol>\n<li>\n<p>查询所有员工薪资，排序</p>\n<p>select ename,sal from emp order by sal;// 默认升序</p>\n<p>select ename,sal from emp order by sal asc;// 指定 ASC 升序</p>\n<p>select ename,sal from emp order by sal desc;// 指定 DESC 降序</p>\n</li>\n<li>\n<p>多个字段进行排序</p>\n<p>例如：查询员工名字和薪资，要求按照薪资升序，如果薪资相同，再按照名字升序排列。</p>\n<p>select ename, sal from emp order by sal asc, ename asc;</p>\n</li>\n<li>\n<p>根据字段位置进行排序</p>\n<p>例如：按照查询结果的第 2 列 sal 进行排序。</p>\n<p>select ename, sal from emp order by 2;</p>\n<p>注意：不建议在开发中这样写，因为不健壮。</p>\n<p>因为列的顺序很容易发生改变，列顺序修改之后，2 就废了。</p>\n<p><strong>排序采用 order by 子句，order by 后面跟上排序字段，排序可以放多个，多个可以采用逗号（,）间隔，order by 默认采用升序，如果存在 where 子句那么 order by 必须放到最后面。</strong></p>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql条件查询",
            "date_published": "2023-08-31T01:26:47.742Z",
            "content_html": "<h2 id=\"条件查询\"><a class=\"markdownIt-Anchor\" href=\"#条件查询\">#</a> 条件查询</h2>\n<p>什么是条件查询？</p>\n<p>不是将表中所有数据都查出来。是查询出来符合条件的。</p>\n<p>语法格式：</p>\n<p>​\tselect 字段 1，字段 2，字段 3 from 表名 where 条件；</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">=</span> 等于</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;></span>或<span class=\"token operator\">!=</span> 不等于</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span> 小于</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;=</span> 小于等于</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> 大于</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>=</span> 大于等于</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">between</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 两个值之间，等同于 <span class=\"token operator\">>=</span> <span class=\"token operator\">and</span> <span class=\"token operator\">&lt;=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t注意：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t在使用<span class=\"token operator\">between</span> <span class=\"token operator\">and</span> 时，必须要遵循左小右大。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">between</span> <span class=\"token operator\">and</span> 是闭区间，包括两端的值。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t例如： <span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">between</span> <span class=\"token number\">2450</span> <span class=\"token operator\">and</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t错误写法：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">between</span> <span class=\"token number\">3000</span> <span class=\"token operator\">and</span> <span class=\"token number\">2450</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> 为 <span class=\"token boolean\">null</span> （<span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> 不为空）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>查询那些员工的津贴<span class=\"token operator\">/</span>补助为<span class=\"token boolean\">null</span>？</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>错误查询：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> comm <span class=\"token operator\">=</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>正确写法：<span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> comm <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">and</span> 并且</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>查询工作岗位是MANAGER并且工资大于<span class=\"token number\">2500</span>的员工信息？</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'MANAGER'</span> <span class=\"token operator\">and</span> sal<span class=\"token operator\">></span><span class=\"token number\">2500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">or</span> 或者</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>查询工作岗位是MANAGER或SALESMAN的员工信息？</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">select</span> empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emo <span class=\"token keyword\">where</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'MANAGER'</span> <span class=\"token operator\">or</span> job <span class=\"token operator\">=</span> <span class=\"token string\">'SALESMAN'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">in</span> 包含，相当于多个 <span class=\"token operator\">or</span> （<span class=\"token operator\">not</span> <span class=\"token operator\">in</span> 不在这个范围中）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>注意：<span class=\"token operator\">in</span>不是一个区间。<span class=\"token operator\">in</span>后面跟的是具体的值。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">not</span> <span class=\"token operator\">not</span>可以取非，主要用在<span class=\"token operator\">is</span> 或 <span class=\"token operator\">in</span> 中</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>相当于多个 <span class=\"token operator\">or</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">like</span> <span class=\"token operator\">like</span>称为模糊匹配查询，支持<span class=\"token operator\">%</span> 或下划线匹配</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">%</span> 匹配任意个字符</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>下划线，一个下划线只匹配一个字符</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>找出名字中有下划线的</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> t_student <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">\"%\\_%\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 \\ 转义字符</span></pre></td></tr></table></figure><p>注意： 在数据库中 null 不能使用等号进行衡量。需要使用 is null。因为数据库中的 null 代表什么也没有，它不是一个值，所以不能用等号衡量。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/4.%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/",
            "title": "简单的查询语句",
            "date_published": "2023-08-31T01:26:47.742Z",
            "content_html": "<ol>\n<li>\n<p>查询一个字段</p>\n<p>select 字段名 from 表名；</p>\n<p>其中要注意：</p>\n<p>​\tselect 和 from 都是关键字。</p>\n<p>​\t字段名和表名都是标识符。</p>\n<p><strong>强调：对于 SQL 语句来说，是通用的。所有的 SQL 语句以 &quot;;&quot; 结尾。另外 SQL 语句不区分大小写，都行。</strong></p>\n</li>\n<li>\n<p>查询多个字段</p>\n<p>使用逗号隔开 &quot;,&quot;</p>\n<p>select deptno,dname from dept;</p>\n</li>\n<li>\n<p>查询所有字段</p>\n<ol>\n<li>\n<p>可以把每个字段都写上</p>\n</li>\n<li>\n<p>可以使用 *</p>\n<ol>\n<li>\n<p>效率低</p>\n</li>\n<li>\n<p>可读性差</p>\n<p>在实际开发中不建议。</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>给查询的列起别名</p>\n<ol>\n<li>\n<p>使用 as 关键字起别名。</p>\n<p>select deptno, dname as deptname from dept;</p>\n</li>\n<li>\n<p>省略 as 关键字。</p>\n<p>select deptno, dname deptname from dept;</p>\n</li>\n<li>\n<p>起别名的时候，别名中有空格，怎么办？</p>\n<p>例如：</p>\n<p>select deptno, dname dept name from dept;</p>\n<p>DBMS 会进行 SQL 编译，检查出不符合 SQL 语法，编译报错。</p>\n<p>解决:</p>\n<p>​\tselect deptno, dname ‘dept name’ from dept;// 加单引号</p>\n<p>​\tselect deptno, dname “dept name” from dept;// 加双引号</p>\n<p><strong>注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准。双引号在 oracle 数据库中用不了。但是在 mysql 中可以使用。</strong></p>\n<p><strong>再次强调：数据库中的字符串都是采用单引号括起来。这是标准的，双引号不标准。</strong></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"二列参与数学运算\"><a class=\"markdownIt-Anchor\" href=\"#二列参与数学运算\">#</a> 二：列参与数学运算</h2>\n<ol>\n<li>\n<p>计算员工年薪？sal * 12</p>\n<p>select ename, sal * 12 from emp;// 结论：列可以参与数学运算</p>\n<p>select ename, sal * 12 as ‘年薪’ from emp;// 别名是中文，用单引号括起来。</p>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/3.%E7%90%86%E8%A7%A3Sql/%E7%90%86%E8%A7%A3Sql/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/3.%E7%90%86%E8%A7%A3Sql/%E7%90%86%E8%A7%A3Sql/",
            "title": "理解Sql",
            "date_published": "2023-08-31T01:26:47.738Z",
            "content_html": "<ol>\n<li>数据库当中最近基本的单元是表：table</li>\n</ol>\n<p>数据库当中是以表格的形式表示数据的。因为比较直观。</p>\n<p>任何一张表都有行和列：</p>\n<p>​\t行（row）：被称为数据 / 记录。</p>\n<p>​\t列（column）：被称为字段。</p>\n<p>每个字段都有：字段名，数据类型，约束等属性。</p>\n<ol start=\"2\">\n<li>\n<p>关于 SQL 语句的分类</p>\n<p>SQL 语句有很多，最好进行分门别类，这样更容易记忆。</p>\n<p>分为：</p>\n<ol>\n<li>\n<p>DQL：数据查询语言（凡是带 select 关键字的都是查询语句）</p>\n</li>\n<li>\n<p>DML：数据操作语言（凡是对表中的数据进行增删改查的都是 DML）</p>\n<ol>\n<li>\n<p>insert：增</p>\n</li>\n<li>\n<p>update：改</p>\n</li>\n<li>\n<p>delete：删</p>\n<p><strong>！！！主要操作表中的数据 data。</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>DDL：数据定义语言（凡是带有 create，drop，alter 的都是 DDL），DDL 主要操作的是表结构。不是表中的数据。</p>\n<ol>\n<li>\n<p>alter：修改</p>\n</li>\n<li>\n<p>create：新建，等同于增</p>\n</li>\n<li>\n<p>drop：删除</p>\n<p><strong>！！！主要对表结构进行操作。</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>TCL：事务控制语言。</p>\n<p>包括：</p>\n<ol>\n<li>事务提交：commit;</li>\n<li>事务回滚：rollback;</li>\n</ol>\n</li>\n<li>\n<p>DCL：是数据控制语言。</p>\n<p>例如：授权 grant，撤销权限 revoke…</p>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/25.%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/25.%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/",
            "title": "存储过程",
            "date_published": "2023-08-31T01:26:47.736Z",
            "content_html": "<h1 id=\"mysql存储过程\"><a class=\"markdownIt-Anchor\" href=\"#mysql存储过程\">#</a> Mysql 存储过程</h1>\n<p>存储过程是在数据库中定义一些 SQL 语句的集合，可以直接去调用这些存储过程来执行已经定义好的 SQL 语句。</p>\n<p>触发器和存储过程相似，都是嵌入到 MySql 中的一段儿程序。触发器是由事件来触发某个操作。当数据库执行这些事件时，就会激活触发器来执行相应的操作。</p>\n<h2 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\">#</a> 存储过程</h2>\n<p>数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。例如，为了确认学生能否毕业，需要同时查询学生档案、成绩表和从何表，此时就需要使用多条 SQL 语句来针对这几个数据表完成处理要求。存储过程就是这样一组为了完成特定功能的 SQL 语句的集合。</p>\n<p>使用存储过程的目的是将经常或复杂的工作预先使用 SQL 语句写好，并用一个指定的名称存储起来，这个过程经编译和优化由存储在数据库服务器中，因此成为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需要调用 “CALL 存储过程名字” 即可自动完成。</p>\n<p>常用操作数据库的 SQL 语句在执行的时候需要先编译，然后执行。存储过程则采用另一种方式来执行 SQL 语句。</p>\n<p>一个存储过程即一个可编程的函数，它可以在数据库中创建并保存，一般由 SQL 语句和一些特殊控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p>\n<pre><code>MySql5.0版本以前并不支持存储过程。\n</code></pre>\n<p>存储过程时数据库中的一个重要功能，存储过程可以用来转换数据、数据迁移、制作报表，它类似于编程语言，一次执行成功，就可以被调用，完成指定的功能操作。</p>\n<p>使用存储过程不仅可以提高数据的访问效率，同时也可以提高数据库使用的安全性。</p>\n<p>对于调用者来说，存储过程封装了 SQL 语句，调用者无需考虑逻辑功能的具体实现过程。只是简单调用即可，它可以被 Java 和 C# 等编程语言调用。</p>\n<h2 id=\"创建存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建存储过程\">#</a> 创建存储过程</h2>\n<p>创建存储过程使用 create procedure 语句，语法格式如下</p>\n<pre><code>create procedure &lt;过程名&gt; ([过程参数[,...]]) &lt;过程体&gt;\n</code></pre>\n<p>其中，过程参数是存储过程的参数列表。MySQL 存储过程支持三种类型的参数，即输入参数，输出参数和输入 / 输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。其中输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输出 / 输出参数既可以充当输入参数也可以充当输出参数。格式如下</p>\n<pre><code>[ IN | OUT | INOUT ] &lt;参出名&gt; &lt;类型&gt;\n</code></pre>\n<p>过程体是存储过程的主体部分，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 <strong>BEGIN</strong> 开始，以关键字 <strong>END</strong> 结束。若存储过程体中只有一条 SQL 语句，则可以省略 BEGIN-END 标志。</p>\n<p>在 Mysql 中，服务器处理 SQL 语句默认是以分号作为语句结束标志的。然而，在创建存储过程时，存储过程体可能包含有多条 SQL 语句，这些 SQL 语句如果仍以分号作为语句结束符号，那么 MySQL 服务器在处理存储过程时，会以遇到的第一条 SQL 语句结尾处的分号作为整个程序的额结束符，而不再去处理存储过程体后面的 SQL 语句，这样显然不行。为了解决以上问题，通常使用 <strong>DELIMITER</strong> 命令将结束命令修改为其他字符。语法格式如下。</p>\n<pre><code>DELIMITER $$\n</code></pre>\n<p>语法说明如下：<br>\n$$ 是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个 “？” 或两个 “￥“ 等。<br>\n当使用 DELIMITER 命令时，应该避免使用反斜杠 &quot;&quot; 字符，因为它是 MySQL 的转义字符。</p>\n<p>在 MySQL 命令行客户端使用：</p>\n<pre><code>mysql&gt; DELIMITER ??\n</code></pre>\n<p>执行该命令后，任何命令、语句或程序的结束标志就换为两个问号 &quot;??&quot; 了。</p>\n<p>注意：DELIMITER 和分号 “;” 之间一定要有一个空格（使用分号 &quot;;&quot; 作为 MySQL 语句结束符）。</p>\n<p>在创建存储过程时，必须具有 create routine 权限。</p>\n<p>例如：<br>\nmysql&gt; DELIMITER //<br>\nmysql&gt; CREATE PROCEDURE GetScoreByStu<br>\n-&gt; (IN name VARCHAR(30))<br>\n-&gt; BEGIN<br>\n-&gt; SELECT student_score FROM tb_students_score<br>\n-&gt; WHERE student_name=name;<br>\n-&gt; END //<br>\nQuery OK, 0 rows affected (0.01 sec)</p>\n<h2 id=\"12-查看存储过程\"><a class=\"markdownIt-Anchor\" href=\"#12-查看存储过程\">#</a> 1.2 查看存储过程</h2>\n<pre><code>SHOW PROCEDURE STATUS LIKE 存储过程名;\n</code></pre>\n<p>也可以查看存储过程的定义，语法格式如下</p>\n<pre><code>SHOW CREATE PROCEDURE 存储过程名\n</code></pre>\n<h2 id=\"13修改存储过程\"><a class=\"markdownIt-Anchor\" href=\"#13修改存储过程\">#</a> 1.3 修改存储过程</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/24.%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/24.%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/",
            "title": "主从同步机制",
            "date_published": "2023-08-31T01:26:47.733Z",
            "content_html": "<h1 id=\"主从同步机制\"><a class=\"markdownIt-Anchor\" href=\"#主从同步机制\">#</a> 主从同步机制</h1>\n<p>作用</p>\n<ul>\n<li>可以用作一种备份机制，相当于热备份</li>\n<li>可以用做读写分离，均衡数据库负载</li>\n</ul>\n<p>概述</p>\n<p>MySQL 主从复制也能够称为 MySQL 主从同步，它是构建数据库高可用集群架构的基础。它经过将一台主机的数据复制到其余一台或多台主机上，并从新应用 relay log 中的 SQL 语句来实现复制功能。MySQL 支持单向、双向、链式级联、异步复制，5.5 版本以后加入的半同步复制，5.6 版本以后的 GTID 复制，MySQL5.7 的多源复制、并行复制、loss-less 复制。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/23.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/23.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/",
            "title": "数据库范式",
            "date_published": "2023-08-31T01:26:47.731Z",
            "content_html": "<h1 id=\"数据库设计三范式\"><a class=\"markdownIt-Anchor\" href=\"#数据库设计三范式\">#</a> 数据库设计三范式</h1>\n<p>什么是数据库设计范式？<br>\n数据库表的设计依据。</p>\n<h2 id=\"第一范式\"><a class=\"markdownIt-Anchor\" href=\"#第一范式\">#</a> 第一范式</h2>\n<pre><code>要求任何一张表必须有主键，每一个字段原子性不可再分\n\n案例：\n学生编号    学生姓名    联系方式\n1001        张三        zs@gmail.com,135999999\n1002        李四        li@gmail.com,136999999\n1003        王五        ww@gmail.com,137999999\n\n以上表设计不满足第一范式--没有主键，联系方式可拆分\n\n修改：\n学生编号(pk)    学生姓名        邮箱                联系电话\n1001            张三        zs@gmail.com       135999999\n1002            李四        li@gmail.com       136999999\n1003            王五        ww@gmail.com       137999999\n</code></pre>\n<h2 id=\"第二范式\"><a class=\"markdownIt-Anchor\" href=\"#第二范式\">#</a> 第二范式</h2>\n<pre><code>建立在第一范式基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖\n\n案例：\n学生编号        学生姓名        教师编号        教师姓名\n1001            张三            001             王老师\n1002            李四            002             赵老师\n1002            李四            002             王老师\n1001            张三            001             赵老师\n\n以上表设计不满足第一范式--没有主键\n\n修改：\n学生编号    +    教师编号（pk）        学生姓名          教师姓名\n1001            001             张三               王老师\n1002            002             李四               赵老师\n1002            002             李四               王老师\n1001            001             张三               赵老师\n\n学生编号和教师编号连个字段做复合主键\n以上修改完之后表不满足第二范式--非主键字段，产生部分依赖(学生和教师关系产生多对多关系)\n    导致：数据冗余，空间浪费\n\n修改：\n学生编号    学生姓名\n1001        张三\n1002        李四\n\n教师编号    教师姓名\n001         王老师\n002         赵老师\n\n学生教师联合表\nid(pk)      学生编号(fk)   教师编号(fk)\n1            1001          001\n2            1002          001\n3            1001          002\n4            1002          002\n</code></pre>\n<h2 id=\"第三范式\"><a class=\"markdownIt-Anchor\" href=\"#第三范式\">#</a> 第三范式</h2>\n<pre><code>建立在第二范式基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖\n\n案例：\n学生编号（PK）        学生姓名        班级编号         班级名称\n1001                   张三            01             一班\n1002                   李四            02             二班\n1003                   王五            03             三班\n1004                   赵六            03             四班\n\n以上表的设计满足第一范式--有主键\n以上表的设计满足第二范式--主键是单一主键，不是复合主键，没有产生部分依赖（表中学生和班级是一对多关系）\n\n以上表不满足第三范式--传递性依赖（班级名称依赖班级编号，产生了传递依赖，不符合第三范式，产生了数据冗余）\n\n修改：\n班级表\n班级编号（pk）      班级名称\n01                  一班\n02                  二班\n...\n\n学生表\n学生编号（pk）      学生姓名        班级编号\n1001                张三            01\n...\n</code></pre>\n<p>作用：避免数据冗余，空间的浪费</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<pre><code>一对多：\n    一对多，两张表，多的表加外键\n\n多对多：\n    多对多，三张表，关系表两个外键\n\n一对一：\n    在一对一中，可能存在表字段太多，太庞大，需要拆分表\n    \n    案例：\n    id      login_name      login_pwd       real_name       email\n    1           admin       admin           张三            zs@gmail.com\n\n\n    修改：\n    登录信息表：\n    id      login_name      login_pwd\n    1       admin           admin\n\n    用户详细信息表：\n    id      real_name       email           login_id(fk+unique)\n    100        admin        zs@gmail.com        1\n\n    在一对一拆分表时，可以使用 外键+唯一性约束 设计表\n</code></pre>\n<h2 id=\"重点\"><a class=\"markdownIt-Anchor\" href=\"#重点\">#</a> 重点</h2>\n<pre><code>数据库设计三范式是理论上的。\n实践和理论有时候有偏差。\n最终的目的都是为了满足客户的需求，有的时候会拿数据冗余换速度。因为Sql中，表和表之间的连接次数过多，效率越低（笛卡尔积）\n有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/22.DBA%E5%91%BD%E4%BB%A4/DBA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/22.DBA%E5%91%BD%E4%BB%A4/DBA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "DBA命令",
            "date_published": "2023-08-31T01:26:47.728Z",
            "content_html": "<h1 id=\"dba命令\"><a class=\"markdownIt-Anchor\" href=\"#dba命令\">#</a> DBA 命令</h1>\n<p><strong>必须超级管理员操作</strong></p>\n<h2 id=\"新建用户\"><a class=\"markdownIt-Anchor\" href=\"#新建用户\">#</a> 新建用户</h2>\n<pre><code>create USER username IDENTIFIED by 'password';\n\ncreate USER 'username'@'host' IDENTIFIED by 'password';\n</code></pre>\n<p>username：创建的用户名。</p>\n<p>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %</p>\n<p>password：该用户的登陆密码。密码可以为空，如果为空则该用户可以不需要密码登陆服务器。</p>\n<h2 id=\"授权\"><a class=\"markdownIt-Anchor\" href=\"#授权\">#</a> 授权</h2>\n<pre><code>GRANT SELECT,INSERT on *.* to 'guest'@'%';\n</code></pre>\n<p><em>.</em>：表示表示所有库的所有表</p>\n<pre><code>grant all privileges on 数据库 to '用户名'@'IP地址';\n</code></pre>\n<h2 id=\"回收权限\"><a class=\"markdownIt-Anchor\" href=\"#回收权限\">#</a> 回收权限</h2>\n<pre><code>revoke all privileges from 数据库 to '用户名'@'IP地址';\n</code></pre>\n<p>all privileges 指除了 grant 之外的所有权限，也可以自己设置权限</p>\n<p>例如：grant insert on world.* to ‘用户名’@‘IP 地址’;(只能对 world 数据库做插入操作，world.* 表示对 world 中所有表）</p>\n<h2 id=\"导出导入\"><a class=\"markdownIt-Anchor\" href=\"#导出导入\">#</a> 导出导入</h2>\n<pre><code>导出\n    在windows的dos命令窗口中：\n    mysqldump nk&gt;D:\\nk.sql -uroot -proot\n\n    导出指定的表:导出nk数据库中 student表\n    mysqldump nk student&gt;D:\\nk.sql -uroot -proot\n\n\n导入\n    登录到mysql中，创建数据库 create database nk;\n    然后导入sql文件\n    source D:\\nk.sql\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/21.%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/21.%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/",
            "title": "视图",
            "date_published": "2023-08-31T01:26:47.725Z",
            "content_html": "<h1 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h1>\n<p>什么是视图？<br>\nview：站在不同的角度，去看待同一份数据</p>\n<h2 id=\"创建视图\"><a class=\"markdownIt-Anchor\" href=\"#创建视图\">#</a> 创建视图</h2>\n<pre><code>create view 视图名 as DQL语句;\n\ncreate view emp_view as select * from emp;\n</code></pre>\n<p>注意：只有 DQL 语句才能以 view 的形式创建</p>\n<h2 id=\"删除视图\"><a class=\"markdownIt-Anchor\" href=\"#删除视图\">#</a> 删除视图</h2>\n<pre><code>drop view emp_view;\n</code></pre>\n<h2 id=\"视图作用可以干什么方便-简化开发-利于维护\"><a class=\"markdownIt-Anchor\" href=\"#视图作用可以干什么方便-简化开发-利于维护\">#</a> 视图作用（可以干什么）–方便、简化开发、利于维护</h2>\n<pre><code>可以面向视图对象进行增删改查，对视图对象的增删改查，会导致原表被操作\n\n特点：对视图的操作，会影响到原表数据\n\nselect * from dept2_view;\n\ninsert into dept2_view(deptno, dname, loc) vlaues(60, 'SALES', 'BJ');// （insert、delete、update）操作会影响到原表\n</code></pre>\n<p>视图对象在实际开发中，到底有什么作用？<br>\n假设有一条 SQL 语句，需要在不同位置反复使用，每次使用需要重新编写，可以把这条复杂的 SQL 语句以视图对象的形式创建出来<br>\n在需要编写这条 SQL 语句的位置直接使用视图对象。可以简化开发，并且利于后期维护。因为只需要修改一个位置就行了，只需要修改视图对象所映射的 SQL 语句</p>\n<p>使用视图开发的时候，可以像使用 table 一样，可以对视图进行增删改查等操作。<br>\n视图对象是存储在硬盘上的，不会消失</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",
            "title": "索引失效",
            "date_published": "2023-08-31T01:26:47.723Z",
            "content_html": "<h1 id=\"索引失效\"><a class=\"markdownIt-Anchor\" href=\"#索引失效\">#</a> 索引失效</h1>\n<p>什么时候索引会失效？</p>\n<pre><code>第一种情况：\n select * from t_user where name like '%z';\n\n 因为模糊匹配中以 '%' 开头了，索引失效（存在索引，但不走索引）\n\n\n第二种情况：\n 使用or的时候会失效，如果使用or，那么要求or两边字段条件都要有索引，才会走索引。如果其中一边有一个字段没有索引，那么另一个字段上的索引也会失效\n\n\n第三种情况：\n 使用复合索引的时候，没有使用左侧的列查找，索引失效( 最左原则 )\n create index emp_job_sal_index on emp(job, sal);\n\n explain select * from emp where job = 'MANAGER';// 走索引\n explain select * from emp where sal = 1000;// 索引失效\n\n\n第四种情况：\n 在where当中，索引参与了数学运算，索引失效\n\n create index emp_sal_index on emp(sal);\n\n explain select * from emp where sal = 800;// 走索引\n explain select * from emp where sal = 800 + 100;// 走索引\n\n explain select * from emp where sal + 100 = 800;// 索引失效\n\n\n第五种情况：\n 在where当中，索引列使用了函数，索引失效\n\n create index emp_ename_index on emp(ename);\n\n explain select * from emp where ename = 'SIMTH';// 走索引\n\n explain select * from emp where lower(ename) = 'simth';// 索引失效\n\n\n第六种情况：....\n第七种情况：....\n...\n\n\n\n索引是数据库优化的重要手段，优化的时候，优先考虑的因素就是索引。\n</code></pre>\n<p>索引分类：<br>\n单一索引：<br>\n复合索引：<br>\n主键索引：<br>\n唯一性索引：<br>\n…</p>\n<p>注意：唯一性比较弱的字段上添加索引用处不大。（可能存在大量重复数据，这个时候索引起不到什么作用，越唯一，效率越高）</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95/",
            "title": "索引",
            "date_published": "2023-08-31T01:26:47.721Z",
            "content_html": "<h1 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>什么是索引？<br>\n索引在数据库表的字段上添加的，是为了提高检索（查询）效率存在的一种机制</p>\n<pre><code>一张表的一个字段可以添加一个索引，多个字段可以联合起来添加索引\n\n索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制\n</code></pre>\n<p>举例：<br>\n查字典：<br>\n1. 一页一页查找，直到找到为止。这种查找属于全表扫描，效率低</p>\n<pre><code>    3. 通过目录（索引），去定位一个大概的位置，然后直接定位到该位置，做局域性扫描，缩小扫描的范围，快速的查找。这种方式属于索引检索，效率高\n\nMysql中查询的两种方式：\n    1. 全表扫描\n    2. 根据索引检索\n</code></pre>\n<p>注意：<br>\n在 Mysql 数据库当中索引也是需要排序的，并且这个索引的排序和 TreeSet 数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！<br>\n在 Mysq 中索引是一个 B-Tree 数据结构。</p>\n<pre><code>遵循左小右大原则存放，采用中序遍历方式遍历取数据\n</code></pre>\n<p><strong>在任何数据库当中，主键都会自动添加索引对象</strong></p>\n<p><strong>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号</strong></p>\n<p><strong>在 Mysql 中，一个字段上如果右 unique 约束的话，也会自动创建索引对象</strong></p>\n<p><strong>在 Mysql 当中，索引是一个单独的对象，不同的存储引擎以不同形式存在。</strong><br>\n1. 在 MyISAM 存储引擎中，索引存储在一个.MYI 文件中<br>\n 2. 在 InnoDB 存储引擎当中，索引存储在一个叫 tablespace 当中。<br>\n3. 在 Memory 存储引擎当中，被存储在内存当中<br>\n不管索引存储在哪里，索引在 Mysql 中都是一个树的形式存在。（自平衡二叉树：B-Tree）</p>\n<h2 id=\"在mysql中主键以及unique字段上都会自动添加索引\"><a class=\"markdownIt-Anchor\" href=\"#在mysql中主键以及unique字段上都会自动添加索引\">#</a> 在 Mysql 中，主键以及 unique 字段上都会自动添加索引</h2>\n<p>什么条件下，需要考虑给字段添加索引？<br>\n1. 数据量庞大（需要测试）<br>\n2. 该字段经常出现在 where 查询条件中<br>\n 3. 该字段很少的 DML 操作（因为 DML 之后，索引经常需要重新排序）<br>\n注意：<br>\n建议不要随意添加索引，因为索引也是需要维护的，太多反而会降低系统性能<br>\n建议通过主键查询，建议通过 unique 约束字段进行查询，效率是比较高的</p>\n<h2 id=\"创建和删除索引\"><a class=\"markdownIt-Anchor\" href=\"#创建和删除索引\">#</a> 创建和删除索引</h2>\n<h3 id=\"创建索引\"><a class=\"markdownIt-Anchor\" href=\"#创建索引\">#</a> 创建索引</h3>\n<pre><code>create index 索引名 on 表名(要添加索引的字段名);\n\ncreate index emp_ename_index on emp(ename);\n</code></pre>\n<h3 id=\"删除索引\"><a class=\"markdownIt-Anchor\" href=\"#删除索引\">#</a> 删除索引</h3>\n<pre><code>drop index 索引名 on 表名;\n\ndrop index emp_ename_index on emp;\n\n\n在Mysql中查看一个SQL语句是否使用了索引进行检索\nexplain select * from t_user where name = 'zhangsan6';\n</code></pre>\n<p>举例：<br>\n## 查看 sql 语句执行详情<br>\n mysql&gt; explain select * from t_user where name = ‘zhangsan6’;<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n|  1 | SIMPLE      | t_user | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   12 |    10.00 | Using where |<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n1 row in set, 1 warning (0.00 sec)</p>\n<pre><code>## 为name字段创建索引\ncreate index user_name_index on t_user(name);\n\n## 在索引创建后，重新执行sql语句，查看sql执行情况\nmysql&gt; explain select * from t_user where name = 'zhangsan6';\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n| id | select_type | table  | partitions | type | possible_keys   | key             | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | t_user | NULL       | ref  | user_name_index | user_name_index | 1023    | const |    1 |   100.00 | Using index |\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/2.Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/2.Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "Mysql常用命令",
            "date_published": "2023-08-31T01:26:47.718Z",
            "content_html": "<ol>\n<li>在 windows 操作系统中，怎么使用命令行来启动 Mysql 和关闭 Mysql 服务？</li>\n</ol>\n<p>语法：</p>\n<p>​\tnet stop 服务名称；</p>\n<p>​\tnet start 服务名称；</p>\n<ol start=\"2\">\n<li>\n<p>登录 Mysql 数据库</p>\n<p>明文密码登录：mysql -u [用户名] -p [密码]</p>\n<p>隐藏密码登录：mysql -u [用户名] -p + 回车键，然后输入密码</p>\n</li>\n<li>\n<p>退出 Mysql</p>\n<p>exit</p>\n</li>\n<li>\n<p>查看数据库有哪些数据库？mysql 默认自带了 4 个数据库</p>\n<p>show databases;</p>\n</li>\n<li>\n<p>怎么选择使用哪个数据库？</p>\n<p>use [数据库名]</p>\n</li>\n<li>\n<p>怎么创建数据库？</p>\n<p>create database [数据库名];</p>\n</li>\n<li>\n<p>怎么查看有哪些表？</p>\n<p>show tables;</p>\n</li>\n<li>\n<p>怎么查看表结构？</p>\n<p>desc [表名]</p>\n<p>全写为：</p>\n<p>​\tdescribe [表名]</p>\n</li>\n<li>\n<p>将 sql 文件中的数据导入？</p>\n<p>source [路径]</p>\n<p><strong>注意路径中不要有中文。</strong></p>\n<p>例如： source D:\\coure\\03-Mysql\\document\\bjpowernode.sql</p>\n</li>\n<li>\n<p>查看数据库版本号</p>\n<p>select version();</p>\n</li>\n<li>\n<p>查看当前使用的是那个数据库</p>\n<p>select database();</p>\n</li>\n<li>\n<p>中止输入的 mysql 命令（还未执行的命令）</p>\n<p>\\c 用来中止一条命令的输入。</p>\n<p>例如：</p>\n<p><em>mysql&gt; show</em><br>\n<em>-&gt;</em><br>\n<em>-&gt;</em><br>\n<em>-&gt;</em><br>\n<em>-&gt; \\c</em><br>\n<em>mysql&gt;</em></p>\n</li>\n<li>\n<p>查看 Mysql 支持那些存储引擎</p>\n</li>\n</ol>\n<p>show engines \\G;</p>\n<ol start=\"14\">\n<li>查看建表语句</li>\n</ol>\n<p>show create table 表名；</p>\n<p>！！！以上命令不区分大小写</p>\n<p>！！！注意：Mysql 中命令是不见分号；则不会执行命令。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/",
            "title": "事务隔离",
            "date_published": "2023-08-31T01:26:47.716Z",
            "content_html": "<h1 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\">#</a> 事务隔离级别</h1>\n<h2 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h2>\n<h3 id=\"读未提交read-uncommitted\"><a class=\"markdownIt-Anchor\" href=\"#读未提交read-uncommitted\">#</a> 读未提交：read uncommitted</h3>\n<pre><code>概念：\n    事务A可以读取到事务B未提交的数据\n\n存在脏读现象（Dirty Rread）：称读到脏数据\n</code></pre>\n<h3 id=\"读已提交readcommitted\"><a class=\"markdownIt-Anchor\" href=\"#读已提交readcommitted\">#</a> 读已提交：readcommitted</h3>\n<pre><code>概念：\n    事务A只能读取到事务B提交之后的数据\n这种隔离级别解决了脏读现象\n\n存在‘不可重复读取数据’问题：在事务开启后，每次读取到的数据可能不一致。比如A开始事务循环读取数据的过程中，B事务不断修改数据并提交，导致A事务在后续的数据读取过程中，数据产生不一致的现象\n\n这种隔离级别是比较真实的数据，每一次读到的数据绝对真实\n注意：Oracle数据库默认的隔离级别是： read committed\n</code></pre>\n<h3 id=\"可重复读repeatable-read\"><a class=\"markdownIt-Anchor\" href=\"#可重复读repeatable-read\">#</a> 可重复读：repeatable read</h3>\n<pre><code>概念：\n    事务A开启后，不管多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据修改，并且提交了。事务A读取到的数据还是没有发生改变，这就是可重复读\n解决了不可重复读的现象\n\n存在幻读现象：每一次读取到的数据都是幻象，不够真实\n\nMysql默认隔离级别\n</code></pre>\n<h3 id=\"序列化串行化serializable\"><a class=\"markdownIt-Anchor\" href=\"#序列化串行化serializable\">#</a> 序列化 / 串行化：serializable</h3>\n<pre><code>概念：\n\n隔离级别最高，效率最低。解决了所有问题\n不能并发\n</code></pre>\n<h2 id=\"测试隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#测试隔离级别\">#</a> 测试隔离级别</h2>\n<pre><code>查看变量：\nshow variables;\n通过like 通配符查询\nshow variables like '%isolation%';\n\n查看隔离级别：\nselect @@transaction_isolation; \n\n设置全局事务等级\nset global transaction isolation level read committed;\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/",
            "title": "事务",
            "date_published": "2023-08-31T01:26:47.714Z",
            "content_html": "<h1 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h1>\n<p>什么是事务？<br>\n一个事务就是一个完整的业务逻辑。<br>\n是一个最小的工作单元。</p>\n<pre><code>例如转账的业务逻辑，就是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。\n</code></pre>\n<p>本质：就是多条 DML 语句同时成功或者同时失败</p>\n<p><strong>只有 DML 语句和事务有关系，其他语句无关。</strong><br>\ninsert<br>\nupdate<br>\ndelete<br>\n 因为以上三个语句是操作数据库中数据的</p>\n<p>事务是怎么做到同时成功或者同时失败的？</p>\n<pre><code>InnoDB：提供一组用于记录事务特性活动的日志文件\n\n在事务执行的过程中，每一条DML的操作都会被记录到“事务特性活动的日志文件”中\n</code></pre>\n<p><strong>在事务执行的过程中，可以提交事务，也可以回滚事务</strong></p>\n<pre><code>提交事务： 清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中\n    标志着事务的结束，并且是一种全部成功的结束\n\n回滚事务： 将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件\n    回滚事务标志着事务的结束，并且是一种全部失败的结束\n</code></pre>\n<h2 id=\"提交事务-回滚事务\"><a class=\"markdownIt-Anchor\" href=\"#提交事务-回滚事务\">#</a> 提交事务、回滚事务</h2>\n<pre><code>提交事务：commit\n回滚事务：rollback (回滚只能回滚到上一次的提交点)\n\n事务对应的单词：transaction\n\nMysql中默认情况下是自动提交事务的（自动提交）\n\n开启事务\n    start transaction;\n</code></pre>\n<h2 id=\"事务特性\"><a class=\"markdownIt-Anchor\" href=\"#事务特性\">#</a> 事务特性</h2>\n<pre><code>A：原子性\n    说明事务是最小工作单元，不可再分\n\nC：一致性\n    所有事务要求，在同一个事务中，所有操作必须同时成功，或者同时失败，以保证数据的一致性\n\nI：隔离性\n    A事务和B事务之间具有一定的隔离\n\nD：持久性\n    事务最终结束的一个保障，事务提交，将没有保存到硬盘上的数据保存到硬盘上\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/18.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/18.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
            "title": "存储引擎",
            "date_published": "2023-08-31T01:26:47.712Z",
            "content_html": "<h1 id=\"存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎\">#</a> 存储引擎</h1>\n<p>什么是存储引擎？有什么用？</p>\n<pre><code>存储引擎是Mysql中特有的一个术语。其他数据库中没有（Oracle中也有，不叫这个名字）\n\n存储引擎实际上是一张表存储/组织数据的方式。\n\n不同的存储引擎，表存储的方式不同。\n</code></pre>\n<p>如何制定表的存储引擎？</p>\n<pre><code>可以在建表时，最后来指定表的存储引擎。\ncharset 来指定表的字符编码方式\n\nshow create table student;\n\nCREATE TABLE `student` (\n`id` int NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\n`cno` int DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `cno` (`cno`),\nCONSTRAINT `student_ibfk_1` FOREIGN KEY (`cno`) REFERENCES `t_class` (`t_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |\n</code></pre>\n<p>结论：<br>\nmysql 默认的存储引擎是 InnoDB<br>\nmysql 默认的字符编码方式： utf8mb4</p>\n<pre><code>create table test(\n    id int,\n    name varchar(10)\n) engine=InnoDB default CHARSET=utf8mb4;\n</code></pre>\n<h2 id=\"查看mysql支持哪些存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#查看mysql支持哪些存储引擎\">#</a> 查看 Mysql 支持哪些存储引擎</h2>\n<pre><code>show engines \\G;\n\nmysql&gt; show engines \\G;\n*************************** 1. row ***************************\n    Engine: MEMORY\n    Support: YES\n    Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 2. row ***************************\n    Engine: MRG_MYISAM\n    Support: YES\n    Comment: Collection of identical MyISAM tables\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 3. row ***************************\n    Engine: CSV\n    Support: YES\n    Comment: CSV storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 4. row ***************************\n    Engine: FEDERATED\n    Support: NO\n    Comment: Federated MySQL storage engine\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n*************************** 5. row ***************************\n    Engine: PERFORMANCE_SCHEMA\n    Support: YES\n    Comment: Performance Schema\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 6. row ***************************\n    Engine: MyISAM\n    Support: YES\n    Comment: MyISAM storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 7. row ***************************\n    Engine: InnoDB\n    Support: DEFAULT\n    Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n        XA: YES\nSavepoints: YES\n*************************** 8. row ***************************\n    Engine: ndbinfo\n    Support: NO\n    Comment: MySQL Cluster system information storage engine\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n*************************** 9. row ***************************\n    Engine: BLACKHOLE\n    Support: YES\n    Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 10. row ***************************\n    Engine: ARCHIVE\n    Support: YES\n    Comment: Archive storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 11. row ***************************\n    Engine: ndbcluster\n    Support: NO\n    Comment: Clustered, fault-tolerant tables\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n11 rows in set (0.00 sec)\n</code></pre>\n<h2 id=\"常用存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#常用存储引擎\">#</a> 常用存储引擎</h2>\n<h3 id=\"myisam\"><a class=\"markdownIt-Anchor\" href=\"#myisam\">#</a> MyISAM</h3>\n<pre><code>特征：\n    使用三个文件夹表示每个表\n        格式文件-存储表结构的定义（mytable.frm)\n        数据文件-存储表行的内容（mytable.MYD)\n        索引文件-存储表上的索引（mytable.MYI) ：索引是一本数的目录，缩小扫描范围，提高效率\n    可被转换为压缩、只读表来节省空间\n\n优点：可被转换为压缩、只读表来节省空间\n缺点：不支持事务机制，安全性低\n</code></pre>\n<h3 id=\"innodb\"><a class=\"markdownIt-Anchor\" href=\"#innodb\">#</a> InnoDB</h3>\n<pre><code>Mysql默认的存储引擎，同时也是一个重量级的存储引擎\n主要特点：非常安全\n    InnoDB支持事务\n    支持数据库崩溃后自动回复机制\n\n特征：\n    1. 每个InnoDB表在数据库目录中以.frm格式文件表示\n    2. InnoDB表空间tablespace被用于存储表的内容\n    3. 提供一组用于记录事务特性活动的日志文件\n    4. 用commit（提交）、savepoint 及 rollback（回滚）支持事务处理\n    5. 提供全ACID兼容\n    6. 在Mysql服务器崩溃后提供自动恢复\n    7. 多版本（MVCC）和行级锁定\n    8. 支持外键及引用的完整性，包括级联删除和更新\n    \n优点：支持事务\n    以保证数据的安全。\n缺点：\n    1. 效率不是很高\n    2. 不能压缩\n    3. 不能转换为只读\n    4. 不能很好的节省存储空间\n</code></pre>\n<h3 id=\"memory\"><a class=\"markdownIt-Anchor\" href=\"#memory\">#</a> MEMORY</h3>\n<pre><code>内存存储引擎（别名堆引擎）\n\n使用MEMORY存储引擎的表，其数据存储在内存中，且长度固定\n这俩个特点使得MEMORY存储引擎非常快\n\n特征：\n    1. 在数据库目录中，每个表都以.frm 格式的文件表示\n    2. 表数据和索引被存储在内存中（目的：查询快）\n    3. 表级锁机制\n    4. 不能包含 TEXT 或 BLOB 字段\n\nMEMORY 存储引擎以前被称为HEAP引擎。\n\n优点：查询效率最高\n缺点：不安全，关机后数据消失，因为数据和索引都是存储在内存当中\n</code></pre>\n<h2 id=\"注意对于一张表来说只要是主键或者加有unique约束的字段上会自动创建索引\"><a class=\"markdownIt-Anchor\" href=\"#注意对于一张表来说只要是主键或者加有unique约束的字段上会自动创建索引\">#</a> 注意：对于一张表来说，只要是主键，或者加有 unique 约束的字段上会自动创建索引。</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/17.%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/17.%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/",
            "title": "约束",
            "date_published": "2023-08-31T01:26:47.709Z",
            "content_html": "<h1 id=\"约束\"><a class=\"markdownIt-Anchor\" href=\"#约束\">#</a> 约束</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<pre><code>constraint，在创建表的时候，创建一些约束，保证表中数据的完整性、有效性\n</code></pre>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>保证表中的数据有效。\n</code></pre>\n<h3 id=\"非空约束\"><a class=\"markdownIt-Anchor\" href=\"#非空约束\">#</a> 非空约束</h3>\n<pre><code>not null：字段值不能为NULL\n\ncreate table student(\n    id int,\n    name varchar(50) not null   // 只有列级 '非空约束'，没有表级 '非空约束'\n);\n</code></pre>\n<h3 id=\"唯一性约束\"><a class=\"markdownIt-Anchor\" href=\"#唯一性约束\">#</a> 唯一性约束</h3>\n<pre><code>unique:字段值不能重复，但可以为NULL（可以有多条NULL值）\n\ncreate table student(\n    id int,\n    name varchar(50) unique\n);\n\n案例：\nmysql&gt; select * from student;\n+------+------+\n| id   | name |\n+------+------+\n|    1 | z    |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n+------+------+\n6 rows in set (0.00 sec)\n\nmysql&gt; desc student;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int         | YES  |     | NULL    |       |\n| name  | varchar(50) | YES  | UNI | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<h4 id=\"建立多个字段唯一性约束\"><a class=\"markdownIt-Anchor\" href=\"#建立多个字段唯一性约束\">#</a> 建立多个字段唯一性约束</h4>\n<pre><code>1. 多字段各自唯一性约束\ncreate table student(\n    id int unique,\n    name varchar(50) unique // 列级约束\n);\n上边的表，id 和 name 字段各自有唯一性约束，互不影响。\n\n2. 多字段组合后唯一性约束\ncreate table student(\n    id int,\n    name varchar(50),\n    unique(id, name)    // 表级约束\n);\n上边的表，id 和 name 字段联合起来唯一。\n</code></pre>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h3>\n<pre><code>在Mysql中，如果一个字段同时被 not null 和 unique 约束的话，该字段自动成为主键。（Oracle中不一样）\n</code></pre>\n<h3 id=\"主键约束\"><a class=\"markdownIt-Anchor\" href=\"#主键约束\">#</a> 主键约束</h3>\n<pre><code>primary key\n\n主键值是每一行的唯一标识\n主键特征：unique + not null\n\n写法一：列级约束\ncreate table student(\n    id int primary key,\n    name varchar(255)\n);\n\n写法二：表级约束\ncreate table student(\n    id int,\n    name varchar(255),\n    primary key(id)\n);\n</code></pre>\n<h4 id=\"多个字段建立主键约束\"><a class=\"markdownIt-Anchor\" href=\"#多个字段建立主键约束\">#</a> 多个字段建立主键约束</h4>\n<pre><code>// 复合主键\ncreate table student(\n    id int,\n    name varchar(255),\n    primary key(id, name)\n);\n\n//错误 一张表不能建立多个主键\n    create table student(\n    id int primary key,\n    name varchar(255) primary key\n);\n</code></pre>\n<h4 id=\"mysql中自然主键\"><a class=\"markdownIt-Anchor\" href=\"#mysql中自然主键\">#</a> Mysql 中自然主键</h4>\n<pre><code>create table student(\n    id int primary key auto_increment,  // 从 1 开始递增\n    name varchar(255)\n);\n</code></pre>\n<h3 id=\"外键约束\"><a class=\"markdownIt-Anchor\" href=\"#外键约束\">#</a> 外键约束</h3>\n<pre><code> foreign key\n\ncreate table t_class(\n    t_id int primary key auto_increment,\n    t_name varchar(50)\n);\n\ncreate table student(\n    id int primary key auto_increment,\n    name varchar(255),\n    cno int,\n    foreign key (cno) references t_class(t_id)\n);\n</code></pre>\n<p>注意：子表中的外键引用父表中的某个字段，被引用的这个字段不一定是主键，但是至少有 unique 约束。（否则，子表不能确定引用的是父表中的那条数据）</p>\n<p><strong>注意：外键可以为 NULL</strong></p>\n<h3 id=\"检查性约束\"><a class=\"markdownIt-Anchor\" href=\"#检查性约束\">#</a> 检查性约束</h3>\n<pre><code>check(Mysql 不支持， Oracle支持)\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/16.DML/DML/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/16.DML/DML/",
            "title": "DML",
            "date_published": "2023-08-31T01:26:47.707Z",
            "content_html": "<h1 id=\"insert\"><a class=\"markdownIt-Anchor\" href=\"#insert\">#</a> insert</h1>\n<pre><code>// 根据字段名，插入数据\n// 注意： 字段名和值要一一对应\ninsert into 表名(字段名1,字段名2...) values(值1,值2...);\n\n\n//表示插入所有字段\ninsert into 表名 values(值1,值2...);\n\n// 一次插入多条数据，用逗号隔开\ninsert into test values(1, '张三', '1999-12-13'), (2, '李四', '2000-01-02');\n</code></pre>\n<h2 id=\"将查询结果插入到一张表\"><a class=\"markdownIt-Anchor\" href=\"#将查询结果插入到一张表\">#</a> 将查询结果插入到一张表</h2>\n<pre><code>快速创建dept_bak表，同时数据也存入了dept_bak表中。\ncreate table dept_bak as select * from dept;\n\n将查询到的结果insert into到dept_bak表中\ninsert into dept_bak select * from dept;\n</code></pre>\n<h1 id=\"update\"><a class=\"markdownIt-Anchor\" href=\"#update\">#</a> update</h1>\n<pre><code>update 表名 set 字段名1 = 值1, 字段名2 = 值2 where 条件;\n</code></pre>\n<h1 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h1>\n<pre><code>delete from 表名 where 条件;\n\n原理：\n表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放\n\n优点：支持回滚，可以恢复\n缺点：删除效率低\n</code></pre>\n<h2 id=\"快速删除表\"><a class=\"markdownIt-Anchor\" href=\"#快速删除表\">#</a> 快速删除表</h2>\n<pre><code>truncate 语句删除数据（属于DDL）\n    删除效率高，表被一次截断，物理删除\n\n    优点：效率高，快\n    缺点：不支持回滚\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/15.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/15.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "数据类型",
            "date_published": "2023-08-31T01:26:47.704Z",
            "content_html": "<h1 id=\"mysql-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据类型\">#</a> Mysql 数据类型</h1>\n<pre><code>varchar\n    可变长度的字符串\n    比较智能，节省空间\n    会根据实际长度，动态的分配空间\n\n    缺点：需要动态分配空间，速度慢\n    优点：节省空间\n\nchar\n    定长字符串\n    不管实际长度是多少\n    分配固定长度的空间去存储数据\n    使用不恰当的时候，可能导致空间浪费\n\n    缺点：使用不当，可能导致空间浪费\n    优点：不需要动态分配空间，速度快\n\nint\n\nbigint\n\nfloat\n\ndouble\n\ndate\n    短日期类型\n\ndatetime\n    长日期类型\n\nclob\n    字符大对象\n    最多存储4g的字符串\n    比如：存储一篇文章\n    超过255个字符的，尽量都使用clob\n    Character Large Object: clob\n\nblob\n    存储二进制对象\n    图片，声音，视频，等流媒体数据\n    往blob字段中插入数据时，需要使用IO流。\n\ndate\n    短日期：只包括 年月日\n\n    Mysql默认格式：可以将该格式的时间字符串直接插入到date类型的字段中\n    %Y-%m-%d\n\n\ndatetime\n    长日期：包括 年月日时分秒\n\n    Mysql默认格式：可以将该格式的时间字符串直接插入到date类型的字段中\n    %Y-%m-%d %h:%i:%s\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/14.DDL/DDL/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/14.DDL/DDL/",
            "title": "DDL",
            "date_published": "2023-08-31T01:26:47.701Z",
            "content_html": "<h1 id=\"ddl-语句\"><a class=\"markdownIt-Anchor\" href=\"#ddl-语句\">#</a> DDL 语句</h1>\n<pre><code>create、drop、alter\n</code></pre>\n<h2 id=\"create-建表\"><a class=\"markdownIt-Anchor\" href=\"#create-建表\">#</a> create 建表</h2>\n<pre><code>语法格式：\ncreate table 表名 (\n    字段名 数据类型,\n    字段名 数据类型,\n    ...\n    字段名 数据类型 //切记！！！   最后一句没有标点符号\n);\n</code></pre>\n<h3 id=\"快速创建表\"><a class=\"markdownIt-Anchor\" href=\"#快速创建表\">#</a> 快速创建表</h3>\n<pre><code>create table emp2 as select * from emp;\n原理：\n    将一个查询结果当作一张表新建\n    可以快速创建一张表，同时数据也存在。\n\ncreate table emp2 as select * from emp where ename = 'SMITH';\n注意：查询语句可以添加条件等。\n</code></pre>\n<h2 id=\"drop-删表\"><a class=\"markdownIt-Anchor\" href=\"#drop-删表\">#</a> drop 删表</h2>\n<pre><code>语法格式：\ndrop table 表名;    //当表不存在时，会报错\ndrop table if exists 表名;  // 当表存在的话，删除\n</code></pre>\n<h2 id=\"alter-对表结构修改\"><a class=\"markdownIt-Anchor\" href=\"#alter-对表结构修改\">#</a> alter 对表结构修改</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/13.%E5%88%86%E9%A1%B5/limit/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/13.%E5%88%86%E9%A1%B5/limit/",
            "title": "Mysql中limit",
            "date_published": "2023-08-31T01:26:47.698Z",
            "content_html": "<h1 id=\"limit\"><a class=\"markdownIt-Anchor\" href=\"#limit\">#</a> limit</h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>将查询结果集的一部分取出来，通常用在分页中。\n</code></pre>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h2>\n<pre><code>limit startIndex, length\nstartIndex: 起始下标，从0开始\nlength: 长度\n\n缺省用法：limit length\nlength: 长度\n</code></pre>\n<p>案例：按照薪资降序，取出前五名员工。</p>\n<pre><code>\n缺省用法：\n\nselect\n    ename, sal\nfrom\n    emp\norder by\n    sal desc\nlimit 5;\n\n完整用法：\n\nselect\n    ename, sal\nfrom\n    emp\norder by\n    sal desc\nlimit 5;\n\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<pre><code>在mysql中，limit是在order by之后执行的。\n</code></pre>\n<h1 id=\"分页\"><a class=\"markdownIt-Anchor\" href=\"#分页\">#</a> 分页</h1>\n<pre><code>limit (pageNum - 1) * pageSize, pageSize;\n</code></pre>\n<h2 id=\"offset\"><a class=\"markdownIt-Anchor\" href=\"#offset\">#</a> offset</h2>\n<pre><code>作用同limit，配合limit使用，注意：limit此时只能有一个参数\n\nlimit pageSize, offset (pageNum - 1) * pageSize;\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/6.union/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/6.union/",
            "title": "Mysql中union",
            "date_published": "2023-08-31T01:26:47.695Z",
            "content_html": "<h1 id=\"union\"><a class=\"markdownIt-Anchor\" href=\"#union\">#</a> union</h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>合并查询结果集\n</code></pre>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>union的效率更高一些。对于表连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。\n但是union可以减少匹配次数。\n在减少匹配次数的情况下，还可以完成两个结果的拼接。\n\n例如：a 连接 b 连接 c\na: 10条记录\nb: 10条记录\nc: 10条记录\n匹配次数为 : 10*10*10 = 1000\n\n如果改为union\na 连接 b ： 10*10 = 100\na 连接 c ： 10*10 = 100\n100 + 100 = 200次（union把乘法变成了加法运算）\n</code></pre>\n<p>案例：查询工作岗位是 ‘MANAGER’ 和 ‘SALESMAN’ 的员工</p>\n<pre><code>\n第一种方法：or\n第二种方法：in\n第三种方法：union\nselect ename from emp where job = 'MANAGER'\nunion\nselect ename from emp where job = 'SALESMAN';\n\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h2>\n<p>在使用 union 需要注意：<br>\n1.  union 在结果集合并的时候，要求两个结果列数相同。<br>\n2.  MYSQL 中，对应列的数据类型可以不相同，Oracle 里会报错（会要求对应列的数据类型相同）。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/5.%E5%AD%90%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/5.%E5%AD%90%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql子查询",
            "date_published": "2023-08-31T01:26:47.694Z",
            "content_html": "<h1 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\">#</a> 子查询</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>select语句中嵌套select语句，被嵌套的select语句被称为子查询。\n</code></pre>\n<h2 id=\"子查询可以出现的位置\"><a class=\"markdownIt-Anchor\" href=\"#子查询可以出现的位置\">#</a> 子查询可以出现的位置</h2>\n<pre><code>select\n    ..(select子).\nfrom\n    ..(select子).\nwhere\n    ..(select子).\n</code></pre>\n<h2 id=\"where子句中的子查询\"><a class=\"markdownIt-Anchor\" href=\"#where子句中的子查询\">#</a> where 子句中的子查询</h2>\n<p>案例：找出比最低工资高的员工的姓名和薪资。</p>\n<pre><code>\nselect \n    ename, sal\nfrom\n    emp\nwhere\n    sal &gt; (select min(sal) from emp);\n\n</code></pre>\n<h2 id=\"from-子查询\"><a class=\"markdownIt-Anchor\" href=\"#from-子查询\">#</a> from 子查询</h2>\n<pre><code>from后边的子查询，可以当作一张临时的表。\n</code></pre>\n<p>案例：找出每个岗位的平均工资的薪资等级</p>\n<pre><code>\nselect\n    t.*, sg.grade\nfrom\n    (select job, avg(sal) as avgsal from emp group job) t\njoin\n    salgrade\non\n    t.avgsal between sg.losal and hisal;\n\n</code></pre>\n<h2 id=\"select-子查询\"><a class=\"markdownIt-Anchor\" href=\"#select-子查询\">#</a> select 子查询</h2>\n<p>案例：找出每个员工的部门名称，要求显示员工姓名，部门名称。</p>\n<pre><code>\nselect\n    e.ename, (select d.ename from dept e where e.deptno = d.deptno) as dname\nfrom\n    emp e;\n\n</code></pre>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h3>\n<pre><code>在select语句中的子查询，这个子查询语句只能一次返回一条结果，多于一条，就报错了。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/4.%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/4.%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql多表连接查询",
            "date_published": "2023-08-31T01:26:47.693Z",
            "content_html": "<h1 id=\"多表连接查询\"><a class=\"markdownIt-Anchor\" href=\"#多表连接查询\">#</a> 多表连接查询</h1>\n<pre><code>语法：\nselect\n    ...\nfrom\n    a\njoin                    // 内连接\n    b\non\n    a表和b表的连接条件\njoin                    // 内连接\n    c\non\n    a表和c表的连接条件\nright join              // 外连接\n    d\non\n    a和d的连接条件\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<p><strong>一条 SQL 中内连接和外连接可以混合，都可以出现！</strong></p>\n<p>案例：找出每个员工的部门名称，以及工资等级，要求显示员工名，部门名，薪资，薪资等级。</p>\n<pre><code>\nselect \n    e.ename, d.ename, e.sal, sg.grade \nfrom \n    emp e \njoin \n    dept d \non \n    e.deptno = d.deptno \njoin \n    salgrade sg \non \n    e.sal between sg.losal and hisal;\n\n</code></pre>\n<p>案例：找出每个员工的部门名称，以及工资等级，要求显示员工名，领导名，部门名，薪资，薪资等级。</p>\n<pre><code>\nselect \n    e.ename, d.ename, e.sal, sg.grade \nfrom \n    emp e \njoin \n    dept d \non \n    e.deptno = d.deptno \njoin \n    salgrade sg \non \n    e.sal between sg.losal and hisal\nleft outer join\n    emp l\non\n    e.mgr = l.empno;\n\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/3.%E5%A4%96%E8%BF%9E%E6%8E%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/3.%E5%A4%96%E8%BF%9E%E6%8E%A5/",
            "title": "Mysql外连接",
            "date_published": "2023-08-31T01:26:47.691Z",
            "content_html": "<h1 id=\"外连接\"><a class=\"markdownIt-Anchor\" href=\"#外连接\">#</a> 外连接</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>外连接当中，两张表关联查询产生主次关系。\n左连接和右连接可以相互切换。（\n    1. 任何一个左连接都有一个右连接的写法。\n    2. 任何一个右连接都有一个左连接的写法。\n    ）\n</code></pre>\n<h2 id=\"右外连接\"><a class=\"markdownIt-Anchor\" href=\"#右外连接\">#</a> 右外连接</h2>\n<p>right 代表，将右边的表看作主表，主要是将这张主表的内容全部查出来，捎带着关联查询左边的表</p>\n<pre><code>\n                                          outer可以省略\nselect e.ename, d.ename from emp e right [outer] join dept d on e.deptno = e.deptno;\n\n</code></pre>\n<h2 id=\"左外连接\"><a class=\"markdownIt-Anchor\" href=\"#左外连接\">#</a> 左外连接</h2>\n<p>left 代表，将左边的表看作主表，和右外连接相反。</p>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<pre><code>外连接的查询结果条数一定是 &gt;= 内连接的查询结果条数\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2.%E5%86%85%E8%BF%9E%E6%8E%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2.%E5%86%85%E8%BF%9E%E6%8E%A5/",
            "title": "Mysql内连接",
            "date_published": "2023-08-31T01:26:47.690Z",
            "content_html": "<h1 id=\"内连接\"><a class=\"markdownIt-Anchor\" href=\"#内连接\">#</a> 内连接</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>完全能够匹配上这个条件的数据查询出来。\nA，B两张表连接查询，AB两张表没有主次关系，是平等的。\n</code></pre>\n<h2 id=\"等值连接\"><a class=\"markdownIt-Anchor\" href=\"#等值连接\">#</a> 等值连接</h2>\n<pre><code>\nSQL92语法：\n\nselect up.id uId, qpd.id qId from user_profile up, question_practice_detail qpd where up.device_id = qpd.device_id;\n\nSQL99语法：\n                                                  [inner] 单词可以省略\nselect up.id uId, qpd.id qId from user_profile up [inner] join question_practice_detail qpd on up.device_id = qpd.device_id;\n\n</code></pre>\n<p>SQL92 语法缺点：结构不清晰，表的连接条件和后期进一步的筛选条件，都放到了 where 后边。</p>\n<p>SQL99 语法有点：表连接的条件是独立的，连接之后如果还需要进一步筛选，可以继续添加 where 条件。</p>\n<h2 id=\"非等值连接\"><a class=\"markdownIt-Anchor\" href=\"#非等值连接\">#</a> 非等值连接</h2>\n<pre><code>条件不是一个等量关系，称为非等值连接\n</code></pre>\n<pre><code>\n案例：找出每个员工的薪资等级，要求显示员工名，薪资，薪资等级\n\n    select \n        e.ename, e.sal, s.grade \n    from\n        emp e\n    inner join \n        salgrade s\n    on \n        e.sal between s.losal and s.hisal;\n\n</code></pre>\n<h2 id=\"自连接\"><a class=\"markdownIt-Anchor\" href=\"#自连接\">#</a> 自连接</h2>\n<pre><code>一张表看作两张表\n</code></pre>\n<pre><code>\n案例：查询员工的上级领导，要求显示员工名和对应的领导名\n    select \n        a.ename as '员工名', b.ename as '领导名'\n    from\n        emp a \n    inner join\n        emp b\n    on\n        a.mgr = b.empno;\n\n\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/1.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/1.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql连接查询",
            "date_published": "2023-08-31T01:26:47.689Z",
            "content_html": "<h1 id=\"什么是连接查询\"><a class=\"markdownIt-Anchor\" href=\"#什么是连接查询\">#</a> 什么是连接查询</h1>\n<pre><code>从一张表中单独查询，称为单表查询。\nemp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。这种跨表查询，多张表联合起来查询数据，称为连接查询。\n</code></pre>\n<h1 id=\"连接查询分类\"><a class=\"markdownIt-Anchor\" href=\"#连接查询分类\">#</a> 连接查询分类</h1>\n<pre><code>根据语法的年代分类：\n    1.  SQL92：1992年出现的语法。\n    2.  SQL99：1999年出现的语法。\n\n根据表连接的方式分类：\n    1. 内连接\n       1. 等值连接\n       2. 非等值连接\n       3. 自连接\n    2. 外连接\n       1. 左外连接（左连接）\n       2. 右外连接（右连接）\n    3. 全连接\n</code></pre>\n<h1 id=\"笛卡尔积现象\"><a class=\"markdownIt-Anchor\" href=\"#笛卡尔积现象\">#</a> 笛卡尔积现象</h1>\n<pre><code>当两张表进行连接查询，没有任何条件限制的时候，最终的查询结果条数，是两张表条数的乘积，这种现象被称为：笛卡尔积现象。（一个数学现象）\n</code></pre>\n<pre><code>\n     select up.id uId, qd.id qId from user_profile up, question_detail qd;\n\n    +-----+-----+\n    | uId | qId |\n    +-----+-----+\n    |   7 |   1 |\n    |   6 |   1 |\n    |   5 |   1 |\n    |   4 |   1 |\n    |   3 |   1 |\n    |   2 |   1 |\n    |   1 |   1 |\n    |   7 |   2 |\n    ...\n     112 rows in set (0.00 sec)\n\n</code></pre>\n<h2 id=\"避免笛卡尔积现象\"><a class=\"markdownIt-Anchor\" href=\"#避免笛卡尔积现象\">#</a> 避免笛卡尔积现象</h2>\n<pre><code>增加表连接时的条件。\n</code></pre>\n<pre><code>\n    select up.id uId, qpd.id qId from user_profile up,  question_practice_detail qpd where up.device_id = qpd.device_id;\n\n    +-----+-----+\n    | uId | qId |\n    +-----+-----+\n    |   1 |   1 |\n    |   2 |   2 |\n    |   2 |   3 |\n    |   3 |   4 |\n    |   4 |   5 |\n    |   4 |   6 |\n    |   4 |   7 |\n    |   2 |   8 |\n    |   2 |   9 |\n    |   3 |  10 |\n    |   4 |  11 |\n    |   4 |  12 |\n    |   4 |  13 |\n    |   2 |  14 |\n    |   2 |  15 |\n    |   3 |  16 |\n    +-----+-----+\n    16 rows in set (0.00 sec)\n\n</code></pre>\n<pre><code>重点：最终查询结果是16条，但是在匹配中，匹配的次数没有减少，仍然是112次。只不过进行了筛除，匹配的次数并没有减少！！！\n</code></pre>\n<p>注意：通过观察笛卡尔积现场得出，表的连接次数越多（连接的表越多）程序执行效率越低，应避免表的连接次数过多。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/11.distinct%E5%8E%BB%E9%87%8D/distinct/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/11.distinct%E5%8E%BB%E9%87%8D/distinct/",
            "title": "Mysql中Distinct去重",
            "date_published": "2023-08-31T01:26:47.686Z",
            "content_html": "<h1 id=\"distinct-去重\"><a class=\"markdownIt-Anchor\" href=\"#distinct-去重\">#</a> Distinct 去重</h1>\n<p>把查询结果去除重复记录</p>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<ol>\n<li>distinct 只能出现在所有字段的最前方。<br>\nselect name, distinct job from emp;// 错误<br>\n select distinct name, job from emp;// 正确<br>\n这样表示对 name 和 job 组合起来进行去重。</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/10.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/10.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/",
            "title": "Mysql执行顺序",
            "date_published": "2023-08-31T01:26:47.683Z",
            "content_html": "<h1 id=\"执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#执行顺序\">#</a> 执行顺序</h1>\n<pre><code>select\n    ...\nfrom \n    ...\nwhere\n    ...\ngroup by\n    ...\nhaving\n    ...\norder by\n    ...\n\n执行顺序：\n1.  from\n2.  where\n3.  group by\n4.  having\n5.  select\n6.  order by\n</code></pre>\n<p>从某张表查询数据，<br>\n先经过 where 条件筛选出有价值的数据，<br>\n对这些数据进行分组，<br>\n分组后可以使用 having 继续筛选数据<br>\n select 查询出来<br>\n最后排序输出</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/1.Mysql%E6%A6%82%E8%BF%B0/%E6%A6%82%E8%BF%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/1.Mysql%E6%A6%82%E8%BF%B0/%E6%A6%82%E8%BF%B0/",
            "title": "Mysql概述",
            "date_published": "2023-08-31T01:26:47.680Z",
            "content_html": "<p>1. 什么是数据库？什么是数据库管理系统？什么是 SQL？他们之间的关系是什么？</p>\n<p>​\t数据库：</p>\n<p>​\t\t英文单词 DataBase，简称 DB。按照一定格式存储数据的一些文件的组合。</p>\n<p>​\t\t顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p>\n<p>​\t数据库管理系统：</p>\n<p>​\t\tDataBaseManagement，简称 DBMS。</p>\n<p>​\t\t数据库管理系统是专门用来管理数据库中的数据，数据库管理系统可以对数据库当中的数据进行增删改查。</p>\n<p>​\t常见的数据库管理系统：</p>\n<p>​\t\tMysql，Oracle，MS，SqlServer，DB2，sybase 等。。。。。。</p>\n<p>​\tSQL:</p>\n<p>​\t\t结构化查询语言。程序员需要学习 SQL 语句，程序员通过编写 SQL 语句，然后 DBMS 负责执行 SQL 语句，最终来完成数据库中数据的增删改查操作。</p>\n<p>​\t\tSQL 是一套标准，主要学习的就是 SQL 语句。这个 SQL 在 mysql 中可以使用，同时在 Oracle 中也可以使用，在 DB2 中也可以使用。</p>\n<p>​\t三者之间的关系：</p>\n<p>​\t\tDBMS–&gt; 执行–&gt;SQL–&gt; 操作–&gt;DB</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "数据库概念",
            "date_published": "2023-08-31T01:26:47.678Z",
            "content_html": "<h1 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<h2 id=\"关系型数据库是如何工作的\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库是如何工作的\">#</a> 关系型数据库是如何工作的</h2>\n<h3 id=\"从数据结构说起\"><a class=\"markdownIt-Anchor\" href=\"#从数据结构说起\">#</a> 从数据结构说起</h3>\n<h4 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h4>\n<p>​\t对于数据库而言，重要的不是数据量，而是当数据量增加时运算如何增加。</p>\n<p>​\t时间复杂度用来检验某个算法处理一定量的数据要花费多长时间，时间复杂度不会给出确切的运算次数，但是给出的是一种观念。 <img data-src=\"https://pdai.tech/images/db/sb-sql-learn-1.png\" alt=\"img\"></p>\n<h4 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h4>\n<h4 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\">#</a> 二叉搜索树</h4>\n<p>​\t二叉搜索树只需要 Log (N) 次运算，而如果你直接使用阵列则需要 N 次运算。</p>\n<h4 id=\"b树索引\"><a class=\"markdownIt-Anchor\" href=\"#b树索引\">#</a> B + 树索引</h4>\n<h4 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h4>\n<p>​\t为什么不使用阵列？</p>\n<ul>\n<li>如果有了更好的哈希函数，在哈希表里搜索的时间复杂度就是 O (1)。</li>\n<li>一个哈希表可以只装载一半到内存，剩下的哈希捅可以留在硬盘上。</li>\n<li>用列阵的话，你需要一个连续的内存空间，如果你加载一张大表，很难分配足够的连续的内存空间。</li>\n</ul>\n<h2 id=\"关系型数据库设计理论\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库设计理论\">#</a> 关系型数据库设计理论</h2>\n<h3 id=\"重要术语\"><a class=\"markdownIt-Anchor\" href=\"#重要术语\">#</a> 重要术语</h3>\n<ul>\n<li>属性：列的名字。</li>\n<li>依赖：列属性间存在的某种联系。</li>\n<li>元组：每一个行（每一条数据）。</li>\n<li>表：由多个属性，以及众多元组组成。</li>\n<li>模式：这里我们指逻辑结构。</li>\n<li>域：数据类型。</li>\n<li>键：由关系的一个或多个属性组成，任意两个键相同的元组，所有属性都相同。需要保证表示键的属性最少。一个关系可以存在好几种键，一般从这些候选键中，选出一个作为主键（primary key）。</li>\n<li>候选键：由关系的一个或多个属性组成，候选键都具备键的特性，都有资格成为主键。</li>\n<li>超键：包含键的属性集合，无需保证属性集的最小化。每个键也是超键。可以认为是超键的超集。</li>\n<li>外键：如果某一个关系 A 中的一个（组）属性是另一个关系 B 的键，则该（组）属性在 A 中成为外键。</li>\n<li>主属性：所有候选键所包含的属性都是主属性。</li>\n<li>投影：选取特定的列，如将关系学生信息投影为学号、姓名，即得到上表中仅包含学号、姓名的列。</li>\n<li>选择：按照一定条件选取特定元组，如选择上表中分数 &gt; 80 的元组。</li>\n<li>笛卡尔积（交叉连接）：第一个关系每一行分别与第二个关系的每一行组合。</li>\n<li>自然连接：第一个关系中每一行与第二个关系的每一行进行匹配，如果得到有交叉部分则合并，若无交叉部分则舍弃。</li>\n<li>连接：即加上约束条件的笛卡尔积，先得到笛卡尔积，然后根据约束条件删除不满足的元组。</li>\n<li>外连接：执行自然连接后，将舍弃的部分也加入，并且匹配失败处的属性用 Null 代替。</li>\n<li>除法运算：关系 R 除以关系 S 的结果为 T，则 T 包含所有在 R 但不在 S 的属性，且 T 的元组与 S 的元组的所有组合在 R 中。</li>\n</ul>\n<h2 id=\"数据库系统核心知识点\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统核心知识点\">#</a> 数据库系统核心知识点</h2>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<h4 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h4>\n<p>​\t事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以用 Rollback 进行回滚。 <img data-src=\"https://pdai.tech/images/pics/185b9c49-4c13-4241-a848-fbff85c03a64.png\" alt=\"image\"></p>\n<h4 id=\"acid\"><a class=\"markdownIt-Anchor\" href=\"#acid\">#</a> ACID</h4>\n<ul>\n<li><strong>原子性 (Atomicity)</strong>：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\n<li><strong>一致性 (Consistency)</strong>：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\n<li><strong>隔离性 (lsolation)</strong>：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li><strong>持久性 (Durability)</strong>：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统崩溃，事务执行的结果也不能丢失。可以通过数据库备份和恢复来实现，在系统发生崩溃时，使用备份数据库进行数据恢复。</li>\n</ul>\n<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系:</p>\n<ul>\n<li>只有满足一致性，事务的执行结果才是正确的。</li>\n<li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>\n<li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>\n<li>事务满足持久化是为了能应对数据库崩溃的情况。 <img data-src=\"https://pdai.tech/images/pics/a58e294a-615d-4ea0-9fbf-064a6daec4b2.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"autocommit\"><a class=\"markdownIt-Anchor\" href=\"#autocommit\">#</a> AUTOCOMMIT</h4>\n<p>​\tmysql 默认采用自动提交模式。如果不显示使用 start transaction 语句来开始一个事务，那么每个查询都会被当作一个事务自动提交。</p>\n<h3 id=\"并发一致性问题\"><a class=\"markdownIt-Anchor\" href=\"#并发一致性问题\">#</a> 并发一致性问题</h3>\n<p>​\t在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>\n<h4 id=\"丢失修改\"><a class=\"markdownIt-Anchor\" href=\"#丢失修改\">#</a> 丢失修改</h4>\n<p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>\n<h4 id=\"读脏数据\"><a class=\"markdownIt-Anchor\" href=\"#读脏数据\">#</a> 读脏数据</h4>\n<p>T1 修改了一个数据，T2 随后读取了这个数据。如果 T1 撤销了修改，那么 T2 读取的是脏数据。</p>\n<h4 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\">#</a> 不可重复读</h4>\n<p>T2 读取了一个数据，T1 对该数据做了修改。如果 T2 再次读取了这个数据，此时读取的数据和第一次读取的数据结果不同。</p>\n<h4 id=\"幻影读\"><a class=\"markdownIt-Anchor\" href=\"#幻影读\">#</a> 幻影读</h4>\n<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><strong>产生并发不一致问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己操作，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</strong></p>\n<h3 id=\"封锁\"><a class=\"markdownIt-Anchor\" href=\"#封锁\">#</a> 封锁</h3>\n<h4 id=\"封锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#封锁粒度\">#</a> 封锁粒度</h4>\n<p>Mysql 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的粒度越小，发生锁争用的可能性就越小，系统的并发程度就越高。</p>\n<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销越大。</p>\n<p><strong>在选择锁粒度时，需要在锁开销和并发程度之间做一个权衡</strong></p>\n<h4 id=\"封锁类型\"><a class=\"markdownIt-Anchor\" href=\"#封锁类型\">#</a> 封锁类型</h4>\n<pre><code>##### 读写锁\n</code></pre>\n<ul>\n<li>\n<p>排它锁（Exclusive）：简写为 X 锁，又称写锁。</p>\n</li>\n<li>\n<p>共享锁（Shared）：简写为 S 锁，又称读锁。</p>\n<p>有一下两个规定：</p>\n<ul>\n<li>​\t一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间，其他事务不能对 A 加任何锁。</li>\n<li>​    一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取，但不能进行更新操作。加锁期间其他事务只能对 A 加 S 锁，但不能加 X 锁。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"意向锁\"><a class=\"markdownIt-Anchor\" href=\"#意向锁\">#</a> 意向锁</h5>\n<p>​\t使用意向锁可以更容易地支持多粒度封锁。</p>\n<p>​\t存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其他事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>\n<p>​\t意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中某个数据行上加上 X 锁或 S 锁。有一下两个规定：</p>\n<ul>\n<li>\n<p>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁。</p>\n</li>\n<li>\n<p>一个事务在获取某个数据行对象的 X 锁之前，必须先获取表的 X 锁。</p>\n<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其他事务正在使用这个表或者表中的某一行的锁，因此事务 T 加锁失败。</p>\n<p>各种锁的兼容关系如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">IX</th>\n<th style=\"text-align:center\">S</th>\n<th style=\"text-align:center\">IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IX</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IS</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p>解释如下：</p>\n<ul>\n<li>\n<p>​\t任意 IS/IX 锁之间都是兼容的，因为他们只是表示想要对表加锁，而不是正真的加锁。</p>\n</li>\n<li>\n<p>​    S 锁只与 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其他事务可以已经获得对表或者对表中行的 S 锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#封锁协议\">#</a> 封锁协议</h3>\n<h4 id=\"三级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级锁协议\">#</a> 三级锁协议</h4>\n<h5 id=\"一级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#一级锁协议\">#</a> 一级锁协议</h5>\n<p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束猜释放锁。</p>\n<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>\n<h5 id=\"二级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#二级锁协议\">#</a> 二级锁协议</h5>\n<p>在一级的基础上，要求读取数据 A 时，必须加上 S 锁，读取完马上释放 S 锁。</p>\n<p>可以解决数据脏读问题。因为一个事务在对数据 A 进行修改，根据一级协议，必须加 X 锁，那么就不能再加 S 锁了，也就不会读入数据了。</p>\n<h5 id=\"三级封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级封锁协议\">#</a> 三级封锁协议</h5>\n<p>在二级的基础上，要求读取数据 A 时必须加上 S 锁，直到事务结束才释放 S 锁。</p>\n<p>可以解决不可重复度问题，因为读 A 时，其他事务不能加 X 锁，从而避免了在读数据期间数据发生改变。</p>\n<h4 id=\"两段锁协议\"><a class=\"markdownIt-Anchor\" href=\"#两段锁协议\">#</a> 两段锁协议</h4>\n<p>​\t加锁和解锁分两个阶段进行。</p>\n<p>​\t可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>​\t<strong>事务遵循两段锁协议是保证可串行化调度的充分条件</strong></p>\n<h3 id=\"mysql-隐式与显式锁定\"><a class=\"markdownIt-Anchor\" href=\"#mysql-隐式与显式锁定\">#</a> Mysql 隐式与显式锁定</h3>\n<p>Mysql 的 InnoDB 存储引擎采用的是两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定。</p>\n<pre><code class=\"language-mysql\">select ...... LOCK In SHARE MODE;\nselect ...... FOR UPDATE;\n</code></pre>\n<h3 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h3>\n<h4 id=\"未提交读read-uncommited\"><a class=\"markdownIt-Anchor\" href=\"#未提交读read-uncommited\">#</a> 未提交读（READ UNCOMMITED)</h4>\n<p>事务中的修改，即使没有提交，对其他事务也是可见的。</p>\n<h4 id=\"提交读read-commited\"><a class=\"markdownIt-Anchor\" href=\"#提交读read-commited\">#</a> 提交读（READ COMMITED)</h4>\n<p>一个事务只能读取已经提交的事务所作的修改。换个话说，一个事务所做的修改，在提交之前，对其他事务都是不可见的。</p>\n<h4 id=\"可重复读repeatable-read\"><a class=\"markdownIt-Anchor\" href=\"#可重复读repeatable-read\">#</a> 可重复读（REPEATABLE READ)</h4>\n<p>保证在同一个事务中多次读取同样的数据结果是一样的。</p>\n<h4 id=\"可串行化serializable\"><a class=\"markdownIt-Anchor\" href=\"#可串行化serializable\">#</a> 可串行化（SERIALIZABLE)</h4>\n<p>强制事务串行执行。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">未提交读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">提交读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可重复读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可串行化</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多版本并发控制\"><a class=\"markdownIt-Anchor\" href=\"#多版本并发控制\">#</a> 多版本并发控制</h3>\n<p>多版本并发控制 (Multi-Version Concurrency Control, MVCC) 是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>\n<h3 id=\"版本号\"><a class=\"markdownIt-Anchor\" href=\"#版本号\">#</a> 版本号</h3>\n<ul>\n<li>系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li>\n<li>事务版本号：事务开始时的系统版本号。</li>\n</ul>\n<h3 id=\"隐藏的列\"><a class=\"markdownIt-Anchor\" href=\"#隐藏的列\">#</a> 隐藏的列</h3>\n<p>MVCC 在每行记录后边都保存着两个隐藏的列，用来存储两个版本号。</p>\n<ul>\n<li>创建版本号：指示创建一个数据行的快照时的系统版本号。</li>\n<li>删除版本号如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示快照已经把欸删除了。</li>\n</ul>\n<h3 id=\"undo-日志\"><a class=\"markdownIt-Anchor\" href=\"#undo-日志\">#</a> Undo 日志</h3>\n<p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行 (Record) 的所有快照连接起来。</p>\n<p><img data-src=\"https://pdai.tech/images/pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" alt=\"image\"></p>\n<h3 id=\"实现过程\"><a class=\"markdownIt-Anchor\" href=\"#实现过程\">#</a> 实现过程</h3>\n<p>以下实现过程针对可重复读隔离级别。</p>\n<p>当开始新一个事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号，理解这一点很关键。</p>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> <a href=\"#_1-select\">#</a> 1. SELECT</h4>\n<p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p>\n<p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于 T 的版本号，因为如果大于或者等于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> <a href=\"#_2-insert\">#</a> 2. INSERT</h4>\n<p>将当前系统版本号作为数据行快照的创建版本号。</p>\n<h4 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> <a href=\"#_3-delete\">#</a> 3. DELETE</h4>\n<p>将当前系统版本号作为数据行快照的删除版本号。</p>\n<h4 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\">#</a> <a href=\"#_4-update\">#</a> 4. UPDATE</h4>\n<p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p>\n<h3 id=\"-5\"><a class=\"markdownIt-Anchor\" href=\"#-5\">#</a> <a href=\"#%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 快照读与当前读</h3>\n<h4 id=\"-6\"><a class=\"markdownIt-Anchor\" href=\"#-6\">#</a> <a href=\"#_1-%E5%BF%AB%E7%85%A7%E8%AF%BB\">#</a> 1. 快照读</h4>\n<p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-7\"><a class=\"markdownIt-Anchor\" href=\"#-7\">#</a> <a href=\"#_2-%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 2. 当前读</h4>\n<p>读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"六-next-key-locks\"><a class=\"markdownIt-Anchor\" href=\"#六-next-key-locks\">#</a> 六、Next-Key Locks</h3>\n<p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p>\n<p>MVCC 不能解决幻读的问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读 (REPEATABLE READ) 隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p>\n<h4 id=\"-8\"><a class=\"markdownIt-Anchor\" href=\"#-8\">#</a> <a href=\"#record-locks\">#</a> Record Locks</h4>\n<p>锁定一个记录上的索引，而不是记录本身。</p>\n<p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p>\n<h4 id=\"-9\"><a class=\"markdownIt-Anchor\" href=\"#-9\">#</a> <a href=\"#gap-locks\">#</a> Gap Locks</h4>\n<p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> c <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> c <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">10</span> <span class=\"token operator\">and</span> <span class=\"token number\">20</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-10\"><a class=\"markdownIt-Anchor\" href=\"#-10\">#</a> <a href=\"#next-key-locks\">#</a> Next-Key Locks</h4>\n<p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。</p>\n",
            "tags": [
                "Sql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/9.%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/9.%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql分组查询",
            "date_published": "2023-08-31T01:26:47.675Z",
            "content_html": "<h2 id=\"分组查询\"><a class=\"markdownIt-Anchor\" href=\"#分组查询\">#</a> 分组查询</h2>\n<h3 id=\"sql语句各个关键字的执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#sql语句各个关键字的执行顺序\">#</a> SQL 语句各个关键字的执行顺序</h3>\n<pre><code>select\n    ...         5\nfrom\n    ...         1\nwhere\n    ...         2\ngroup by\n    ...         3\nhaving\n    ...         4\norder by\n    ...         6\n</code></pre>\n<p>执行顺序：<br>\n1. from<br>\n2. where<br>\n3. group by<br>\n4. having<br>\n5. select<br>\n6. order by</p>\n<h3 id=\"重点结论\"><a class=\"markdownIt-Anchor\" href=\"#重点结论\">#</a> 重点结论</h3>\n<pre><code>在一条select语句当中，如果有group by语句的话，select后面只能跟分组函数，以及参加分组的字段。其他的一律不能跟。（Mysql可以执行，但没有意义，Oracle数据库当中会报错）\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/8.%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E8%A1%8C%E6%95%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/8.%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E8%A1%8C%E6%95%B0/",
            "title": "Mysql多行处理行数",
            "date_published": "2023-08-31T01:26:47.673Z",
            "content_html": "<h2 id=\"多行处理行数分组函数\"><a class=\"markdownIt-Anchor\" href=\"#多行处理行数分组函数\">#</a> 多行处理行数（分组函数）</h2>\n<p>特点：输入多行、最终输出一行</p>\n<h4 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h4>\n<pre><code>分组函数在使用时必须先进行分组，然后才能使用。\n如果你没有对数据进行分组，整张表默认为一组\n</code></pre>\n<h3 id=\"count-计数\"><a class=\"markdownIt-Anchor\" href=\"#count-计数\">#</a> count 计数</h3>\n<p>计算员工数量总和<br>\n select count (name) from emp;</p>\n<h3 id=\"sum-求和\"><a class=\"markdownIt-Anchor\" href=\"#sum-求和\">#</a> sum 求和</h3>\n<p>计算工资合<br>\n select sum (sal) from emp;</p>\n<h3 id=\"avg-平均值\"><a class=\"markdownIt-Anchor\" href=\"#avg-平均值\">#</a> avg 平均值</h3>\n<p>计算平均工资<br>\n select avg (sal) from emp;</p>\n<h3 id=\"max-最大值\"><a class=\"markdownIt-Anchor\" href=\"#max-最大值\">#</a> max 最大值</h3>\n<p>找出最高工资<br>\n select max (sal) from emp;</p>\n<h3 id=\"min-最小值\"><a class=\"markdownIt-Anchor\" href=\"#min-最小值\">#</a> min 最小值</h3>\n<p>找出最低工资<br>\n select min (sal) from emp;</p>\n<h2 id=\"分组函数使用时需要注意的地方\"><a class=\"markdownIt-Anchor\" href=\"#分组函数使用时需要注意的地方\">#</a> 分组函数使用时，需要注意的地方</h2>\n<pre><code>1. 分组函数自动忽略 NULL, 不需要提前处理。\n 例如：求所有员工津贴/补助的总和。\n    select sum(comm) from emp;//不需要加where comm is not null条件。\n2. 分组函数count(*) 和 count(具体字段)的区别。\n   1. count(具体字段)：表示统计该字段下所有不为 NULL 的元素的总数。\n   2. count(*)：统计表中所有行数。\n3. 分组函数不能直接用在where子句中。\n 例如：找出比最低工资高的员工信息。\n select ename, sal from emp where sal &gt; min(sal);// 错误SQL语句\n4. 所有分组函数可以组合起来一起使用。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/7.%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/7.%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/",
            "title": "Mysql单行处理函数",
            "date_published": "2023-08-31T01:26:47.670Z",
            "content_html": "<p>单行处理函数也叫做数据处理函数</p>\n<p>单行处理函数的特点：</p>\n<p>​\t一个输入对应一个输出</p>\n<p>和单行处理函数相对的是：</p>\n<p>​\t多行处理函数（特点：多个输入，对应一个输出）</p>\n<p>常见的单行处理函数</p>\n<ol>\n<li>\n<p>lower 转换小写</p>\n<p>select  lower(name)  from city;</p>\n</li>\n<li>\n<p>upper 转换大写</p>\n<p>select  upper(name)  from city;</p>\n</li>\n<li>\n<p>substr 取子串</p>\n<p>substr (被截取的字符串，起始下标，截取的长度)// 注意起始下标从 1 开始，没有 0</p>\n<p>select  substr(name, 1, length(name))  from city;</p>\n</li>\n<li>\n<p>concat 进行字符串拼接</p>\n<p>select concat(name, countrycode) from city;</p>\n</li>\n<li>\n<p>length 取长度</p>\n<p>select length(name) from city;</p>\n</li>\n<li>\n<p>trim 去除空格</p>\n<p>select * from city where name = trim (’   King   ');// 将查询条件中的前后空格去除</p>\n</li>\n<li>\n<p>round 四舍五入</p>\n<p>select 字段 from 表名；</p>\n<p>select name from city;</p>\n<p>select ‘abc’ from city;//select 后面直接跟 “字面量”/“字面值”</p>\n<p><strong>结论：select 后面可以跟某个表的字段名（可以等同看作变量名），也可以跟字面量 / 字面值（数据）</strong></p>\n<p>例如：</p>\n<p>select round (1276.567, 2) from city;// 保留二位小数 1276.57</p>\n<p>select round (1276.567, 1) from city;// 保留一位小数 1276.6</p>\n<p>select round (1276.567, 0) from city;// 保留整数 1277</p>\n<p>select round (1276.567, -1) from city;// 保留到十位 1270</p>\n<p>select round (1276.567, -2) from city;// 保留到百位 1280</p>\n</li>\n<li>\n<p>rand 生成随机数</p>\n<p>select rand() from city;</p>\n<p>例如：生成 100 以内的随机数</p>\n<p>select round(rand() * 100, 0) from city;</p>\n</li>\n<li>\n<p>ifnull 可以将 null 转换成一个具体值。</p>\n<p>ifnull 是空处理函数。专门处理空的。（因为在所有数据库中，只要有 null 参与的数学运算，最终结果都为 null）</p>\n<p>ifnull 函数语法：ifnull (数据，被当作那个值)</p>\n<p>如果 “数据” 为 null 的时候，把这个数据当作那个值</p>\n</li>\n<li>\n<p>case when … then … when … then … else … end</p>\n<p>例如：当员工的岗位为 MANAGER 的时候，工资上调 %10，当工作岗位是 SALESMAN 的时候，工资上调 %50，其他正常。</p>\n<p>（注意：不修改数据库，只是将查询结果显示为工资上调）</p>\n<p>select</p>\n<p>ename,</p>\n<p>job,</p>\n<p>sal as oldsal,</p>\n<p>(case when ‘MANAGER’ then sal*1.1 when ‘SALESMAN’ then sal**1.5 else sal end) as newsal</p>\n<p>from emp;</p>\n</li>\n<li>\n<p>format 数字格式化<br>\n format (数字，‘格式’)</p>\n<p>select ename, (sal, ‘$999,999’) from emp;</p>\n</li>\n<li>\n<p>str_to_date</p>\n<p>字符串转换为 date 类型</p>\n<p>str_to_date (‘日期字符串’, ‘日期格式’)</p>\n<p>Mysql 中日期格式：<br>\n% Y 年<br>\n % m 月<br>\n % d 日<br>\n % h 时<br>\n % i 分<br>\n % s 秒</p>\n<p>Java 中日期格式：<br>\nyyyy-MM-dd HH:mm:ss SSS</p>\n</li>\n<li>\n<p>date_format</p>\n</li>\n</ol>\n<p>从 date 类型转换为具有一定格式的字符串类型</p>\n<p>date_format (日期值，‘日期格式’)</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘10:13:20 11-11-1999’, ‘%h:%i:%s %d-%m-%Y’));</p>\n<p>insert into test values (1, ‘zhangsan’, str_to_date (‘11-1999’, ‘% m-% Y’));//date 类型为年月日，插入的值不完整，所以报错</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘11-1999’, ‘11-%m-%Y’));</p>\n<p>insert into test values(1, ‘zhangsan’, str_to_date(‘10-11-1999’, ‘10-%m-%Y’));</p>\n<p>insert into test values (1, ‘zhangsan’, str_to_date (‘10-11-1999’, ‘% d-% m-% Y’));// 正确</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/25.%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/25.%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/",
            "title": "存储过程",
            "date_published": "2023-08-31T01:26:47.654Z",
            "content_html": "<h1 id=\"mysql存储过程\"><a class=\"markdownIt-Anchor\" href=\"#mysql存储过程\">#</a> Mysql 存储过程</h1>\n<p>存储过程是在数据库中定义一些 SQL 语句的集合，可以直接去调用这些存储过程来执行已经定义好的 SQL 语句。</p>\n<p>触发器和存储过程相似，都是嵌入到 MySql 中的一段儿程序。触发器是由事件来触发某个操作。当数据库执行这些事件时，就会激活触发器来执行相应的操作。</p>\n<h2 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\">#</a> 存储过程</h2>\n<p>数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。例如，为了确认学生能否毕业，需要同时查询学生档案、成绩表和从何表，此时就需要使用多条 SQL 语句来针对这几个数据表完成处理要求。存储过程就是这样一组为了完成特定功能的 SQL 语句的集合。</p>\n<p>使用存储过程的目的是将经常或复杂的工作预先使用 SQL 语句写好，并用一个指定的名称存储起来，这个过程经编译和优化由存储在数据库服务器中，因此成为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需要调用 “CALL 存储过程名字” 即可自动完成。</p>\n<p>常用操作数据库的 SQL 语句在执行的时候需要先编译，然后执行。存储过程则采用另一种方式来执行 SQL 语句。</p>\n<p>一个存储过程即一个可编程的函数，它可以在数据库中创建并保存，一般由 SQL 语句和一些特殊控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p>\n<pre><code>MySql5.0版本以前并不支持存储过程。\n</code></pre>\n<p>存储过程时数据库中的一个重要功能，存储过程可以用来转换数据、数据迁移、制作报表，它类似于编程语言，一次执行成功，就可以被调用，完成指定的功能操作。</p>\n<p>使用存储过程不仅可以提高数据的访问效率，同时也可以提高数据库使用的安全性。</p>\n<p>对于调用者来说，存储过程封装了 SQL 语句，调用者无需考虑逻辑功能的具体实现过程。只是简单调用即可，它可以被 Java 和 C# 等编程语言调用。</p>\n<h2 id=\"创建存储过程\"><a class=\"markdownIt-Anchor\" href=\"#创建存储过程\">#</a> 创建存储过程</h2>\n<p>创建存储过程使用 create procedure 语句，语法格式如下</p>\n<pre><code>create procedure &lt;过程名&gt; ([过程参数[,...]]) &lt;过程体&gt;\n</code></pre>\n<p>其中，过程参数是存储过程的参数列表。MySQL 存储过程支持三种类型的参数，即输入参数，输出参数和输入 / 输出参数，分别用 IN、OUT 和 INOUT 三个关键字标识。其中输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输出 / 输出参数既可以充当输入参数也可以充当输出参数。格式如下</p>\n<pre><code>[ IN | OUT | INOUT ] &lt;参出名&gt; &lt;类型&gt;\n</code></pre>\n<p>过程体是存储过程的主体部分，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字 <strong>BEGIN</strong> 开始，以关键字 <strong>END</strong> 结束。若存储过程体中只有一条 SQL 语句，则可以省略 BEGIN-END 标志。</p>\n<p>在 Mysql 中，服务器处理 SQL 语句默认是以分号作为语句结束标志的。然而，在创建存储过程时，存储过程体可能包含有多条 SQL 语句，这些 SQL 语句如果仍以分号作为语句结束符号，那么 MySQL 服务器在处理存储过程时，会以遇到的第一条 SQL 语句结尾处的分号作为整个程序的额结束符，而不再去处理存储过程体后面的 SQL 语句，这样显然不行。为了解决以上问题，通常使用 <strong>DELIMITER</strong> 命令将结束命令修改为其他字符。语法格式如下。</p>\n<pre><code>DELIMITER $$\n</code></pre>\n<p>语法说明如下：<br>\n$$ 是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个 “？” 或两个 “￥“ 等。<br>\n当使用 DELIMITER 命令时，应该避免使用反斜杠 &quot;&quot; 字符，因为它是 MySQL 的转义字符。</p>\n<p>在 MySQL 命令行客户端使用：</p>\n<pre><code>mysql&gt; DELIMITER ??\n</code></pre>\n<p>执行该命令后，任何命令、语句或程序的结束标志就换为两个问号 &quot;??&quot; 了。</p>\n<p>注意：DELIMITER 和分号 “;” 之间一定要有一个空格（使用分号 &quot;;&quot; 作为 MySQL 语句结束符）。</p>\n<p>在创建存储过程时，必须具有 create routine 权限。</p>\n<p>例如：<br>\nmysql&gt; DELIMITER //<br>\nmysql&gt; CREATE PROCEDURE GetScoreByStu<br>\n-&gt; (IN name VARCHAR(30))<br>\n-&gt; BEGIN<br>\n-&gt; SELECT student_score FROM tb_students_score<br>\n-&gt; WHERE student_name=name;<br>\n-&gt; END //<br>\nQuery OK, 0 rows affected (0.01 sec)</p>\n<h2 id=\"12-查看存储过程\"><a class=\"markdownIt-Anchor\" href=\"#12-查看存储过程\">#</a> 1.2 查看存储过程</h2>\n<pre><code>SHOW PROCEDURE STATUS LIKE 存储过程名;\n</code></pre>\n<p>也可以查看存储过程的定义，语法格式如下</p>\n<pre><code>SHOW CREATE PROCEDURE 存储过程名\n</code></pre>\n<h2 id=\"13修改存储过程\"><a class=\"markdownIt-Anchor\" href=\"#13修改存储过程\">#</a> 1.3 修改存储过程</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/24.%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/24.%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/",
            "title": "主从同步机制",
            "date_published": "2023-08-31T01:26:47.651Z",
            "content_html": "<h1 id=\"主从同步机制\"><a class=\"markdownIt-Anchor\" href=\"#主从同步机制\">#</a> 主从同步机制</h1>\n<p>作用</p>\n<ul>\n<li>可以用作一种备份机制，相当于热备份</li>\n<li>可以用做读写分离，均衡数据库负载</li>\n</ul>\n<p>概述</p>\n<p>MySQL 主从复制也能够称为 MySQL 主从同步，它是构建数据库高可用集群架构的基础。它经过将一台主机的数据复制到其余一台或多台主机上，并从新应用 relay log 中的 SQL 语句来实现复制功能。MySQL 支持单向、双向、链式级联、异步复制，5.5 版本以后加入的半同步复制，5.6 版本以后的 GTID 复制，MySQL5.7 的多源复制、并行复制、loss-less 复制。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/23.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/23.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/",
            "title": "数据库范式",
            "date_published": "2023-08-31T01:26:47.648Z",
            "content_html": "<h1 id=\"数据库设计三范式\"><a class=\"markdownIt-Anchor\" href=\"#数据库设计三范式\">#</a> 数据库设计三范式</h1>\n<p>什么是数据库设计范式？<br>\n数据库表的设计依据。</p>\n<h2 id=\"第一范式\"><a class=\"markdownIt-Anchor\" href=\"#第一范式\">#</a> 第一范式</h2>\n<pre><code>要求任何一张表必须有主键，每一个字段原子性不可再分\n\n案例：\n学生编号    学生姓名    联系方式\n1001        张三        zs@gmail.com,135999999\n1002        李四        li@gmail.com,136999999\n1003        王五        ww@gmail.com,137999999\n\n以上表设计不满足第一范式--没有主键，联系方式可拆分\n\n修改：\n学生编号(pk)    学生姓名        邮箱                联系电话\n1001            张三        zs@gmail.com       135999999\n1002            李四        li@gmail.com       136999999\n1003            王五        ww@gmail.com       137999999\n</code></pre>\n<h2 id=\"第二范式\"><a class=\"markdownIt-Anchor\" href=\"#第二范式\">#</a> 第二范式</h2>\n<pre><code>建立在第一范式基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖\n\n案例：\n学生编号        学生姓名        教师编号        教师姓名\n1001            张三            001             王老师\n1002            李四            002             赵老师\n1002            李四            002             王老师\n1001            张三            001             赵老师\n\n以上表设计不满足第一范式--没有主键\n\n修改：\n学生编号    +    教师编号（pk）        学生姓名          教师姓名\n1001            001             张三               王老师\n1002            002             李四               赵老师\n1002            002             李四               王老师\n1001            001             张三               赵老师\n\n学生编号和教师编号连个字段做复合主键\n以上修改完之后表不满足第二范式--非主键字段，产生部分依赖(学生和教师关系产生多对多关系)\n    导致：数据冗余，空间浪费\n\n修改：\n学生编号    学生姓名\n1001        张三\n1002        李四\n\n教师编号    教师姓名\n001         王老师\n002         赵老师\n\n学生教师联合表\nid(pk)      学生编号(fk)   教师编号(fk)\n1            1001          001\n2            1002          001\n3            1001          002\n4            1002          002\n</code></pre>\n<h2 id=\"第三范式\"><a class=\"markdownIt-Anchor\" href=\"#第三范式\">#</a> 第三范式</h2>\n<pre><code>建立在第二范式基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖\n\n案例：\n学生编号（PK）        学生姓名        班级编号         班级名称\n1001                   张三            01             一班\n1002                   李四            02             二班\n1003                   王五            03             三班\n1004                   赵六            03             四班\n\n以上表的设计满足第一范式--有主键\n以上表的设计满足第二范式--主键是单一主键，不是复合主键，没有产生部分依赖（表中学生和班级是一对多关系）\n\n以上表不满足第三范式--传递性依赖（班级名称依赖班级编号，产生了传递依赖，不符合第三范式，产生了数据冗余）\n\n修改：\n班级表\n班级编号（pk）      班级名称\n01                  一班\n02                  二班\n...\n\n学生表\n学生编号（pk）      学生姓名        班级编号\n1001                张三            01\n...\n</code></pre>\n<p>作用：避免数据冗余，空间的浪费</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<pre><code>一对多：\n    一对多，两张表，多的表加外键\n\n多对多：\n    多对多，三张表，关系表两个外键\n\n一对一：\n    在一对一中，可能存在表字段太多，太庞大，需要拆分表\n    \n    案例：\n    id      login_name      login_pwd       real_name       email\n    1           admin       admin           张三            zs@gmail.com\n\n\n    修改：\n    登录信息表：\n    id      login_name      login_pwd\n    1       admin           admin\n\n    用户详细信息表：\n    id      real_name       email           login_id(fk+unique)\n    100        admin        zs@gmail.com        1\n\n    在一对一拆分表时，可以使用 外键+唯一性约束 设计表\n</code></pre>\n<h2 id=\"重点\"><a class=\"markdownIt-Anchor\" href=\"#重点\">#</a> 重点</h2>\n<pre><code>数据库设计三范式是理论上的。\n实践和理论有时候有偏差。\n最终的目的都是为了满足客户的需求，有的时候会拿数据冗余换速度。因为Sql中，表和表之间的连接次数过多，效率越低（笛卡尔积）\n有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/22.DBA%E5%91%BD%E4%BB%A4/DBA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/22.DBA%E5%91%BD%E4%BB%A4/DBA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",
            "title": "DBA命令",
            "date_published": "2023-08-31T01:26:47.645Z",
            "content_html": "<h1 id=\"dba命令\"><a class=\"markdownIt-Anchor\" href=\"#dba命令\">#</a> DBA 命令</h1>\n<p><strong>必须超级管理员操作</strong></p>\n<h2 id=\"新建用户\"><a class=\"markdownIt-Anchor\" href=\"#新建用户\">#</a> 新建用户</h2>\n<pre><code>create USER username IDENTIFIED by 'password';\n\ncreate USER 'username'@'host' IDENTIFIED by 'password';\n</code></pre>\n<p>username：创建的用户名。</p>\n<p>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %</p>\n<p>password：该用户的登陆密码。密码可以为空，如果为空则该用户可以不需要密码登陆服务器。</p>\n<h2 id=\"授权\"><a class=\"markdownIt-Anchor\" href=\"#授权\">#</a> 授权</h2>\n<pre><code>GRANT SELECT,INSERT on *.* to 'guest'@'%';\n</code></pre>\n<p><em>.</em>：表示表示所有库的所有表</p>\n<pre><code>grant all privileges on 数据库 to '用户名'@'IP地址';\n</code></pre>\n<h2 id=\"回收权限\"><a class=\"markdownIt-Anchor\" href=\"#回收权限\">#</a> 回收权限</h2>\n<pre><code>revoke all privileges from 数据库 to '用户名'@'IP地址';\n</code></pre>\n<p>all privileges 指除了 grant 之外的所有权限，也可以自己设置权限</p>\n<p>例如：grant insert on world.* to ‘用户名’@‘IP 地址’;(只能对 world 数据库做插入操作，world.* 表示对 world 中所有表）</p>\n<h2 id=\"导出导入\"><a class=\"markdownIt-Anchor\" href=\"#导出导入\">#</a> 导出导入</h2>\n<pre><code>导出\n    在windows的dos命令窗口中：\n    mysqldump nk&gt;D:\\nk.sql -uroot -proot\n\n    导出指定的表:导出nk数据库中 student表\n    mysqldump nk student&gt;D:\\nk.sql -uroot -proot\n\n\n导入\n    登录到mysql中，创建数据库 create database nk;\n    然后导入sql文件\n    source D:\\nk.sql\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/21.%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/21.%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/",
            "title": "视图",
            "date_published": "2023-08-31T01:26:47.642Z",
            "content_html": "<h1 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h1>\n<p>什么是视图？<br>\nview：站在不同的角度，去看待同一份数据</p>\n<h2 id=\"创建视图\"><a class=\"markdownIt-Anchor\" href=\"#创建视图\">#</a> 创建视图</h2>\n<pre><code>create view 视图名 as DQL语句;\n\ncreate view emp_view as select * from emp;\n</code></pre>\n<p>注意：只有 DQL 语句才能以 view 的形式创建</p>\n<h2 id=\"删除视图\"><a class=\"markdownIt-Anchor\" href=\"#删除视图\">#</a> 删除视图</h2>\n<pre><code>drop view emp_view;\n</code></pre>\n<h2 id=\"视图作用可以干什么方便-简化开发-利于维护\"><a class=\"markdownIt-Anchor\" href=\"#视图作用可以干什么方便-简化开发-利于维护\">#</a> 视图作用（可以干什么）–方便、简化开发、利于维护</h2>\n<pre><code>可以面向视图对象进行增删改查，对视图对象的增删改查，会导致原表被操作\n\n特点：对视图的操作，会影响到原表数据\n\nselect * from dept2_view;\n\ninsert into dept2_view(deptno, dname, loc) vlaues(60, 'SALES', 'BJ');// （insert、delete、update）操作会影响到原表\n</code></pre>\n<p>视图对象在实际开发中，到底有什么作用？<br>\n假设有一条 SQL 语句，需要在不同位置反复使用，每次使用需要重新编写，可以把这条复杂的 SQL 语句以视图对象的形式创建出来<br>\n在需要编写这条 SQL 语句的位置直接使用视图对象。可以简化开发，并且利于后期维护。因为只需要修改一个位置就行了，只需要修改视图对象所映射的 SQL 语句</p>\n<p>使用视图开发的时候，可以像使用 table 一样，可以对视图进行增删改查等操作。<br>\n视图对象是存储在硬盘上的，不会消失</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",
            "title": "索引失效",
            "date_published": "2023-08-31T01:26:47.639Z",
            "content_html": "<h1 id=\"索引失效\"><a class=\"markdownIt-Anchor\" href=\"#索引失效\">#</a> 索引失效</h1>\n<p>什么时候索引会失效？</p>\n<pre><code>第一种情况：\n select * from t_user where name like '%z';\n\n 因为模糊匹配中以 '%' 开头了，索引失效（存在索引，但不走索引）\n\n\n第二种情况：\n 使用or的时候会失效，如果使用or，那么要求or两边字段条件都要有索引，才会走索引。如果其中一边有一个字段没有索引，那么另一个字段上的索引也会失效\n\n\n第三种情况：\n 使用复合索引的时候，没有使用左侧的列查找，索引失效( 最左原则 )\n create index emp_job_sal_index on emp(job, sal);\n\n explain select * from emp where job = 'MANAGER';// 走索引\n explain select * from emp where sal = 1000;// 索引失效\n\n\n第四种情况：\n 在where当中，索引参与了数学运算，索引失效\n\n create index emp_sal_index on emp(sal);\n\n explain select * from emp where sal = 800;// 走索引\n explain select * from emp where sal = 800 + 100;// 走索引\n\n explain select * from emp where sal + 100 = 800;// 索引失效\n\n\n第五种情况：\n 在where当中，索引列使用了函数，索引失效\n\n create index emp_ename_index on emp(ename);\n\n explain select * from emp where ename = 'SIMTH';// 走索引\n\n explain select * from emp where lower(ename) = 'simth';// 索引失效\n\n\n第六种情况：....\n第七种情况：....\n...\n\n\n\n索引是数据库优化的重要手段，优化的时候，优先考虑的因素就是索引。\n</code></pre>\n<p>索引分类：<br>\n单一索引：<br>\n复合索引：<br>\n主键索引：<br>\n唯一性索引：<br>\n…</p>\n<p>注意：唯一性比较弱的字段上添加索引用处不大。（可能存在大量重复数据，这个时候索引起不到什么作用，越唯一，效率越高）</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/20.%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95/",
            "title": "索引",
            "date_published": "2023-08-31T01:26:47.638Z",
            "content_html": "<h1 id=\"索引\"><a class=\"markdownIt-Anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>什么是索引？<br>\n索引在数据库表的字段上添加的，是为了提高检索（查询）效率存在的一种机制</p>\n<pre><code>一张表的一个字段可以添加一个索引，多个字段可以联合起来添加索引\n\n索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制\n</code></pre>\n<p>举例：<br>\n查字典：<br>\n1. 一页一页查找，直到找到为止。这种查找属于全表扫描，效率低</p>\n<pre><code>    3. 通过目录（索引），去定位一个大概的位置，然后直接定位到该位置，做局域性扫描，缩小扫描的范围，快速的查找。这种方式属于索引检索，效率高\n\nMysql中查询的两种方式：\n    1. 全表扫描\n    2. 根据索引检索\n</code></pre>\n<p>注意：<br>\n在 Mysql 数据库当中索引也是需要排序的，并且这个索引的排序和 TreeSet 数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！<br>\n在 Mysq 中索引是一个 B-Tree 数据结构。</p>\n<pre><code>遵循左小右大原则存放，采用中序遍历方式遍历取数据\n</code></pre>\n<p><strong>在任何数据库当中，主键都会自动添加索引对象</strong></p>\n<p><strong>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号</strong></p>\n<p><strong>在 Mysql 中，一个字段上如果右 unique 约束的话，也会自动创建索引对象</strong></p>\n<p><strong>在 Mysql 当中，索引是一个单独的对象，不同的存储引擎以不同形式存在。</strong><br>\n1. 在 MyISAM 存储引擎中，索引存储在一个.MYI 文件中<br>\n 2. 在 InnoDB 存储引擎当中，索引存储在一个叫 tablespace 当中。<br>\n3. 在 Memory 存储引擎当中，被存储在内存当中<br>\n不管索引存储在哪里，索引在 Mysql 中都是一个树的形式存在。（自平衡二叉树：B-Tree）</p>\n<h2 id=\"在mysql中主键以及unique字段上都会自动添加索引\"><a class=\"markdownIt-Anchor\" href=\"#在mysql中主键以及unique字段上都会自动添加索引\">#</a> 在 Mysql 中，主键以及 unique 字段上都会自动添加索引</h2>\n<p>什么条件下，需要考虑给字段添加索引？<br>\n1. 数据量庞大（需要测试）<br>\n2. 该字段经常出现在 where 查询条件中<br>\n 3. 该字段很少的 DML 操作（因为 DML 之后，索引经常需要重新排序）<br>\n注意：<br>\n建议不要随意添加索引，因为索引也是需要维护的，太多反而会降低系统性能<br>\n建议通过主键查询，建议通过 unique 约束字段进行查询，效率是比较高的</p>\n<h2 id=\"创建和删除索引\"><a class=\"markdownIt-Anchor\" href=\"#创建和删除索引\">#</a> 创建和删除索引</h2>\n<h3 id=\"创建索引\"><a class=\"markdownIt-Anchor\" href=\"#创建索引\">#</a> 创建索引</h3>\n<pre><code>create index 索引名 on 表名(要添加索引的字段名);\n\ncreate index emp_ename_index on emp(ename);\n</code></pre>\n<h3 id=\"删除索引\"><a class=\"markdownIt-Anchor\" href=\"#删除索引\">#</a> 删除索引</h3>\n<pre><code>drop index 索引名 on 表名;\n\ndrop index emp_ename_index on emp;\n\n\n在Mysql中查看一个SQL语句是否使用了索引进行检索\nexplain select * from t_user where name = 'zhangsan6';\n</code></pre>\n<p>举例：<br>\n## 查看 sql 语句执行详情<br>\n mysql&gt; explain select * from t_user where name = ‘zhangsan6’;<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n| id | select_type | table  | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n|  1 | SIMPLE      | t_user | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   12 |    10.00 | Using where |<br>\n±—±------------±-------±-----------±-----±--------------±-----±--------±-----±-----±---------±------------+<br>\n1 row in set, 1 warning (0.00 sec)</p>\n<pre><code>## 为name字段创建索引\ncreate index user_name_index on t_user(name);\n\n## 在索引创建后，重新执行sql语句，查看sql执行情况\nmysql&gt; explain select * from t_user where name = 'zhangsan6';\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n| id | select_type | table  | partitions | type | possible_keys   | key             | key_len | ref   | rows | filtered | Extra       |\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n|  1 | SIMPLE      | t_user | NULL       | ref  | user_name_index | user_name_index | 1023    | const |    1 |   100.00 | Using index |\n+----+-------------+--------+------------+------+-----------------+-----------------+---------+-------+------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/",
            "title": "事务隔离",
            "date_published": "2023-08-31T01:26:47.632Z",
            "content_html": "<h1 id=\"事务隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别\">#</a> 事务隔离级别</h1>\n<h2 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h2>\n<h3 id=\"读未提交read-uncommitted\"><a class=\"markdownIt-Anchor\" href=\"#读未提交read-uncommitted\">#</a> 读未提交：read uncommitted</h3>\n<pre><code>概念：\n    事务A可以读取到事务B未提交的数据\n\n存在脏读现象（Dirty Rread）：称读到脏数据\n</code></pre>\n<h3 id=\"读已提交readcommitted\"><a class=\"markdownIt-Anchor\" href=\"#读已提交readcommitted\">#</a> 读已提交：readcommitted</h3>\n<pre><code>概念：\n    事务A只能读取到事务B提交之后的数据\n这种隔离级别解决了脏读现象\n\n存在‘不可重复读取数据’问题：在事务开启后，每次读取到的数据可能不一致。比如A开始事务循环读取数据的过程中，B事务不断修改数据并提交，导致A事务在后续的数据读取过程中，数据产生不一致的现象\n\n这种隔离级别是比较真实的数据，每一次读到的数据绝对真实\n注意：Oracle数据库默认的隔离级别是： read committed\n</code></pre>\n<h3 id=\"可重复读repeatable-read\"><a class=\"markdownIt-Anchor\" href=\"#可重复读repeatable-read\">#</a> 可重复读：repeatable read</h3>\n<pre><code>概念：\n    事务A开启后，不管多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据修改，并且提交了。事务A读取到的数据还是没有发生改变，这就是可重复读\n解决了不可重复读的现象\n\n存在幻读现象：每一次读取到的数据都是幻象，不够真实\n\nMysql默认隔离级别\n</code></pre>\n<h3 id=\"序列化串行化serializable\"><a class=\"markdownIt-Anchor\" href=\"#序列化串行化serializable\">#</a> 序列化 / 串行化：serializable</h3>\n<pre><code>概念：\n\n隔离级别最高，效率最低。解决了所有问题\n不能并发\n</code></pre>\n<h2 id=\"测试隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#测试隔离级别\">#</a> 测试隔离级别</h2>\n<pre><code>查看变量：\nshow variables;\n通过like 通配符查询\nshow variables like '%isolation%';\n\n查看隔离级别：\nselect @@transaction_isolation; \n\n设置全局事务等级\nset global transaction isolation level read committed;\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/19.%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/",
            "title": "事务",
            "date_published": "2023-08-31T01:26:47.631Z",
            "content_html": "<h1 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h1>\n<p>什么是事务？<br>\n一个事务就是一个完整的业务逻辑。<br>\n是一个最小的工作单元。</p>\n<pre><code>例如转账的业务逻辑，就是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。\n</code></pre>\n<p>本质：就是多条 DML 语句同时成功或者同时失败</p>\n<p><strong>只有 DML 语句和事务有关系，其他语句无关。</strong><br>\ninsert<br>\nupdate<br>\ndelete<br>\n 因为以上三个语句是操作数据库中数据的</p>\n<p>事务是怎么做到同时成功或者同时失败的？</p>\n<pre><code>InnoDB：提供一组用于记录事务特性活动的日志文件\n\n在事务执行的过程中，每一条DML的操作都会被记录到“事务特性活动的日志文件”中\n</code></pre>\n<p><strong>在事务执行的过程中，可以提交事务，也可以回滚事务</strong></p>\n<pre><code>提交事务： 清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中\n    标志着事务的结束，并且是一种全部成功的结束\n\n回滚事务： 将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件\n    回滚事务标志着事务的结束，并且是一种全部失败的结束\n</code></pre>\n<h2 id=\"提交事务-回滚事务\"><a class=\"markdownIt-Anchor\" href=\"#提交事务-回滚事务\">#</a> 提交事务、回滚事务</h2>\n<pre><code>提交事务：commit\n回滚事务：rollback (回滚只能回滚到上一次的提交点)\n\n事务对应的单词：transaction\n\nMysql中默认情况下是自动提交事务的（自动提交）\n\n开启事务\n    start transaction;\n</code></pre>\n<h2 id=\"事务特性\"><a class=\"markdownIt-Anchor\" href=\"#事务特性\">#</a> 事务特性</h2>\n<pre><code>A：原子性\n    说明事务是最小工作单元，不可再分\n\nC：一致性\n    所有事务要求，在同一个事务中，所有操作必须同时成功，或者同时失败，以保证数据的一致性\n\nI：隔离性\n    A事务和B事务之间具有一定的隔离\n\nD：持久性\n    事务最终结束的一个保障，事务提交，将没有保存到硬盘上的数据保存到硬盘上\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/18.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/18.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
            "title": "存储引擎",
            "date_published": "2023-08-31T01:26:47.628Z",
            "content_html": "<h1 id=\"存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#存储引擎\">#</a> 存储引擎</h1>\n<p>什么是存储引擎？有什么用？</p>\n<pre><code>存储引擎是Mysql中特有的一个术语。其他数据库中没有（Oracle中也有，不叫这个名字）\n\n存储引擎实际上是一张表存储/组织数据的方式。\n\n不同的存储引擎，表存储的方式不同。\n</code></pre>\n<p>如何制定表的存储引擎？</p>\n<pre><code>可以在建表时，最后来指定表的存储引擎。\ncharset 来指定表的字符编码方式\n\nshow create table student;\n\nCREATE TABLE `student` (\n`id` int NOT NULL AUTO_INCREMENT,\n`name` varchar(255) DEFAULT NULL,\n`cno` int DEFAULT NULL,\nPRIMARY KEY (`id`),\nKEY `cno` (`cno`),\nCONSTRAINT `student_ibfk_1` FOREIGN KEY (`cno`) REFERENCES `t_class` (`t_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |\n</code></pre>\n<p>结论：<br>\nmysql 默认的存储引擎是 InnoDB<br>\nmysql 默认的字符编码方式： utf8mb4</p>\n<pre><code>create table test(\n    id int,\n    name varchar(10)\n) engine=InnoDB default CHARSET=utf8mb4;\n</code></pre>\n<h2 id=\"查看mysql支持哪些存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#查看mysql支持哪些存储引擎\">#</a> 查看 Mysql 支持哪些存储引擎</h2>\n<pre><code>show engines \\G;\n\nmysql&gt; show engines \\G;\n*************************** 1. row ***************************\n    Engine: MEMORY\n    Support: YES\n    Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 2. row ***************************\n    Engine: MRG_MYISAM\n    Support: YES\n    Comment: Collection of identical MyISAM tables\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 3. row ***************************\n    Engine: CSV\n    Support: YES\n    Comment: CSV storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 4. row ***************************\n    Engine: FEDERATED\n    Support: NO\n    Comment: Federated MySQL storage engine\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n*************************** 5. row ***************************\n    Engine: PERFORMANCE_SCHEMA\n    Support: YES\n    Comment: Performance Schema\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 6. row ***************************\n    Engine: MyISAM\n    Support: YES\n    Comment: MyISAM storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 7. row ***************************\n    Engine: InnoDB\n    Support: DEFAULT\n    Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n        XA: YES\nSavepoints: YES\n*************************** 8. row ***************************\n    Engine: ndbinfo\n    Support: NO\n    Comment: MySQL Cluster system information storage engine\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n*************************** 9. row ***************************\n    Engine: BLACKHOLE\n    Support: YES\n    Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 10. row ***************************\n    Engine: ARCHIVE\n    Support: YES\n    Comment: Archive storage engine\nTransactions: NO\n        XA: NO\nSavepoints: NO\n*************************** 11. row ***************************\n    Engine: ndbcluster\n    Support: NO\n    Comment: Clustered, fault-tolerant tables\nTransactions: NULL\n        XA: NULL\nSavepoints: NULL\n11 rows in set (0.00 sec)\n</code></pre>\n<h2 id=\"常用存储引擎\"><a class=\"markdownIt-Anchor\" href=\"#常用存储引擎\">#</a> 常用存储引擎</h2>\n<h3 id=\"myisam\"><a class=\"markdownIt-Anchor\" href=\"#myisam\">#</a> MyISAM</h3>\n<pre><code>特征：\n    使用三个文件夹表示每个表\n        格式文件-存储表结构的定义（mytable.frm)\n        数据文件-存储表行的内容（mytable.MYD)\n        索引文件-存储表上的索引（mytable.MYI) ：索引是一本数的目录，缩小扫描范围，提高效率\n    可被转换为压缩、只读表来节省空间\n\n优点：可被转换为压缩、只读表来节省空间\n缺点：不支持事务机制，安全性低\n</code></pre>\n<h3 id=\"innodb\"><a class=\"markdownIt-Anchor\" href=\"#innodb\">#</a> InnoDB</h3>\n<pre><code>Mysql默认的存储引擎，同时也是一个重量级的存储引擎\n主要特点：非常安全\n    InnoDB支持事务\n    支持数据库崩溃后自动回复机制\n\n特征：\n    1. 每个InnoDB表在数据库目录中以.frm格式文件表示\n    2. InnoDB表空间tablespace被用于存储表的内容\n    3. 提供一组用于记录事务特性活动的日志文件\n    4. 用commit（提交）、savepoint 及 rollback（回滚）支持事务处理\n    5. 提供全ACID兼容\n    6. 在Mysql服务器崩溃后提供自动恢复\n    7. 多版本（MVCC）和行级锁定\n    8. 支持外键及引用的完整性，包括级联删除和更新\n    \n优点：支持事务\n    以保证数据的安全。\n缺点：\n    1. 效率不是很高\n    2. 不能压缩\n    3. 不能转换为只读\n    4. 不能很好的节省存储空间\n</code></pre>\n<h3 id=\"memory\"><a class=\"markdownIt-Anchor\" href=\"#memory\">#</a> MEMORY</h3>\n<pre><code>内存存储引擎（别名堆引擎）\n\n使用MEMORY存储引擎的表，其数据存储在内存中，且长度固定\n这俩个特点使得MEMORY存储引擎非常快\n\n特征：\n    1. 在数据库目录中，每个表都以.frm 格式的文件表示\n    2. 表数据和索引被存储在内存中（目的：查询快）\n    3. 表级锁机制\n    4. 不能包含 TEXT 或 BLOB 字段\n\nMEMORY 存储引擎以前被称为HEAP引擎。\n\n优点：查询效率最高\n缺点：不安全，关机后数据消失，因为数据和索引都是存储在内存当中\n</code></pre>\n<h2 id=\"注意对于一张表来说只要是主键或者加有unique约束的字段上会自动创建索引\"><a class=\"markdownIt-Anchor\" href=\"#注意对于一张表来说只要是主键或者加有unique约束的字段上会自动创建索引\">#</a> 注意：对于一张表来说，只要是主键，或者加有 unique 约束的字段上会自动创建索引。</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/17.%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/17.%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/",
            "title": "约束",
            "date_published": "2023-08-31T01:26:47.625Z",
            "content_html": "<h1 id=\"约束\"><a class=\"markdownIt-Anchor\" href=\"#约束\">#</a> 约束</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<pre><code>constraint，在创建表的时候，创建一些约束，保证表中数据的完整性、有效性\n</code></pre>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>保证表中的数据有效。\n</code></pre>\n<h3 id=\"非空约束\"><a class=\"markdownIt-Anchor\" href=\"#非空约束\">#</a> 非空约束</h3>\n<pre><code>not null：字段值不能为NULL\n\ncreate table student(\n    id int,\n    name varchar(50) not null   // 只有列级 '非空约束'，没有表级 '非空约束'\n);\n</code></pre>\n<h3 id=\"唯一性约束\"><a class=\"markdownIt-Anchor\" href=\"#唯一性约束\">#</a> 唯一性约束</h3>\n<pre><code>unique:字段值不能重复，但可以为NULL（可以有多条NULL值）\n\ncreate table student(\n    id int,\n    name varchar(50) unique\n);\n\n案例：\nmysql&gt; select * from student;\n+------+------+\n| id   | name |\n+------+------+\n|    1 | z    |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n|    1 | NULL |\n+------+------+\n6 rows in set (0.00 sec)\n\nmysql&gt; desc student;\n+-------+-------------+------+-----+---------+-------+\n| Field | Type        | Null | Key | Default | Extra |\n+-------+-------------+------+-----+---------+-------+\n| id    | int         | YES  |     | NULL    |       |\n| name  | varchar(50) | YES  | UNI | NULL    |       |\n+-------+-------------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n</code></pre>\n<h4 id=\"建立多个字段唯一性约束\"><a class=\"markdownIt-Anchor\" href=\"#建立多个字段唯一性约束\">#</a> 建立多个字段唯一性约束</h4>\n<pre><code>1. 多字段各自唯一性约束\ncreate table student(\n    id int unique,\n    name varchar(50) unique // 列级约束\n);\n上边的表，id 和 name 字段各自有唯一性约束，互不影响。\n\n2. 多字段组合后唯一性约束\ncreate table student(\n    id int,\n    name varchar(50),\n    unique(id, name)    // 表级约束\n);\n上边的表，id 和 name 字段联合起来唯一。\n</code></pre>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h3>\n<pre><code>在Mysql中，如果一个字段同时被 not null 和 unique 约束的话，该字段自动成为主键。（Oracle中不一样）\n</code></pre>\n<h3 id=\"主键约束\"><a class=\"markdownIt-Anchor\" href=\"#主键约束\">#</a> 主键约束</h3>\n<pre><code>primary key\n\n主键值是每一行的唯一标识\n主键特征：unique + not null\n\n写法一：列级约束\ncreate table student(\n    id int primary key,\n    name varchar(255)\n);\n\n写法二：表级约束\ncreate table student(\n    id int,\n    name varchar(255),\n    primary key(id)\n);\n</code></pre>\n<h4 id=\"多个字段建立主键约束\"><a class=\"markdownIt-Anchor\" href=\"#多个字段建立主键约束\">#</a> 多个字段建立主键约束</h4>\n<pre><code>// 复合主键\ncreate table student(\n    id int,\n    name varchar(255),\n    primary key(id, name)\n);\n\n//错误 一张表不能建立多个主键\n    create table student(\n    id int primary key,\n    name varchar(255) primary key\n);\n</code></pre>\n<h4 id=\"mysql中自然主键\"><a class=\"markdownIt-Anchor\" href=\"#mysql中自然主键\">#</a> Mysql 中自然主键</h4>\n<pre><code>create table student(\n    id int primary key auto_increment,  // 从 1 开始递增\n    name varchar(255)\n);\n</code></pre>\n<h3 id=\"外键约束\"><a class=\"markdownIt-Anchor\" href=\"#外键约束\">#</a> 外键约束</h3>\n<pre><code> foreign key\n\ncreate table t_class(\n    t_id int primary key auto_increment,\n    t_name varchar(50)\n);\n\ncreate table student(\n    id int primary key auto_increment,\n    name varchar(255),\n    cno int,\n    foreign key (cno) references t_class(t_id)\n);\n</code></pre>\n<p>注意：子表中的外键引用父表中的某个字段，被引用的这个字段不一定是主键，但是至少有 unique 约束。（否则，子表不能确定引用的是父表中的那条数据）</p>\n<p><strong>注意：外键可以为 NULL</strong></p>\n<h3 id=\"检查性约束\"><a class=\"markdownIt-Anchor\" href=\"#检查性约束\">#</a> 检查性约束</h3>\n<pre><code>check(Mysql 不支持， Oracle支持)\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/16.DML/DML/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/16.DML/DML/",
            "title": "DML",
            "date_published": "2023-08-31T01:26:47.622Z",
            "content_html": "<h1 id=\"insert\"><a class=\"markdownIt-Anchor\" href=\"#insert\">#</a> insert</h1>\n<pre><code>// 根据字段名，插入数据\n// 注意： 字段名和值要一一对应\ninsert into 表名(字段名1,字段名2...) values(值1,值2...);\n\n\n//表示插入所有字段\ninsert into 表名 values(值1,值2...);\n\n// 一次插入多条数据，用逗号隔开\ninsert into test values(1, '张三', '1999-12-13'), (2, '李四', '2000-01-02');\n</code></pre>\n<h2 id=\"将查询结果插入到一张表\"><a class=\"markdownIt-Anchor\" href=\"#将查询结果插入到一张表\">#</a> 将查询结果插入到一张表</h2>\n<pre><code>快速创建dept_bak表，同时数据也存入了dept_bak表中。\ncreate table dept_bak as select * from dept;\n\n将查询到的结果insert into到dept_bak表中\ninsert into dept_bak select * from dept;\n</code></pre>\n<h1 id=\"update\"><a class=\"markdownIt-Anchor\" href=\"#update\">#</a> update</h1>\n<pre><code>update 表名 set 字段名1 = 值1, 字段名2 = 值2 where 条件;\n</code></pre>\n<h1 id=\"delete\"><a class=\"markdownIt-Anchor\" href=\"#delete\">#</a> delete</h1>\n<pre><code>delete from 表名 where 条件;\n\n原理：\n表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放\n\n优点：支持回滚，可以恢复\n缺点：删除效率低\n</code></pre>\n<h2 id=\"快速删除表\"><a class=\"markdownIt-Anchor\" href=\"#快速删除表\">#</a> 快速删除表</h2>\n<pre><code>truncate 语句删除数据（属于DDL）\n    删除效率高，表被一次截断，物理删除\n\n    优点：效率高，快\n    缺点：不支持回滚\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/15.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/15.%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "数据类型",
            "date_published": "2023-08-31T01:26:47.620Z",
            "content_html": "<h1 id=\"mysql-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#mysql-数据类型\">#</a> Mysql 数据类型</h1>\n<pre><code>varchar\n    可变长度的字符串\n    比较智能，节省空间\n    会根据实际长度，动态的分配空间\n\n    缺点：需要动态分配空间，速度慢\n    优点：节省空间\n\nchar\n    定长字符串\n    不管实际长度是多少\n    分配固定长度的空间去存储数据\n    使用不恰当的时候，可能导致空间浪费\n\n    缺点：使用不当，可能导致空间浪费\n    优点：不需要动态分配空间，速度快\n\nint\n\nbigint\n\nfloat\n\ndouble\n\ndate\n    短日期类型\n\ndatetime\n    长日期类型\n\nclob\n    字符大对象\n    最多存储4g的字符串\n    比如：存储一篇文章\n    超过255个字符的，尽量都使用clob\n    Character Large Object: clob\n\nblob\n    存储二进制对象\n    图片，声音，视频，等流媒体数据\n    往blob字段中插入数据时，需要使用IO流。\n\ndate\n    短日期：只包括 年月日\n\n    Mysql默认格式：可以将该格式的时间字符串直接插入到date类型的字段中\n    %Y-%m-%d\n\n\ndatetime\n    长日期：包括 年月日时分秒\n\n    Mysql默认格式：可以将该格式的时间字符串直接插入到date类型的字段中\n    %Y-%m-%d %h:%i:%s\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/14.DDL/DDL/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/14.DDL/DDL/",
            "title": "DDL",
            "date_published": "2023-08-31T01:26:47.616Z",
            "content_html": "<h1 id=\"ddl-语句\"><a class=\"markdownIt-Anchor\" href=\"#ddl-语句\">#</a> DDL 语句</h1>\n<pre><code>create、drop、alter\n</code></pre>\n<h2 id=\"create-建表\"><a class=\"markdownIt-Anchor\" href=\"#create-建表\">#</a> create 建表</h2>\n<pre><code>语法格式：\ncreate table 表名 (\n    字段名 数据类型,\n    字段名 数据类型,\n    ...\n    字段名 数据类型 //切记！！！   最后一句没有标点符号\n);\n</code></pre>\n<h3 id=\"快速创建表\"><a class=\"markdownIt-Anchor\" href=\"#快速创建表\">#</a> 快速创建表</h3>\n<pre><code>create table emp2 as select * from emp;\n原理：\n    将一个查询结果当作一张表新建\n    可以快速创建一张表，同时数据也存在。\n\ncreate table emp2 as select * from emp where ename = 'SMITH';\n注意：查询语句可以添加条件等。\n</code></pre>\n<h2 id=\"drop-删表\"><a class=\"markdownIt-Anchor\" href=\"#drop-删表\">#</a> drop 删表</h2>\n<pre><code>语法格式：\ndrop table 表名;    //当表不存在时，会报错\ndrop table if exists 表名;  // 当表存在的话，删除\n</code></pre>\n<h2 id=\"alter-对表结构修改\"><a class=\"markdownIt-Anchor\" href=\"#alter-对表结构修改\">#</a> alter 对表结构修改</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/13.%E5%88%86%E9%A1%B5/limit/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/13.%E5%88%86%E9%A1%B5/limit/",
            "title": "Mysql中limit",
            "date_published": "2023-08-31T01:26:47.613Z",
            "content_html": "<h1 id=\"limit\"><a class=\"markdownIt-Anchor\" href=\"#limit\">#</a> limit</h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>将查询结果集的一部分取出来，通常用在分页中。\n</code></pre>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h2>\n<pre><code>limit startIndex, length\nstartIndex: 起始下标，从0开始\nlength: 长度\n\n缺省用法：limit length\nlength: 长度\n</code></pre>\n<p>案例：按照薪资降序，取出前五名员工。</p>\n<pre><code>\n缺省用法：\n\nselect\n    ename, sal\nfrom\n    emp\norder by\n    sal desc\nlimit 5;\n\n完整用法：\n\nselect\n    ename, sal\nfrom\n    emp\norder by\n    sal desc\nlimit 5;\n\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<pre><code>在mysql中，limit是在order by之后执行的。\n</code></pre>\n<h1 id=\"分页\"><a class=\"markdownIt-Anchor\" href=\"#分页\">#</a> 分页</h1>\n<pre><code>limit (pageNum - 1) * pageSize, pageSize;\n</code></pre>\n<h2 id=\"offset\"><a class=\"markdownIt-Anchor\" href=\"#offset\">#</a> offset</h2>\n<pre><code>作用同limit，配合limit使用，注意：limit此时只能有一个参数\n\nlimit pageSize, offset (pageNum - 1) * pageSize;\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/6.union/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/6.union/",
            "title": "Mysql中union",
            "date_published": "2023-08-31T01:26:47.610Z",
            "content_html": "<h1 id=\"union\"><a class=\"markdownIt-Anchor\" href=\"#union\">#</a> union</h1>\n<h2 id=\"作用\"><a class=\"markdownIt-Anchor\" href=\"#作用\">#</a> 作用</h2>\n<pre><code>合并查询结果集\n</code></pre>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>union的效率更高一些。对于表连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。\n但是union可以减少匹配次数。\n在减少匹配次数的情况下，还可以完成两个结果的拼接。\n\n例如：a 连接 b 连接 c\na: 10条记录\nb: 10条记录\nc: 10条记录\n匹配次数为 : 10*10*10 = 1000\n\n如果改为union\na 连接 b ： 10*10 = 100\na 连接 c ： 10*10 = 100\n100 + 100 = 200次（union把乘法变成了加法运算）\n</code></pre>\n<p>案例：查询工作岗位是 ‘MANAGER’ 和 ‘SALESMAN’ 的员工</p>\n<pre><code>\n第一种方法：or\n第二种方法：in\n第三种方法：union\nselect ename from emp where job = 'MANAGER'\nunion\nselect ename from emp where job = 'SALESMAN';\n\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意：</h2>\n<p>在使用 union 需要注意：<br>\n1.  union 在结果集合并的时候，要求两个结果列数相同。<br>\n2.  MYSQL 中，对应列的数据类型可以不相同，Oracle 里会报错（会要求对应列的数据类型相同）。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/5.%E5%AD%90%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/5.%E5%AD%90%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql子查询",
            "date_published": "2023-08-31T01:26:47.609Z",
            "content_html": "<h1 id=\"子查询\"><a class=\"markdownIt-Anchor\" href=\"#子查询\">#</a> 子查询</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>select语句中嵌套select语句，被嵌套的select语句被称为子查询。\n</code></pre>\n<h2 id=\"子查询可以出现的位置\"><a class=\"markdownIt-Anchor\" href=\"#子查询可以出现的位置\">#</a> 子查询可以出现的位置</h2>\n<pre><code>select\n    ..(select子).\nfrom\n    ..(select子).\nwhere\n    ..(select子).\n</code></pre>\n<h2 id=\"where子句中的子查询\"><a class=\"markdownIt-Anchor\" href=\"#where子句中的子查询\">#</a> where 子句中的子查询</h2>\n<p>案例：找出比最低工资高的员工的姓名和薪资。</p>\n<pre><code>\nselect \n    ename, sal\nfrom\n    emp\nwhere\n    sal &gt; (select min(sal) from emp);\n\n</code></pre>\n<h2 id=\"from-子查询\"><a class=\"markdownIt-Anchor\" href=\"#from-子查询\">#</a> from 子查询</h2>\n<pre><code>from后边的子查询，可以当作一张临时的表。\n</code></pre>\n<p>案例：找出每个岗位的平均工资的薪资等级</p>\n<pre><code>\nselect\n    t.*, sg.grade\nfrom\n    (select job, avg(sal) as avgsal from emp group job) t\njoin\n    salgrade\non\n    t.avgsal between sg.losal and hisal;\n\n</code></pre>\n<h2 id=\"select-子查询\"><a class=\"markdownIt-Anchor\" href=\"#select-子查询\">#</a> select 子查询</h2>\n<p>案例：找出每个员工的部门名称，要求显示员工姓名，部门名称。</p>\n<pre><code>\nselect\n    e.ename, (select d.ename from dept e where e.deptno = d.deptno) as dname\nfrom\n    emp e;\n\n</code></pre>\n<h3 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h3>\n<pre><code>在select语句中的子查询，这个子查询语句只能一次返回一条结果，多于一条，就报错了。\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/4.%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/4.%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql多表连接查询",
            "date_published": "2023-08-31T01:26:47.608Z",
            "content_html": "<h1 id=\"多表连接查询\"><a class=\"markdownIt-Anchor\" href=\"#多表连接查询\">#</a> 多表连接查询</h1>\n<pre><code>语法：\nselect\n    ...\nfrom\n    a\njoin                    // 内连接\n    b\non\n    a表和b表的连接条件\njoin                    // 内连接\n    c\non\n    a表和c表的连接条件\nright join              // 外连接\n    d\non\n    a和d的连接条件\n</code></pre>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<p><strong>一条 SQL 中内连接和外连接可以混合，都可以出现！</strong></p>\n<p>案例：找出每个员工的部门名称，以及工资等级，要求显示员工名，部门名，薪资，薪资等级。</p>\n<pre><code>\nselect \n    e.ename, d.ename, e.sal, sg.grade \nfrom \n    emp e \njoin \n    dept d \non \n    e.deptno = d.deptno \njoin \n    salgrade sg \non \n    e.sal between sg.losal and hisal;\n\n</code></pre>\n<p>案例：找出每个员工的部门名称，以及工资等级，要求显示员工名，领导名，部门名，薪资，薪资等级。</p>\n<pre><code>\nselect \n    e.ename, d.ename, e.sal, sg.grade \nfrom \n    emp e \njoin \n    dept d \non \n    e.deptno = d.deptno \njoin \n    salgrade sg \non \n    e.sal between sg.losal and hisal\nleft outer join\n    emp l\non\n    e.mgr = l.empno;\n\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/3.%E5%A4%96%E8%BF%9E%E6%8E%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/3.%E5%A4%96%E8%BF%9E%E6%8E%A5/",
            "title": "Mysql外连接",
            "date_published": "2023-08-31T01:26:47.607Z",
            "content_html": "<h1 id=\"外连接\"><a class=\"markdownIt-Anchor\" href=\"#外连接\">#</a> 外连接</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>外连接当中，两张表关联查询产生主次关系。\n左连接和右连接可以相互切换。（\n    1. 任何一个左连接都有一个右连接的写法。\n    2. 任何一个右连接都有一个左连接的写法。\n    ）\n</code></pre>\n<h2 id=\"右外连接\"><a class=\"markdownIt-Anchor\" href=\"#右外连接\">#</a> 右外连接</h2>\n<p>right 代表，将右边的表看作主表，主要是将这张主表的内容全部查出来，捎带着关联查询左边的表</p>\n<pre><code>\n                                          outer可以省略\nselect e.ename, d.ename from emp e right [outer] join dept d on e.deptno = e.deptno;\n\n</code></pre>\n<h2 id=\"左外连接\"><a class=\"markdownIt-Anchor\" href=\"#左外连接\">#</a> 左外连接</h2>\n<p>left 代表，将左边的表看作主表，和右外连接相反。</p>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<pre><code>外连接的查询结果条数一定是 &gt;= 内连接的查询结果条数\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2.%E5%86%85%E8%BF%9E%E6%8E%A5/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2.%E5%86%85%E8%BF%9E%E6%8E%A5/",
            "title": "Mysql内连接",
            "date_published": "2023-08-31T01:26:47.605Z",
            "content_html": "<h1 id=\"内连接\"><a class=\"markdownIt-Anchor\" href=\"#内连接\">#</a> 内连接</h1>\n<h2 id=\"特点\"><a class=\"markdownIt-Anchor\" href=\"#特点\">#</a> 特点</h2>\n<pre><code>完全能够匹配上这个条件的数据查询出来。\nA，B两张表连接查询，AB两张表没有主次关系，是平等的。\n</code></pre>\n<h2 id=\"等值连接\"><a class=\"markdownIt-Anchor\" href=\"#等值连接\">#</a> 等值连接</h2>\n<pre><code>\nSQL92语法：\n\nselect up.id uId, qpd.id qId from user_profile up, question_practice_detail qpd where up.device_id = qpd.device_id;\n\nSQL99语法：\n                                                  [inner] 单词可以省略\nselect up.id uId, qpd.id qId from user_profile up [inner] join question_practice_detail qpd on up.device_id = qpd.device_id;\n\n</code></pre>\n<p>SQL92 语法缺点：结构不清晰，表的连接条件和后期进一步的筛选条件，都放到了 where 后边。</p>\n<p>SQL99 语法有点：表连接的条件是独立的，连接之后如果还需要进一步筛选，可以继续添加 where 条件。</p>\n<h2 id=\"非等值连接\"><a class=\"markdownIt-Anchor\" href=\"#非等值连接\">#</a> 非等值连接</h2>\n<pre><code>条件不是一个等量关系，称为非等值连接\n</code></pre>\n<pre><code>\n案例：找出每个员工的薪资等级，要求显示员工名，薪资，薪资等级\n\n    select \n        e.ename, e.sal, s.grade \n    from\n        emp e\n    inner join \n        salgrade s\n    on \n        e.sal between s.losal and s.hisal;\n\n</code></pre>\n<h2 id=\"自连接\"><a class=\"markdownIt-Anchor\" href=\"#自连接\">#</a> 自连接</h2>\n<pre><code>一张表看作两张表\n</code></pre>\n<pre><code>\n案例：查询员工的上级领导，要求显示员工名和对应的领导名\n    select \n        a.ename as '员工名', b.ename as '领导名'\n    from\n        emp a \n    inner join\n        emp b\n    on\n        a.mgr = b.empno;\n\n\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/1.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/12.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/1.%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/",
            "title": "Mysql连接查询",
            "date_published": "2023-08-31T01:26:47.603Z",
            "content_html": "<h1 id=\"什么是连接查询\"><a class=\"markdownIt-Anchor\" href=\"#什么是连接查询\">#</a> 什么是连接查询</h1>\n<pre><code>从一张表中单独查询，称为单表查询。\nemp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。这种跨表查询，多张表联合起来查询数据，称为连接查询。\n</code></pre>\n<h1 id=\"连接查询分类\"><a class=\"markdownIt-Anchor\" href=\"#连接查询分类\">#</a> 连接查询分类</h1>\n<pre><code>根据语法的年代分类：\n    1.  SQL92：1992年出现的语法。\n    2.  SQL99：1999年出现的语法。\n\n根据表连接的方式分类：\n    1. 内连接\n       1. 等值连接\n       2. 非等值连接\n       3. 自连接\n    2. 外连接\n       1. 左外连接（左连接）\n       2. 右外连接（右连接）\n    3. 全连接\n</code></pre>\n<h1 id=\"笛卡尔积现象\"><a class=\"markdownIt-Anchor\" href=\"#笛卡尔积现象\">#</a> 笛卡尔积现象</h1>\n<pre><code>当两张表进行连接查询，没有任何条件限制的时候，最终的查询结果条数，是两张表条数的乘积，这种现象被称为：笛卡尔积现象。（一个数学现象）\n</code></pre>\n<pre><code>\n     select up.id uId, qd.id qId from user_profile up, question_detail qd;\n\n    +-----+-----+\n    | uId | qId |\n    +-----+-----+\n    |   7 |   1 |\n    |   6 |   1 |\n    |   5 |   1 |\n    |   4 |   1 |\n    |   3 |   1 |\n    |   2 |   1 |\n    |   1 |   1 |\n    |   7 |   2 |\n    ...\n     112 rows in set (0.00 sec)\n\n</code></pre>\n<h2 id=\"避免笛卡尔积现象\"><a class=\"markdownIt-Anchor\" href=\"#避免笛卡尔积现象\">#</a> 避免笛卡尔积现象</h2>\n<pre><code>增加表连接时的条件。\n</code></pre>\n<pre><code>\n    select up.id uId, qpd.id qId from user_profile up,  question_practice_detail qpd where up.device_id = qpd.device_id;\n\n    +-----+-----+\n    | uId | qId |\n    +-----+-----+\n    |   1 |   1 |\n    |   2 |   2 |\n    |   2 |   3 |\n    |   3 |   4 |\n    |   4 |   5 |\n    |   4 |   6 |\n    |   4 |   7 |\n    |   2 |   8 |\n    |   2 |   9 |\n    |   3 |  10 |\n    |   4 |  11 |\n    |   4 |  12 |\n    |   4 |  13 |\n    |   2 |  14 |\n    |   2 |  15 |\n    |   3 |  16 |\n    +-----+-----+\n    16 rows in set (0.00 sec)\n\n</code></pre>\n<pre><code>重点：最终查询结果是16条，但是在匹配中，匹配的次数没有减少，仍然是112次。只不过进行了筛除，匹配的次数并没有减少！！！\n</code></pre>\n<p>注意：通过观察笛卡尔积现场得出，表的连接次数越多（连接的表越多）程序执行效率越低，应避免表的连接次数过多。</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/11.distinct%E5%8E%BB%E9%87%8D/distinct/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/11.distinct%E5%8E%BB%E9%87%8D/distinct/",
            "title": "Mysql中Distinct去重",
            "date_published": "2023-08-31T01:26:47.601Z",
            "content_html": "<h1 id=\"distinct-去重\"><a class=\"markdownIt-Anchor\" href=\"#distinct-去重\">#</a> Distinct 去重</h1>\n<p>把查询结果去除重复记录</p>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<ol>\n<li>distinct 只能出现在所有字段的最前方。<br>\nselect name, distinct job from emp;// 错误<br>\n select distinct name, job from emp;// 正确<br>\n这样表示对 name 和 job 组合起来进行去重。</li>\n</ol>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/10.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/10.%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/",
            "title": "Mysql执行顺序",
            "date_published": "2023-08-31T01:26:47.598Z",
            "content_html": "<h1 id=\"执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#执行顺序\">#</a> 执行顺序</h1>\n<pre><code>select\n    ...\nfrom \n    ...\nwhere\n    ...\ngroup by\n    ...\nhaving\n    ...\norder by\n    ...\n\n执行顺序：\n1.  from\n2.  where\n3.  group by\n4.  having\n5.  select\n6.  order by\n</code></pre>\n<p>从某张表查询数据，<br>\n先经过 where 条件筛选出有价值的数据，<br>\n对这些数据进行分组，<br>\n分组后可以使用 having 继续筛选数据<br>\n select 查询出来<br>\n最后排序输出</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "数据库概念",
            "date_published": "2023-08-31T01:26:47.590Z",
            "content_html": "<h1 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<h2 id=\"关系型数据库是如何工作的\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库是如何工作的\">#</a> 关系型数据库是如何工作的</h2>\n<h3 id=\"从数据结构说起\"><a class=\"markdownIt-Anchor\" href=\"#从数据结构说起\">#</a> 从数据结构说起</h3>\n<h4 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h4>\n<p>​\t对于数据库而言，重要的不是数据量，而是当数据量增加时运算如何增加。</p>\n<p>​\t时间复杂度用来检验某个算法处理一定量的数据要花费多长时间，时间复杂度不会给出确切的运算次数，但是给出的是一种观念。 <img data-src=\"https://pdai.tech/images/db/sb-sql-learn-1.png\" alt=\"img\"></p>\n<h4 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h4>\n<h4 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\">#</a> 二叉搜索树</h4>\n<p>​\t二叉搜索树只需要 Log (N) 次运算，而如果你直接使用阵列则需要 N 次运算。</p>\n<h4 id=\"b树索引\"><a class=\"markdownIt-Anchor\" href=\"#b树索引\">#</a> B + 树索引</h4>\n<h4 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h4>\n<p>​\t为什么不使用阵列？</p>\n<ul>\n<li>如果有了更好的哈希函数，在哈希表里搜索的时间复杂度就是 O (1)。</li>\n<li>一个哈希表可以只装载一半到内存，剩下的哈希捅可以留在硬盘上。</li>\n<li>用列阵的话，你需要一个连续的内存空间，如果你加载一张大表，很难分配足够的连续的内存空间。</li>\n</ul>\n<h2 id=\"关系型数据库设计理论\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库设计理论\">#</a> 关系型数据库设计理论</h2>\n<h3 id=\"重要术语\"><a class=\"markdownIt-Anchor\" href=\"#重要术语\">#</a> 重要术语</h3>\n<ul>\n<li>属性：列的名字。</li>\n<li>依赖：列属性间存在的某种联系。</li>\n<li>元组：每一个行（每一条数据）。</li>\n<li>表：由多个属性，以及众多元组组成。</li>\n<li>模式：这里我们指逻辑结构。</li>\n<li>域：数据类型。</li>\n<li>键：由关系的一个或多个属性组成，任意两个键相同的元组，所有属性都相同。需要保证表示键的属性最少。一个关系可以存在好几种键，一般从这些候选键中，选出一个作为主键（primary key）。</li>\n<li>候选键：由关系的一个或多个属性组成，候选键都具备键的特性，都有资格成为主键。</li>\n<li>超键：包含键的属性集合，无需保证属性集的最小化。每个键也是超键。可以认为是超键的超集。</li>\n<li>外键：如果某一个关系 A 中的一个（组）属性是另一个关系 B 的键，则该（组）属性在 A 中成为外键。</li>\n<li>主属性：所有候选键所包含的属性都是主属性。</li>\n<li>投影：选取特定的列，如将关系学生信息投影为学号、姓名，即得到上表中仅包含学号、姓名的列。</li>\n<li>选择：按照一定条件选取特定元组，如选择上表中分数 &gt; 80 的元组。</li>\n<li>笛卡尔积（交叉连接）：第一个关系每一行分别与第二个关系的每一行组合。</li>\n<li>自然连接：第一个关系中每一行与第二个关系的每一行进行匹配，如果得到有交叉部分则合并，若无交叉部分则舍弃。</li>\n<li>连接：即加上约束条件的笛卡尔积，先得到笛卡尔积，然后根据约束条件删除不满足的元组。</li>\n<li>外连接：执行自然连接后，将舍弃的部分也加入，并且匹配失败处的属性用 Null 代替。</li>\n<li>除法运算：关系 R 除以关系 S 的结果为 T，则 T 包含所有在 R 但不在 S 的属性，且 T 的元组与 S 的元组的所有组合在 R 中。</li>\n</ul>\n<h2 id=\"数据库系统核心知识点\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统核心知识点\">#</a> 数据库系统核心知识点</h2>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<h4 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h4>\n<p>​\t事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以用 Rollback 进行回滚。 <img data-src=\"https://pdai.tech/images/pics/185b9c49-4c13-4241-a848-fbff85c03a64.png\" alt=\"image\"></p>\n<h4 id=\"acid\"><a class=\"markdownIt-Anchor\" href=\"#acid\">#</a> ACID</h4>\n<ul>\n<li><strong>原子性 (Atomicity)</strong>：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\n<li><strong>一致性 (Consistency)</strong>：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\n<li><strong>隔离性 (lsolation)</strong>：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li><strong>持久性 (Durability)</strong>：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统崩溃，事务执行的结果也不能丢失。可以通过数据库备份和恢复来实现，在系统发生崩溃时，使用备份数据库进行数据恢复。</li>\n</ul>\n<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系:</p>\n<ul>\n<li>只有满足一致性，事务的执行结果才是正确的。</li>\n<li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>\n<li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>\n<li>事务满足持久化是为了能应对数据库崩溃的情况。 <img data-src=\"https://pdai.tech/images/pics/a58e294a-615d-4ea0-9fbf-064a6daec4b2.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"autocommit\"><a class=\"markdownIt-Anchor\" href=\"#autocommit\">#</a> AUTOCOMMIT</h4>\n<p>​\tmysql 默认采用自动提交模式。如果不显示使用 start transaction 语句来开始一个事务，那么每个查询都会被当作一个事务自动提交。</p>\n<h3 id=\"并发一致性问题\"><a class=\"markdownIt-Anchor\" href=\"#并发一致性问题\">#</a> 并发一致性问题</h3>\n<p>​\t在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>\n<h4 id=\"丢失修改\"><a class=\"markdownIt-Anchor\" href=\"#丢失修改\">#</a> 丢失修改</h4>\n<p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>\n<h4 id=\"读脏数据\"><a class=\"markdownIt-Anchor\" href=\"#读脏数据\">#</a> 读脏数据</h4>\n<p>T1 修改了一个数据，T2 随后读取了这个数据。如果 T1 撤销了修改，那么 T2 读取的是脏数据。</p>\n<h4 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\">#</a> 不可重复读</h4>\n<p>T2 读取了一个数据，T1 对该数据做了修改。如果 T2 再次读取了这个数据，此时读取的数据和第一次读取的数据结果不同。</p>\n<h4 id=\"幻影读\"><a class=\"markdownIt-Anchor\" href=\"#幻影读\">#</a> 幻影读</h4>\n<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><strong>产生并发不一致问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己操作，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</strong></p>\n<h3 id=\"封锁\"><a class=\"markdownIt-Anchor\" href=\"#封锁\">#</a> 封锁</h3>\n<h4 id=\"封锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#封锁粒度\">#</a> 封锁粒度</h4>\n<p>Mysql 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的粒度越小，发生锁争用的可能性就越小，系统的并发程度就越高。</p>\n<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销越大。</p>\n<p><strong>在选择锁粒度时，需要在锁开销和并发程度之间做一个权衡</strong></p>\n<h4 id=\"封锁类型\"><a class=\"markdownIt-Anchor\" href=\"#封锁类型\">#</a> 封锁类型</h4>\n<pre><code>##### 读写锁\n</code></pre>\n<ul>\n<li>\n<p>排它锁（Exclusive）：简写为 X 锁，又称写锁。</p>\n</li>\n<li>\n<p>共享锁（Shared）：简写为 S 锁，又称读锁。</p>\n<p>有一下两个规定：</p>\n<ul>\n<li>​\t一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间，其他事务不能对 A 加任何锁。</li>\n<li>​    一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取，但不能进行更新操作。加锁期间其他事务只能对 A 加 S 锁，但不能加 X 锁。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"意向锁\"><a class=\"markdownIt-Anchor\" href=\"#意向锁\">#</a> 意向锁</h5>\n<p>​\t使用意向锁可以更容易地支持多粒度封锁。</p>\n<p>​\t存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其他事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>\n<p>​\t意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中某个数据行上加上 X 锁或 S 锁。有一下两个规定：</p>\n<ul>\n<li>\n<p>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁。</p>\n</li>\n<li>\n<p>一个事务在获取某个数据行对象的 X 锁之前，必须先获取表的 X 锁。</p>\n<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其他事务正在使用这个表或者表中的某一行的锁，因此事务 T 加锁失败。</p>\n<p>各种锁的兼容关系如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">IX</th>\n<th style=\"text-align:center\">S</th>\n<th style=\"text-align:center\">IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IX</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IS</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p>解释如下：</p>\n<ul>\n<li>\n<p>​\t任意 IS/IX 锁之间都是兼容的，因为他们只是表示想要对表加锁，而不是正真的加锁。</p>\n</li>\n<li>\n<p>​    S 锁只与 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其他事务可以已经获得对表或者对表中行的 S 锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#封锁协议\">#</a> 封锁协议</h3>\n<h4 id=\"三级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级锁协议\">#</a> 三级锁协议</h4>\n<h5 id=\"一级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#一级锁协议\">#</a> 一级锁协议</h5>\n<p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束猜释放锁。</p>\n<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>\n<h5 id=\"二级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#二级锁协议\">#</a> 二级锁协议</h5>\n<p>在一级的基础上，要求读取数据 A 时，必须加上 S 锁，读取完马上释放 S 锁。</p>\n<p>可以解决数据脏读问题。因为一个事务在对数据 A 进行修改，根据一级协议，必须加 X 锁，那么就不能再加 S 锁了，也就不会读入数据了。</p>\n<h5 id=\"三级封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级封锁协议\">#</a> 三级封锁协议</h5>\n<p>在二级的基础上，要求读取数据 A 时必须加上 S 锁，直到事务结束才释放 S 锁。</p>\n<p>可以解决不可重复度问题，因为读 A 时，其他事务不能加 X 锁，从而避免了在读数据期间数据发生改变。</p>\n<h4 id=\"两段锁协议\"><a class=\"markdownIt-Anchor\" href=\"#两段锁协议\">#</a> 两段锁协议</h4>\n<p>​\t加锁和解锁分两个阶段进行。</p>\n<p>​\t可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>​\t<strong>事务遵循两段锁协议是保证可串行化调度的充分条件</strong></p>\n<h3 id=\"mysql-隐式与显式锁定\"><a class=\"markdownIt-Anchor\" href=\"#mysql-隐式与显式锁定\">#</a> Mysql 隐式与显式锁定</h3>\n<p>Mysql 的 InnoDB 存储引擎采用的是两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定。</p>\n<pre><code class=\"language-mysql\">select ...... LOCK In SHARE MODE;\nselect ...... FOR UPDATE;\n</code></pre>\n<h3 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h3>\n<h4 id=\"未提交读read-uncommited\"><a class=\"markdownIt-Anchor\" href=\"#未提交读read-uncommited\">#</a> 未提交读（READ UNCOMMITED)</h4>\n<p>事务中的修改，即使没有提交，对其他事务也是可见的。</p>\n<h4 id=\"提交读read-commited\"><a class=\"markdownIt-Anchor\" href=\"#提交读read-commited\">#</a> 提交读（READ COMMITED)</h4>\n<p>一个事务只能读取已经提交的事务所作的修改。换个话说，一个事务所做的修改，在提交之前，对其他事务都是不可见的。</p>\n<h4 id=\"可重复读repeatable-read\"><a class=\"markdownIt-Anchor\" href=\"#可重复读repeatable-read\">#</a> 可重复读（REPEATABLE READ)</h4>\n<p>保证在同一个事务中多次读取同样的数据结果是一样的。</p>\n<h4 id=\"可串行化serializable\"><a class=\"markdownIt-Anchor\" href=\"#可串行化serializable\">#</a> 可串行化（SERIALIZABLE)</h4>\n<p>强制事务串行执行。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">未提交读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">提交读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可重复读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可串行化</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多版本并发控制\"><a class=\"markdownIt-Anchor\" href=\"#多版本并发控制\">#</a> 多版本并发控制</h3>\n<p>多版本并发控制 (Multi-Version Concurrency Control, MVCC) 是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>\n<h3 id=\"版本号\"><a class=\"markdownIt-Anchor\" href=\"#版本号\">#</a> 版本号</h3>\n<ul>\n<li>系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li>\n<li>事务版本号：事务开始时的系统版本号。</li>\n</ul>\n<h3 id=\"隐藏的列\"><a class=\"markdownIt-Anchor\" href=\"#隐藏的列\">#</a> 隐藏的列</h3>\n<p>MVCC 在每行记录后边都保存着两个隐藏的列，用来存储两个版本号。</p>\n<ul>\n<li>创建版本号：指示创建一个数据行的快照时的系统版本号。</li>\n<li>删除版本号如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示快照已经把欸删除了。</li>\n</ul>\n<h3 id=\"undo-日志\"><a class=\"markdownIt-Anchor\" href=\"#undo-日志\">#</a> Undo 日志</h3>\n<p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行 (Record) 的所有快照连接起来。</p>\n<p><img data-src=\"https://pdai.tech/images/pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" alt=\"image\"></p>\n<h3 id=\"实现过程\"><a class=\"markdownIt-Anchor\" href=\"#实现过程\">#</a> 实现过程</h3>\n<p>以下实现过程针对可重复读隔离级别。</p>\n<p>当开始新一个事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号，理解这一点很关键。</p>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> <a href=\"#_1-select\">#</a> 1. SELECT</h4>\n<p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p>\n<p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于 T 的版本号，因为如果大于或者等于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> <a href=\"#_2-insert\">#</a> 2. INSERT</h4>\n<p>将当前系统版本号作为数据行快照的创建版本号。</p>\n<h4 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> <a href=\"#_3-delete\">#</a> 3. DELETE</h4>\n<p>将当前系统版本号作为数据行快照的删除版本号。</p>\n<h4 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\">#</a> <a href=\"#_4-update\">#</a> 4. UPDATE</h4>\n<p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p>\n<h3 id=\"-5\"><a class=\"markdownIt-Anchor\" href=\"#-5\">#</a> <a href=\"#%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 快照读与当前读</h3>\n<h4 id=\"-6\"><a class=\"markdownIt-Anchor\" href=\"#-6\">#</a> <a href=\"#_1-%E5%BF%AB%E7%85%A7%E8%AF%BB\">#</a> 1. 快照读</h4>\n<p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-7\"><a class=\"markdownIt-Anchor\" href=\"#-7\">#</a> <a href=\"#_2-%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 2. 当前读</h4>\n<p>读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"六-next-key-locks\"><a class=\"markdownIt-Anchor\" href=\"#六-next-key-locks\">#</a> 六、Next-Key Locks</h3>\n<p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p>\n<p>MVCC 不能解决幻读的问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读 (REPEATABLE READ) 隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p>\n<h4 id=\"-8\"><a class=\"markdownIt-Anchor\" href=\"#-8\">#</a> <a href=\"#record-locks\">#</a> Record Locks</h4>\n<p>锁定一个记录上的索引，而不是记录本身。</p>\n<p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p>\n<h4 id=\"-9\"><a class=\"markdownIt-Anchor\" href=\"#-9\">#</a> <a href=\"#gap-locks\">#</a> Gap Locks</h4>\n<p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> c <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> c <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">10</span> <span class=\"token operator\">and</span> <span class=\"token number\">20</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-10\"><a class=\"markdownIt-Anchor\" href=\"#-10\">#</a> <a href=\"#next-key-locks\">#</a> Next-Key Locks</h4>\n<p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。</p>\n",
            "tags": [
                "Sql"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/30/WebSocket/1.%E7%AE%80%E4%BB%8B/",
            "url": "http://1405904364.github.io/2023/08/30/WebSocket/1.%E7%AE%80%E4%BB%8B/",
            "title": "",
            "date_published": "2023-08-30T08:50:42.548Z",
            "content_html": "<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h1>\n<pre><code>WebSocket协议在2008年诞生，2011年成为国际标准，所有游览器都已经支持了。\n</code></pre>\n<p>最大的特点就是，服务器可以主动向客户端推送消息，客户端也可以主动向服务器发送消息，是真正的实现双平等对话，属于服务器推送数据技术的一种。</p>\n<p>其它特点有：<br>\n1. 建立在 TCP 协议之上，服务端实现比较容易。<br>\n2. 与 HTTP 协议有良好的兼容性，默认端口 80 和 443，并且握手阶段采用 HTTP 协议，因此不容易屏蔽，能通过各种 HTTP 代理服务器。<br>\n3. 数据格式比较轻量，性能开销较小，通信高效。<br>\n4. 可以发送二进制数据，也可以发送文本。<br>\n5. 没有同源限制，客户端可以与任意服务器通信。<br>\n6. 协议标识是：ws ，如果是加密，则为：wss ，服务器网址就是 URL。</p>\n<p>JavaScript 客户端</p>\n<pre><code>\n      const ws = new WebSocket('ws://127.0.0.1:8080/webSocketTest/ws/ucy')\n\n      ws.onopen = function (evt) &#123;\n        console.log(&quot;Connection open ...&quot;);\n        ws.send(&quot;Hello WebSockets!&quot;);\n      &#125;;\n\n      ws.onmessage = function (evt) &#123;\n        console.log(&quot;Received Message: &quot; + evt.data);\n        ws.close();\n      &#125;;\n      \n      ws.onclose = function (evt) &#123;\n        console.log(&quot;Connection closed.&quot;);\n      &#125;;\n\n</code></pre>\n<p>Java 服务端</p>\n<pre><code>\nimport org.springframework.messaging.Message;\nimport org.springframework.stereotype.Component;\n\nimport javax.websocket.CloseReason;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\n/**\n * @ClassName WebSocketEchoServer\n * @Description TODO\n * @Author JY\n * @Date 2023/4/24\n **/\n\n@Component\n@ServerEndpoint(&quot;/ws/&#123;username&#125;&quot;)\npublic class WebSocketEchoServer &#123;\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(&quot;username&quot;) String username) &#123;\n        System.out.println(&quot;username = &quot; + username + &quot; is online.&quot;);\n\n    &#125;\n\n    @OnClose\n    public void onClose(Session session, @PathParam(&quot;username&quot;) String username, CloseReason closeReason) &#123;\n        System.out.println(&quot;username = &quot; + username + &quot; is offline.&quot;);\n        System.out.println(&quot;Closing a WebSocket due to &quot; + closeReason.getReasonPhrase());\n    &#125;\n\n    // @OnMessage\n    // public String onMessage(String message, Session session) throws IOException &#123;\n    //     System.out.println(&quot;received message=&quot; + message);\n    //     return &quot;echo &quot; + message;\n    // &#125;\n\n    @OnMessage\n    public void onMessage(String message, Session session) throws IOException &#123;\n        System.out.println(&quot;received message=&quot; + message);\n        session.getBasicRemote().sendText(&quot;echo &quot; + message);\n    &#125;\n\n    @OnError\n    public void onError(Session session, Throwable throwable) &#123;\n        System.out.println(&quot;发生错误&quot;);\n        throwable.printStackTrace();\n    &#125;\n\n    public void boardCast(Message message) &#123;\n        // todo: 遍历所有的session，给所有session发送消息\n\n    &#125;\n\n&#125;\n\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://1405904364.github.io/2023/08/30/webService/webService%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://1405904364.github.io/2023/08/30/webService/webService%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "webService的使用",
            "date_published": "2023-08-30T08:50:18.092Z",
            "content_html": "<h1 id=\"什么是webservice\"><a class=\"markdownIt-Anchor\" href=\"#什么是webservice\">#</a> 什么是 webService</h1>\n<blockquote>\n<p>webService 也称为 web 服务，它是一种跨编程语言和操作系统平台的远程调用技术。<br>\nWebService 采用标准的 SOAP 协议传输 (SOAP Simple Object Access Protocol 简单对象访问协议)，soap 属于 w3c 标准，并且 soap 协议是基于 http 的应用层协议传输 xml 数据。WebService 采用 WSDL 作为描述语言，也就是 WebService 的使用说明书。并且 W3C 为 WebService 制定了一套传输数据类型，使用 xml 进行描述，即 XSD (XML Schema Datatypes), 任何语言写的 webService 接口在发送数据的时候都要转成 webService 标准的 XSD 发送。</p>\n</blockquote>\n<h1 id=\"webservice的三要素\"><a class=\"markdownIt-Anchor\" href=\"#webservice的三要素\">#</a> WebService 的三要素</h1>\n<h2 id=\"soap\"><a class=\"markdownIt-Anchor\" href=\"#soap\">#</a> SOAP</h2>\n<blockquote>\n<p>SOAP 也叫做简单对象访问协议，是一种简单的基于 xml 的协议，它使应用程序通过 HTTP 来交换数据，可以简单的理解为 SOAP = http + xml 。 SOAP 协议目前的主流版本为 SOAP1.1 和 SOAP1.2（SOAP1.2 是被纳入 w3c 标准后的版本）。SOAP 也不是 WebService 的专有协议，其他的应用程序也是用 SOAP 传输数据，例如：tr069 也是使用 SOAP 协议来传输数据</p>\n</blockquote>\n<p>区分 http 请求和 SOAP (http + xml) 请求:<br>\n<img data-src=\"/image/webService/20180320112817939.png\" alt=\"图片\"></p>\n<p>SOAP 协议格式</p>\n<ol>\n<li>必须有 Envelope 元素，此元素将整个 xml 文档表示为一条 SOAP 消息。</li>\n<li>可选 Header 元素，包含头部信息。</li>\n<li>必须有 Body 元素，包含所有的调用和响应信息。</li>\n<li>可选的 Fault 元素，提供有关在处理此消息所发生的错误信息。</li>\n</ol>\n<p>SOAP1.1 和 SOAP1.2 的区别</p>\n<p>相同点：<br>\n1. 请求方式都是采用 POST 方式<br>\n 2. 协议内容相同，都有 Envelope 和 Body 标签</p>\n<p>不同点：<br>\n1. 数据格式不同：content-type 不同<br>\n - SOAP1.1:text/xml;charset=utf-8<br>\n- SOAP1.2:application/soap+xml;charset=utf-8<br>\n2. 命名空间不同<br>\n - SOAP1.1：<span class=\"exturl\" data-url=\"aHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvc29hcC9lbnZlbG9wZS8=\">http://schemas.xmlsoap.org/soap/envelope/</span><br>\n- SOAP1.2：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvMjAwMy8wNS9zb2FwLWVudmVsb3Bl\">http://www.w3.org/2003/05/soap-envelope</span></p>\n<h2 id=\"wsdl\"><a class=\"markdownIt-Anchor\" href=\"#wsdl\">#</a> WSDL</h2>\n<blockquote>\n<p>WSDL 是基于 XML 的用于描述 WebService 及其函数（方法）、参数和返回值。也就是说 wsdl 是对发布出来的服务中的方法和返回值以及参数的描述（也可以说是 WebService 的使用说明书）</p>\n</blockquote>\n<p>WSDL 文档结构：</p>\n<p>WSDL 文档主要包括的 5 个标签</p>\n<ol>\n<li><service>: 服务视图，WebService 的服务节点，它包括服务端点</li>\n<li><binding>: 为每个服务端点定义消息格式和协议细节</li>\n<li><portType>: 服务端点，描述 WebService 可执行的操作方法，以及相关消息，通过 binging 指向 protType</li>\n<li><message>: 定义一个操作（方法）的数据参数（可有多个参数）</li>\n<li><types>: 定义 WebService 使用的全部数据类型</li>\n</ol>\n<h2 id=\"uddi\"><a class=\"markdownIt-Anchor\" href=\"#uddi\">#</a> UDDI</h2>\n<blockquote>\n<p>UDDI 是一种目录服务，通过它，企业可注册并搜集 Web Service。企业将自己提供的 Web Service 注册在 UDDI，也可以使用别的企业在 UDDI 注册 Web Service 服务，从而达到资源共享。UDDI 旨在将全球的 Web Service 资源进行共享</p>\n</blockquote>\n<h2 id=\"webservice开发规范\"><a class=\"markdownIt-Anchor\" href=\"#webservice开发规范\">#</a> WebService 开发规范</h2>\n<h3 id=\"jax-ws\"><a class=\"markdownIt-Anchor\" href=\"#jax-ws\">#</a> JAX-WS</h3>\n<blockquote>\n<p>JAX-WS (Java API for XML-Based Web Service): 一个远程调用可以转换基于 XML 协议 (例如：SOAP 协议), 在使用 JAX-WS 过程中，开发者不需要使用任何代码来编写生成和处理 SAOP。JAX-WS 运行时会自动将这些 API 调用转换为 SOAP 协议的消息。</p>\n</blockquote>\n<blockquote>\n<p>在服务端，用户只需要通过 JAVA 语言定义远程调用所需要实现的接口 (SEI: Service EndPoit Interface), 并对其提供相关的实现，通过调用 JAX-WS 的服务来调用接口，这样就可以发布 Web Service 接口了</p>\n</blockquote>\n<blockquote>\n<p>在客户端，用户可以通过 JAX-WS 的 API 创建一个代理来（用本地代理对象替代远程的服务对象）实现远程服务端调用。</p>\n</blockquote>\n<p>从 Java5 开始就支持 JAX-WS2.0 版本，Java6 以后的版本支持 JAX-WS2.1 版本，Java1.7 支持 JAX-WS2.2 的版本。</p>\n<h3 id=\"jaxmsaaj\"><a class=\"markdownIt-Anchor\" href=\"#jaxmsaaj\">#</a> JAXM&amp;SAAJ</h3>\n<blockquote>\n<p>JAXM（Java API for XML Message）：主要定义了包含接收信息和发送信息所需要的 API，SAAJ (SOAP With Attachment API For Java) 是与 JAXM 搭配使用的 API，为构建 SOAP 和解析 SOAP 包提供了重要的支持，支持附件传输等。</p>\n</blockquote>\n<h3 id=\"jax-rs\"><a class=\"markdownIt-Anchor\" href=\"#jax-rs\">#</a> JAX-RS</h3>\n<blockquote>\n<p>JAX-RS 是 Java 针对 REST（Representtation state Transfer）风格制定的一套 Web 服务规范，由于该规范推出来的较晚，因此该规范（JAX-WS 的版本为 1.0）并未随 Java6 一起发行。</p>\n</blockquote>\n<h2 id=\"webservice应用场景\"><a class=\"markdownIt-Anchor\" href=\"#webservice应用场景\">#</a> WebService 应用场景</h2>\n<p>适用场景：<br>\n1. 用于软件集成和复用<br>\n 2. 用于接口服务，不考虑客户端类型，不考虑性能<br>\n 3. 服务端已经确定使用了 WebService，客户端只能选择 WebService 使用</p>\n<p>不适用场景：<br>\n1. 对性能要求比较高 (因为 WebService 是采用 http 发送 soap 协议的数据，该协议迭代了太多标签，导致数据跟多，因此性能也有所降低)<br>\n 2. 同构程序之间不建议使用</p>\n<h2 id=\"wsimport命令介绍\"><a class=\"markdownIt-Anchor\" href=\"#wsimport命令介绍\">#</a> wsimport 命令介绍</h2>\n<blockquote>\n<p>wsimport 命令是 jdk 自带的 webService 客户端工具，可以根据 wsdl 文档生成对应服务代理类（客户端调用类），当然不管服务端用什么语言写的，都可以生成调用 WebService 的客户端代码，服务端通过客户端调用 WebService。</p>\n</blockquote>\n<p>wsimport 命令常用参数为：</p>\n<ul>\n<li>-d &lt;目录&gt;: 指定放置生成的输出文件的位置</li>\n<li>-s &lt;目录&gt;: 指定放置生成的源文件的位置</li>\n<li>-p &lt;包名&gt;: 指定目标程序包</li>\n</ul>\n<p>例如：在 com-&gt;test 文件夹中生成源文件</p>\n<blockquote>\n<p>wsimport -p com.test -s . <span class=\"exturl\" data-url=\"aHR0cDovL3dlYlNlcnZpY2Uud2VieG1sLmNvbS5jbi9XZWJTZXJ2aWNlL01vYmlsZUNPZGVXUy5hc214P3dzZGw=\">http://webService.webxml.com.cn/WebService/MobileCOdeWS.asmx?wsdl</span></p>\n</blockquote>\n<p>注意：-s .  表示在 -p 指定的文件夹下生成源文件</p>\n<h2 id=\"发布jax-ws的web-service服务\"><a class=\"markdownIt-Anchor\" href=\"#发布jax-ws的web-service服务\">#</a> 发布 JAX-WS 的 Web Service 服务</h2>\n<ol>\n<li>创建 SEI 接口 (本质上就是 Java 接口)</li>\n</ol>\n<pre><code class=\"language-Java\">public interface WeatherInterface &#123;\n    public String querryWeather(String cityName);\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>创建接口实现类</li>\n</ol>\n<blockquote>\n<ol>\n<li>\n<p>@WebService 注解：表示该实现类是一个 Web Service 服务。</p>\n<ul>\n<li>\n<p>targetNamespace 属性：指定命名空间。</p>\n</li>\n<li>\n<p>name 属性：指定 portType 的名称。</p>\n</li>\n<li>\n<p>serviceName 属性：服务名称。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>@WebMethod 注解：定义公共方法。</p>\n<ul>\n<li>\n<p>operationName 属性：方法的名称。（也就是 WSDL 中的 operation 的名称）</p>\n</li>\n<li>\n<p>exclude 属性：如果设置为 true 表示该方法不是 Web Service 服务中的方法。反之则是 WebService 中的方法。默认也是 &gt; false。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>@WebResult 注解：定义返回值。</p>\n<ul>\n<li>name 属性：返回结果值的名称</li>\n</ul>\n</li>\n<li>\n<p>@WebParam 注解：定义参数。</p>\n<ul>\n<li>name 属性：指定参数的名称</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-Java\">\n@WebService(targetNamespace=&quot;http://service.cn_lc&quot;,name=&quot;WeatherWSSoap&quot;,portName=&quot;WeatherWSSoapPort&quot;,serviceName=&quot;WeatherWS&quot;\n)//只加这个注解就只能生成SAOP1.1的WSDL\n//@BindingType(SOAPBinding.SOAP12HTTP_BINDING)\npublic class WeatherInterfaceImpl implements WeatherInterface &#123;\n    @WebMethod(operationName=&quot;getWeather&quot;,exclude=false)\n    @Override\n    @WebResult(name=&quot;resultWeather&quot;)\n    public  String querryWeather(@WebParam(name=&quot;cityName&quot;)String cityName) &#123;\n        System.out.println(&quot;form client ...&quot; + cityName);\n        String weather = &quot;晴&quot;;\n        return weather;\n    &#125;\n&#125;\n\n</code></pre>\n<ol start=\"3\">\n<li>通过 EndPoint 发布 WebService 服务 (EndPoint 只能发布实现类，不能发布接口)</li>\n</ol>\n<pre><code class=\"language-Java\">\npublic class WeatherServer &#123;\n    public static void main(String[] args) &#123;\n        /*** 参数解释：* address：服务器地址* implementor:实现类*/\n        Endpoint.publish(&quot;http://127.0.0.1:12345/weather&quot;,new WeatherInterfaceImpl());\n        System.out.println(&quot;http://127.0.0.1:12345/weather?wsdl&quot;);\n        &#125;\n&#125;\n\n</code></pre>\n<p><img data-src=\"/image/webService/20180320145116683.png\" alt=\"图片\"><br>\n<img data-src=\"/image/webService/20180320145359572.png\" alt=\"图片\"></p>\n<h2 id=\"webservice的四种客户端调用方式\"><a class=\"markdownIt-Anchor\" href=\"#webservice的四种客户端调用方式\">#</a> WebService 的四种客户端调用方式</h2>\n<p>第一种：通过 wsimport 生成客户端方式调用<br>\n 1. 通过 wsimport 生成客户端代码<br>\n wsimport -p com.test jaxws -s <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToxMjM0NS93ZWF0aGVyP3dzZGw=\">http://127.0.0.1:12345/weather?wsdl</span><br>\n2. 阅读使用说明书 WSDL，使用生成客户端代码调用服务端</p>\n<pre><code class=\"language-Java\">\npublic class WeatherClient &#123;\n    public static void main(String[] args) &#123;\n        //创建服务视图\n        WeatherWS weatherInterfaceImplService = new WeatherWS();\n        //通过服务视图对象获取服务实现类\n        WeatherWSSoap weatherInterfaceImpl = weatherInterfaceImplService.getPort(WeatherWSSoap.class);\n        //通过服务实现对象调用查询方法\n        System.out.println(weatherInterfaceImpl.getWeather(&quot;北京&quot;));\n    &#125;\n&#125;\n\n</code></pre>\n<p>采用 wsimport 生成客户端代码方式的特点：这种方式使用简单，但是一些关键的元素 (比如 wsdl 地址、命名空间、服务类名等都写死在生成的客户端代码中) 不方便维护</p>\n<hr>\n<p>第二种：通过 Service 编程调用方式<br>\n 1. 通过 wsimport 生成客户端代码<br>\n wsimport -p com.test jaxws -s <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMToxMjM0NS93ZWF0aGVyP3dzZGw=\">http://127.0.0.1:12345/weather?wsdl</span><br>\n2. 自己编写服务视图类，并通过该服务视图类来获取服务实现类实例</p>\n<pre><code class=\"language-Java\">\npublic class WeatherClient &#123;\n    public static void main(String[] args) &#123;\n        //创建WSDL的URL，注意不是服务地址\n        URL url = new URL(&quot;http://127.0.0.1:12345/weather?wsdl&quot;);\n        // 创建服务名称//namespaceURI:命名空间地址。//localPart：服务视图名。\n        QName qname = new QName(&quot;http://service.cn_lc&quot;, &quot;WeatherWS&quot;);\n        //创建服务视图//1.wsdlDocumentLocation - wsdl地址//2.serviceName - 服务名称\n        Service service = Service.create(url, qname);\n        WeatherWSSoap weatherWSSoap = service.getPort(WeatherWSSoap.class);\n        String result = weatherWSSoap.getWeather(&quot;成都&quot;);\n        System.out.println(result);\n    &#125;\n&#125;\n\n</code></pre>\n<hr>\n<p>第三种：通过 HttpURLConnection 调用方式<br>\n 1. 创建服务地址<br>\n 2. 打开一个通向服务地址的连接<br>\n 3. 设置参数（例如请求方式为 POST）<br>\n4. 组织 SOAP 数据发送数据<br>\n 5. 接收服务端相应，并打印</p>\n<pre><code class=\"language-Java\">\npublic class WeatherClient &#123;\n    public static void main(String[] args) throws IOException &#123;\n        //第一步：创建服务地址\n        URL url = new URL(&quot;http://127.0.0.1:54321/weather&quot;);\n        // 第二步：打开一个通向服务端地址的连接\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        //设置参数\n        connection.setRequestMethod(&quot;POST&quot;);\n        connection.setRequestProperty(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);\n        //设置输入输出\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        //准备SOAP数据，发送请求\n        String soapxml = getXML(&quot;成都&quot;);\n        OutputStream out = connection.getOutputStream();\n        OutputStreamWriter writer = new OutputStreamWriter(out, &quot;utf-8&quot;);\n        writer.write(soapxml);\n        writer.close();\n        out.close();\n        //第五步接收服务端响应并打印\n        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) &#123;\n            InputStream input = connection.getInputStream();\n            InputStreamReader reader = new InputStreamReader(input, &quot;utf-8&quot;);\n            BufferedReader buffered = new BufferedReader(reader);\n            String temp = null;\n            StringBuilder sb = new StringBuilder();\n            while ((temp = buffered.readLine()) != null) &#123;\n                sb.append(temp);\n            &#125;\n            buffered.close();\n            reader.close();\n            input.close();\n            System.out.println(sb.toString());\n        &#125;\n    &#125;\n\n    public static String getXML(String cityName) &#123;\n        return &quot;&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;&quot; + &quot;&lt;S:Envelope xmlns:S=\\&quot;http://schemas.xmlsoap.org/soap/envelope/\\&quot;&gt;&quot; + &quot;&lt;S:Body&gt;&quot; + &quot;&lt;ns2:getWeather xmlns:ns2=\\&quot;http://service.cn_lc\\&quot;&gt;&quot; + &quot;&lt;cityName&gt;&quot; + cityName + &quot;&lt;/cityName&gt;&quot; + &quot;&lt;/ns2:getWeather&gt;&quot; + &quot;&lt;/S:Body&gt;&quot; + &quot;&lt;/S:Envelope&gt;&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<hr>\n<p>第四种：通过 ajax 方式调用服务端</p>\n<pre><code class=\"language-Html\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;查询天气&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;function querryWeather() &#123;\n            var xhr = new XMLHttpRequest(); xhr.open(&quot;post&quot;, &quot;http://127.0.0.1:12345/weather&quot;, true);\n            //设置数据类型\n            xhr.setRequestHeader(&quot;content-type&quot;, &quot;text/xml;charset=utf-8&quot;);\n            //设置回调函数\n            if (4 == xhr.readState &amp;&amp; 200 == xhr.status) &#123;\n                alert(xhr.responseText);\n            &#125;\n            //组织数据\n            var soapXml = &quot;&lt;?xml version=\\&quot;1.0\\&quot; ?&gt;&quot; + &quot;&lt;S:Envelope xmlns:S=\\&quot;http://schemas.xmlsoap.org/soap/envelope/\\&quot;&gt;&quot; + &quot;&lt;S:Body&gt;&quot; + &quot;&lt;ns2:getWeather xmlns:ns2=\\&quot;http://service.cn_lc\\&quot;&gt;&quot; + &quot;&lt;cityName&gt;&quot; + document.getElementById(&quot;cityName&quot;).value + &quot;&lt;/cityName&gt;&quot; + &quot;&lt;/ns2:getWeather&gt;&quot; + &quot;&lt;/S:Body&gt;&quot; + &quot;&lt;/S:Envelope&gt;&quot;; alert(soapXml);\n            //发送数据\n            xhr.send(soapXml);\n        &#125;\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;center&gt;天气查询：&lt;input type=&quot;text&quot; id=&quot;cityName&quot; /&gt;&lt;input type=&quot;button&quot; value=&quot;查询&quot;\n            οnclick=&quot;javascript:querryWeather();&quot; /&gt;&lt;/center&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n</code></pre>\n<h2 id=\"cxf\"><a class=\"markdownIt-Anchor\" href=\"#cxf\">#</a> CXF</h2>\n<blockquote>\n<p>CXF 是一个开源的 WebService 框架，提供了很多完善的功能<br>\n CXF 支持的协议有 SOAP1.1/SOAP1.2,REST<br>\nCXF 支持的数据格式有 XML，JSON (仅在 REST 方式下支持，不再 SOAP 方式下支持，因为 SOAP 使 http+xml)</p>\n</blockquote>\n",
            "tags": [
                "webService"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/18/maven/%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE/",
            "url": "http://1405904364.github.io/2023/08/18/maven/%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0%E6%A0%87%E7%AD%BE/",
            "title": "常用元素标签",
            "date_published": "2023-08-18T06:16:27.212Z",
            "content_html": "<h1 id=\"pomxml常用元素介绍\"><a class=\"markdownIt-Anchor\" href=\"#pomxml常用元素介绍\">#</a> pom.xml 常用元素介绍</h1>\n<ul>\n<li>project 包含 pom 一些约束的信息</li>\n<li>modelVersion 指定当前 pom 的版本</li>\n<li>groupId（主项目标示，定义当前 maven 属于哪个项目，- 反写公司网址 + 项目名）、</li>\n<li>artifactId（实际项目模块标识，项目名 + 模块名）、</li>\n<li>version（当前项目版本号，第一个 0 标识大版本号，第 - 二个 0 标示分支版本号，第三个 0 标识小版本号，0.0.1，- snapshot 快照，alpha 内部测试，beta 公测，release 稳 - 定，GA 正式发布）</li>\n<li>name 项目描述名</li>\n<li>url 项目地址</li>\n<li>description 项目描述</li>\n<li>developers 开发人员列表</li>\n<li>licenses 许可证</li>\n<li>organization：组织</li>\n<li>dependencies：依赖列表</li>\n<li>dependency：依赖项目 里面放置坐标</li>\n<li>scope：包的依赖范围 test</li>\n<li>optional ：设置依赖是否可选</li>\n<li>exclusions：排除依赖传递列表</li>\n<li>dependencyManagement 依赖的管理</li>\n<li>build：为构建行为提供支持</li>\n<li>plugins：插件列表</li>\n<li>parent：子模块对父模块的继承</li>\n<li>modules：聚合多个 maven 项目</li>\n</ul>\n",
            "tags": [
                "maven"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/18/maven/scope%E6%A0%87%E7%AD%BE/",
            "url": "http://1405904364.github.io/2023/08/18/maven/scope%E6%A0%87%E7%AD%BE/",
            "title": "scope标签的作用",
            "date_published": "2023-08-18T06:16:27.211Z",
            "content_html": "<h1 id=\"scope的作用\"><a class=\"markdownIt-Anchor\" href=\"#scope的作用\">#</a> Scope 的作用</h1>\n<p>概述：</p>\n<blockquote>\n<p>Maven 中使用 scope 来指定当前包的依赖范围和依赖的传递性。常见的可选值有: complie、provide、runtime、test、system 等</p>\n</blockquote>\n<pre><code class=\"language-maven\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;\n            &lt;version&gt;3.2.1.RELEASE&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<h2 id=\"scope取值\"><a class=\"markdownIt-Anchor\" href=\"#scope取值\">#</a> scope 取值</h2>\n<ul>\n<li>complie\n<ul>\n<li>范围：all</li>\n<li>依赖传递：是</li>\n<li>例子：spring-core</li>\n<li>详解：complie 为默认的依赖有效范围。如果没有明确指定依赖有效范围的花，则默认采用该值。在编译、运行、测试时均有效</li>\n</ul>\n</li>\n<li>provided\n<ul>\n<li>范围：complie、test</li>\n<li>依赖传递：否</li>\n<li>例子：servlet-api</li>\n<li>详解：provided 在编译、测试时有效，但是在运行时无效。例如 servlet-api 依赖，在部署到 tomcat 服务器中，容器已经提供了，就不再需要 maven 重复引入了</li>\n</ul>\n</li>\n<li>runtime\n<ul>\n<li>范围：runtime、test</li>\n<li>依赖传递：是</li>\n<li>例子：JDBC 驱动</li>\n<li>详解：runtime 在运行、测试时有效，但是在编译时无效。例如 JDBC 的驱动实现</li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>范围：test</li>\n<li>依赖传递：否</li>\n<li>例子：JUnit</li>\n<li>详解：只在测试时有效，例如 Junit</li>\n</ul>\n</li>\n<li>system\n<ul>\n<li>范围：complie、test</li>\n<li>依赖传递：是</li>\n<li>例子：</li>\n<li>详解：system 在编译、测试时有效，但是在运行时无效。与 provided 的区别是，使用 system 范围依赖时，必须通过 systemPath 元素显示指定依赖文件的路径。此依赖时通过本机绑定的，不可移植使用，因此要谨慎使用。systemPath 元素可以引用环境变量。例如：<pre><code class=\"language-maven\">        &lt;dependency&gt;\n            &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n            &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n            &lt;version&gt;2.0&lt;/version&gt;\n            &lt;scope&gt;system&lt;/scope&gt;\n            &lt;systemPath&gt;$&#123;java.home&#125;/lib/rt.jar&lt;/systemPath&gt;\n        &lt;/dependency&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p>在编译或者是运行时有效的范围依赖，在打包时会一起打包</p>\n",
            "tags": [
                "maven"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/10/Java/Stream%E6%B5%81/",
            "url": "http://1405904364.github.io/2023/08/10/Java/Stream%E6%B5%81/",
            "title": "Stream流式编程",
            "date_published": "2023-08-10T08:29:50.064Z",
            "content_html": "<h1 id=\"stream流式编程\"><a class=\"markdownIt-Anchor\" href=\"#stream流式编程\">#</a> Stream 流式编程</h1>\n<h2 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h2>\n<p><img data-src=\"/image/Java/13170952_625693608975b29303.webp\" alt=\"分类图片\"></p>\n<p><strong>中间操作</strong>可分为：</p>\n<blockquote>\n<ul>\n<li>无状态：指元素的处理不受之前元素的影响</li>\n<li>有状态：指该操作只有拿到所有元素之后才能继续下去</li>\n</ul>\n</blockquote>\n<p><strong>终结操作</strong>可分为：</p>\n<blockquote>\n<ul>\n<li>非短路操作：指必须处理所有元素才能得到最终结果</li>\n<li>短路操作：指遇到某些符合条件的元素就可以得到最终结果</li>\n</ul>\n</blockquote>\n<p>具体操作如图所示：</p>\n<p><img data-src=\"/image/Java/20201218181011714.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"stream-api使用\"><a class=\"markdownIt-Anchor\" href=\"#stream-api使用\">#</a> Stream API 使用</h2>\n<h3 id=\"流的构成\"><a class=\"markdownIt-Anchor\" href=\"#流的构成\">#</a> 流的构成</h3>\n<blockquote>\n<p>使用流的时候，通常包括三个步骤：</p>\n<ol>\n<li>获取一个数据源</li>\n<li>数据转换<br>\n执行操作获取想要的结果，每次转换原有的 Stream 对象不变，返回一个新的 Stream 对象，这就允许对其操作可以像链条一样排列</li>\n</ol>\n</blockquote>\n<h3 id=\"流的创建\"><a class=\"markdownIt-Anchor\" href=\"#流的创建\">#</a> 流的创建</h3>\n<ul>\n<li>\n<p>通过 java.util.Collection.stream () 方法用集合创建流</p>\n<pre><code class=\"language-Java\">\n  List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;,&quot;world&quot;,&quot;stream&quot;);\n  //创建顺序流\n  Stream&lt;String&gt; stream = list.stream();\n  //创建并行流\n  Stream&lt;String&gt; parallelStream = list.parallelStream();\n\n</code></pre>\n</li>\n<li>\n<p>使用 java.util.Arrays.stream (T [] array) 方法用数组创建流</p>\n<pre><code class=\"language-Java\">\n  String[] array = &#123;&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;&#125;;\n  Stream&lt;String&gt; arrayStream = Arrays.stream(array);\n\n</code></pre>\n</li>\n<li>\n<p>Stream 的静态方法：of ()、iterate ()、generate ()</p>\n<pre><code class=\"language-Java\">\n  Stream&lt;Integer&gt; stream1 = Stream.of(1, 2, 3, 4, 5, 6);\n  \n  Stream&lt;Integer&gt; stream2 = Stream.iterate(0, (x) -&gt; x + 2).limit(3);\n  \n  Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(3);\n\n</code></pre>\n</li>\n<li>\n<p>stream 和 parallelStream 的简单区分</p>\n</li>\n</ul>\n<blockquote>\n<p>stream 是顺序流，由主线程按顺序对流执行操作，而 parallelStream 是并行流，内部以多线程并行执行的方式对流进行操作，需要注意使用并行流的前提是流中的数据处理没有顺序要求（会乱序，即使用了 forEachOrdered）</p>\n</blockquote>\n<hr>\n<h3 id=\"一-stream中间操作\"><a class=\"markdownIt-Anchor\" href=\"#一-stream中间操作\">#</a> 一、Stream 中间操作</h3>\n<pre><code>Stream流中间操作是指在流链当中，可以对数据进行处理操作，包括filter过滤、map映射转换、flatMap合并、distinct去重、sorted排序等操作，这些操作都会返回一个新的Stream流对象，可以通过链式调用多个中间操作进行复杂的数据处理。\n\n需要注意的是，中间操作需要具有终止操作才会触发。\n</code></pre>\n<h4 id=\"无状态stateless操作\"><a class=\"markdownIt-Anchor\" href=\"#无状态stateless操作\">#</a> 无状态 (Stateless) 操作</h4>\n<h5 id=\"filter过滤出符合条件的元素\"><a class=\"markdownIt-Anchor\" href=\"#filter过滤出符合条件的元素\">#</a> filter: 过滤出符合条件的元素</h5>\n<blockquote>\n<p>filter () 方法常用于实现数据过滤，即可以对集合、数组等数据源筛选出符合指定条件的元素，并返回一个新的流</p>\n</blockquote>\n<pre><code class=\"language-Java\">// 将数组转换为一个字符串列表\nList&lt;String&gt; numbers = Arrays.asList&quot;13378520000&quot;,&quot;13278520000&quot;,&quot;13178520000&quot;,&quot;13358520000&quot;);\n// 通过stream()方法创建一个流，接着使用filter方法过滤出前缀为&quot;133&quot;的元素，最终通过collect()方法将结果收集到一个新的列表中\nList&lt;String&gt; filterNumbers = numbers.stream().filter(s -&gt; s.startWith(&quot;133&quot;)).collect(Collectors.toList());\nSystem.out.println(filterNumbers);\n\n打印结果：[13378520000, 13358520000]\n</code></pre>\n<hr>\n<h5 id=\"map映射转换元素\"><a class=\"markdownIt-Anchor\" href=\"#map映射转换元素\">#</a> map: 映射转换元素</h5>\n<blockquote>\n<p>map 方法用于对流中的每个元素进行映射操作，将其转换为另一个元素或者提取其中的信息，并返回一个新的流</p>\n</blockquote>\n<p>1.2.1 转换元素</p>\n<blockquote>\n<p>获取每个手机号的前七位子字符串</p>\n</blockquote>\n<pre><code class=\"language-Java\">List&lt;String&gt; numbers = Arrays.asList(&quot;13378520000&quot;,&quot;13278520000&quot;,&quot;13178520000&quot;,&quot;13558520000&quot;);\n//通过stream()方法创建一个流，使用map()方法将每个字符串转换为截取前7位的字符，最后使用collect()方法将结果收集到一个新列表中\nList&lt;String&gt; filterdNumbers = numbers.stream().map(s -&gt; s.substring(0,7)).collect(Collectors.toList());\nSystem.out.println(filterdNumbers);\n\n\n打印结果：[1337852, 1327852, 1317852, 1355852]\n\n</code></pre>\n<hr>\n<p>1.2.2 提取元素信息</p>\n<blockquote>\n<p>获取每个对象的手机号</p>\n</blockquote>\n<pre><code class=\"language-Java\">List&lt;People&gt; peopleList = Arrays.asList(\n        new People(&quot;王二&quot;,&quot;13378520000&quot;),\n        new People(&quot;李二&quot;,&quot;13278520000&quot;),\n        new People(&quot;张四&quot;,&quot;13178520000&quot;)\n);\n//通过stream()方法创建一个流，使用map()方法提取每个用户的手机号，最后使用collect()方法将结果收集到一个新列表中\nList&lt;String&gt; tel = peopleList.stream().map(People::getTel).collect(Collectors.toList());\nSystem.out.println(tel);\n\n\n打印结果：[13378520000, 13278520000, 13178520000]\n</code></pre>\n<hr>\n<h5 id=\"flatmap将多个流合并为一个流\"><a class=\"markdownIt-Anchor\" href=\"#flatmap将多个流合并为一个流\">#</a> flatMap: 将多个流合并为一个流</h5>\n<p>1.3.1 实现多对多的映射</p>\n<blockquote>\n<p>将 A 组数据和 B 组数据一次进行相加</p>\n</blockquote>\n<pre><code class=\"language-Java\">\nList&lt;Integer&gt; listA = Arrays.asList(1,2,3);\nList&lt;Integer&gt; listB = Arrays.asList(4, 5, 6);\nList&lt;Integer&gt; list = listA.stream().flatMap(a -&gt; listB.stream().map(b -&gt; a +b)).collect(Collectors.toList());\nSystem.out.println(list);\n\n\n打印结果:  [5, 6, 7, 6, 7, 8, 7, 8, 9]\n</code></pre>\n<hr>\n<p>1.3.2 将多个列表合并成一个列表</p>\n<pre><code class=\"language-Java\">\nList&lt;List&lt;String&gt;&gt; listOfLists = Arrays.asList(\n        Arrays.asList(&quot;13378520000&quot;, &quot;13278520000&quot;),\n        Arrays.asList(&quot;13178520000&quot;, &quot;13558520000&quot;),\n        Arrays.asList(&quot;15138510000&quot;, &quot;15228310000&quot;)\n);\nList&lt;String&gt; flatMapList = listOfLists.stream().flatMap(Collection::stream).collect(Collectors.toList());\nSystem.out.println(flatMapList);\n\n\n打印结果：[13378520000, 13278520000, 13178520000, 13558520000, 15138510000, 15228310000]\n\n</code></pre>\n<hr>\n<h5 id=\"peek查看每个元素的信息但不改变流中元素的状态\"><a class=\"markdownIt-Anchor\" href=\"#peek查看每个元素的信息但不改变流中元素的状态\">#</a> peek: 查看每个元素的信息，但不改变流中元素的状态</h5>\n<pre><code class=\"language-Java\">\nList&lt;String&gt; telList = Arrays.asList(&quot;13378520000&quot;,&quot;13278520000&quot;,&quot;13178520000&quot;,&quot;13558520000&quot;);\ntelList.stream().peek(t -&gt; System.out.println(t))\n        .map(t -&gt; t.substring(0,3))\n        .peek(t -&gt; System.out.println(t))\n        .collect(Collectors.toList());\n\n</code></pre>\n<hr>\n<p><strong>重点:</strong> peek VS map</p>\n<blockquote>\n<p>peek 操作一般用于 不想改变流中元素本身的类型或者只想元素的内部状态改变时<br>\n map 则用于改变流中元素本身，即从元素中派生出另一种类型的操作</p>\n</blockquote>\n<hr>\n<h5 id=\"maptoint-maptolong-maptodouble-flatmaptodouble-flatmaptoint-flatmaptolong\"><a class=\"markdownIt-Anchor\" href=\"#maptoint-maptolong-maptodouble-flatmaptodouble-flatmaptoint-flatmaptolong\">#</a> mapToInt、mapToLong、mapToDouble、flatMapToDouble、flatMapToInt、flatMapToLong</h5>\n<blockquote>\n<p>以上操作是 map 和 flatMap 的特别版，也就是针对特定的数据类型进行映射处理</p>\n<p>其对应方法如下：</p>\n</blockquote>\n<pre><code class=\"language-Java\">\nIntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);\n \nLongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper); \n \nDoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);\n \nIntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);\n \nLongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);\n \nDoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);\n\n</code></pre>\n<hr>\n<h4 id=\"有状态stateful操作\"><a class=\"markdownIt-Anchor\" href=\"#有状态stateful操作\">#</a> 有状态 (Stateful) 操作</h4>\n<h5 id=\"distinct去除重复的元素\"><a class=\"markdownIt-Anchor\" href=\"#distinct去除重复的元素\">#</a> distinct: 去除重复的元素</h5>\n<blockquote>\n<p>distinct () 方法可以用来去除流中的重复元素，生成无重复的列表<br>\n需要注意的是：distinct 用于针对流元素去重操作时，需要确定流中的元素实现了 equals () 和 hasCode () 方法</p>\n</blockquote>\n<pre><code class=\"language-Java\">\nList&lt;String&gt; numbers = Arrays.asList(&quot;13378520000&quot;, &quot;15138510000&quot;,&quot;13178520000&quot;, &quot;15138510000&quot;);\nList&lt;String&gt; disNumbers = numbers.stream().distinct().collect(Collectors.toList());\nSystem.out.println(disNumbers);\t\t\n\n\n打印结果：[13378520000, 15138510000, 13178520000]\n\n</code></pre>\n<hr>\n<h5 id=\"15-sorted排序元素\"><a class=\"markdownIt-Anchor\" href=\"#15-sorted排序元素\">#</a> 1.5 sorted: 排序元素</h5>\n<blockquote>\n<p>sorted 方法用于对流中元素进行排序</p>\n</blockquote>\n<p>1.5.1 升序排序</p>\n<pre><code class=\"language-Java\">\nList&lt;People&gt; peopleList = Arrays.asList(\n        new People(&quot;王二&quot;,20),\n        new People(&quot;李二&quot;,30),\n        new People(&quot;张四&quot;,31)\n);\nList&lt;People&gt; newpeopleList=peopleList.stream().sorted(Comparator.comparing(People::getAge)).collect(Collectors.toList());\n//打印结果\nnewpeopleList.stream().forEach(System.out::println);\n\n\n打印结果：\nPeople&#123;name='王二', age=20&#125;\nPeople&#123;name='李二', age=30&#125;\nPeople&#123;name='张四', age=31&#125;\n\n</code></pre>\n<p>1.5.2 降序排序</p>\n<blockquote>\n<p>通过 reversed () 方法进行逆序排序</p>\n</blockquote>\n<pre><code class=\"language-Java\">\nList&lt;People&gt; peopleList = Arrays.asList(\n        new People(&quot;王二&quot;,20),\n        new People(&quot;李二&quot;,30),\n        new People(&quot;张四&quot;,31)\n);\nList&lt;People&gt; newpeopleList = peopleList.stream().sorted(Comparator.comparing(People::getAge).reversed()).collect(Collectors.toList());\n//打印结果\nnewpeopleList.stream().forEach(System.out::println);\n\n打印结果：\nPeople&#123;name='张四', age=31&#125;\nPeople&#123;name='李二', age=30&#125;\nPeople&#123;name='王二', age=20&#125;\n\n</code></pre>\n<hr>\n<h5 id=\"17-limit和skip截取流中的部分元素\"><a class=\"markdownIt-Anchor\" href=\"#17-limit和skip截取流中的部分元素\">#</a> 1.7 limit 和 skip: 截取流中的部分元素</h5>\n<blockquote>\n<p>limit 返回一个包含前 n 个元素的新流<br>\n skip 返回一个丢弃前 n 个元素后剩余元素组成的新流</p>\n</blockquote>\n<pre><code class=\"language-Java\">\nint[] arr = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;\nSystem.out.print(&quot;取数组前5个元素:&quot;);\nArrays.stream(arr).limit(5).forEach(n -&gt; System.out.print(n + &quot; &quot;)); // 输出结果为：1 2 3 4 5\n\nSystem.out.print(&quot;跳过前3个元素，取剩余数组元素:&quot;);\nArrays.stream(arr).skip(3).forEach(n -&gt; System.out.print(n + &quot; &quot;)); // 输出结果为：4 5 6 7 8 9 10\n\n</code></pre>\n<hr>\n<h3 id=\"终结操作terminal-operation\"><a class=\"markdownIt-Anchor\" href=\"#终结操作terminal-operation\">#</a> 终结操作 (Terminal Operation)</h3>\n<h4 id=\"短路short-circuiting操作\"><a class=\"markdownIt-Anchor\" href=\"#短路short-circuiting操作\">#</a> 短路 (Short-circuiting) 操作</h4>\n<ul>\n<li>anyMatch: Stream 中只要有一个元素符合传入的 predicate, 返回 true</li>\n</ul>\n<blockquote>\n<p>boolean anyMatch(Predicate&lt;? super T&gt; predicate);</p>\n</blockquote>\n<ul>\n<li>allMatch: Stream 中全部元素符合传入的 predicate, 返回 true</li>\n</ul>\n<blockquote>\n<p>boolean allMatch(Predicate&lt;? super T&gt; predicate);</p>\n</blockquote>\n<ul>\n<li>noneMatch: Stream 中没有一个元素符合传入的 predicate, 返回 true</li>\n</ul>\n<blockquote>\n<p>boolean noneMatch(Predicate&lt;? super T&gt; predicate);</p>\n</blockquote>\n<ul>\n<li>findFirst: 用于返回满足条件的第一个元素 (凡是该元素是封装在 Optional 类中)</li>\n</ul>\n<blockquote>\n<p>Optional<T> findFirst();</p>\n</blockquote>\n<ul>\n<li>findAny: 返回流中的任意元素 (但是该元素也是封装在 Optional 类中)</li>\n</ul>\n<blockquote>\n<p>Optional<T> findAny();</p>\n</blockquote>\n<hr>\n<h4 id=\"非短路操作\"><a class=\"markdownIt-Anchor\" href=\"#非短路操作\">#</a> 非短路操作</h4>\n<h5 id=\"foreach\"><a class=\"markdownIt-Anchor\" href=\"#foreach\">#</a> forEach()</h5>\n<p>该方法接收一个 lambda 表达式，然后在 Stream 的每一个元素上执行该表达式</p>\n<blockquote>\n<p>void forEach(Consumer&lt;? super T&gt; action);</p>\n</blockquote>\n<hr>\n<h5 id=\"foreachordered\"><a class=\"markdownIt-Anchor\" href=\"#foreachordered\">#</a> forEachOrdered()</h5>\n<p>该方法接收一个 Lambda 表达式，然后按顺序在 Stream 中的每一个元素上执行该表达式</p>\n<blockquote>\n<p>void forEachOrdered(Consumer&lt;? super T&gt; action);</p>\n</blockquote>\n<p>该功能其实和 forEach 是很相似的，也是循环操作！那唯一的区别，就在于 forEachOrdered 是可以保证循环时元素是按原来的顺序逐个循环的！</p>\n<hr>\n<h5 id=\"toarray\"><a class=\"markdownIt-Anchor\" href=\"#toarray\">#</a> toArray()</h5>\n<p>返回包含此流元素的数组，当有参数时，</p>\n<blockquote>\n<p>Object [] toArray();</p>\n</blockquote>\n<blockquote>\n<p><A> A[] toArray(IntFunction&lt;A[]&gt; generator);</p>\n</blockquote>\n<p>举例：</p>\n<pre><code class=\"language-Java\">\n\nList&lt;String&gt; strList = Arrays.asList( &quot;Jhonny&quot;, &quot;David&quot;, &quot;Jack&quot;, &quot;Duke&quot;, &quot;Jill&quot;,&quot;Dany&quot;,&quot;Julia&quot;,&quot;Jenish&quot;,&quot;Divya&quot;);\n \nObject [] strAryNoArg = strList.stream().toArray();\nString [] strAry = strList.stream().toArray(String[]::new);\n\n</code></pre>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/10/Java/Apache-poi/",
            "url": "http://1405904364.github.io/2023/08/10/Java/Apache-poi/",
            "title": "Apache-Poi",
            "date_published": "2023-08-10T08:29:50.063Z",
            "content_html": "<h1 id=\"apache-poi\"><a class=\"markdownIt-Anchor\" href=\"#apache-poi\">#</a> Apache-Poi</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb2kuYXBhY2hlLm9yZy8=\">官网</span><br>\n<br/> <br/><br>\n<img data-src=\"/image/Java/project-header.png\" alt=\"官网\"></p>\n</blockquote>\n<hr>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"hssf-sxxf-sxssf的区别\"><a class=\"markdownIt-Anchor\" href=\"#hssf-sxxf-sxssf的区别\">#</a> HSSF SXXF SXSSF 的区别</h3>\n<blockquote>\n<ul>\n<li>HSSF:Excel97-2003 版本，扩展名为.xls。一个 sheet 最大行数 65536，最大列数 256。</li>\n<li>XSSF:Excel2007 版本开始，扩展名为.xlsx。一个 sheet 最大行数 1048576，最大列数 16384。</li>\n<li>SXSSF: 是在 XSSF 基础上，POI3.8 版本开始提供的支持低内存占用的操作方式，扩展名为.xlsx。</li>\n</ul>\n<p>HSSF 用于 Excel03 版本：</p>\n<pre><code>  缺点：最多只能处理65536行，否则会报异常，\n\n  优点：过程中写入缓存，不操作磁盘，最后一次性写入磁盘，速度快\n</code></pre>\n<p>XSSF 用于 Excel07 版本：</p>\n<pre><code>  缺点：写数据时速度非常慢，非常耗内存，也会发生内存溢出，如100万条数据\n  优点：可以写较大的数据量，如20万条数据\n</code></pre>\n<p>SXSSF 可以理解为 SXXF 超大量数据升级版：</p>\n<pre><code>  优点：可以写非常大量的数据库，如100万条甚至更多条，写数据速度快，占用更少的内存\n  注意：\n      - 过程中会产生临时文件，需要清理临时文件\n      - 默认由100条记录被保存在内存中，如果超出这数量，则最前面的数据被写入临时文件\n      - 如果想自定义内存中数据的数量，可以使用new SXSSFWorkbook（数量）\n</code></pre>\n</blockquote>\n<h3 id=\"其他常见名称含义\"><a class=\"markdownIt-Anchor\" href=\"#其他常见名称含义\">#</a> 其他常见名称含义</h3>\n<p><em>其他常见名称含义：</em></p>\n<ul>\n<li>XSSF (XML SpreadSheet Format) – Used to reading and writting Open Office XML (XLSX) format files.</li>\n<li>HSSF (Horrible SpreadSheet Format) – Use to read and write Microsoft Excel (XLS) format files.</li>\n<li>HWPF (Horrible Word Processor Format) – to read and write Microsoft Word 97 (DOC) format files.</li>\n<li>HSMF (Horrible Stupid Mail Format) – pure Java implementation for Microsoft Outlook MSG files</li>\n<li>HDGF (Horrible DiaGram Format) – One of the first pure Java implementation for Microsoft Visio binary files.</li>\n<li>HPSF (Horrible Property Set Format) – For reading “Document Summary” information from Microsoft Office files.</li>\n<li>HSLF (Horrible Slide Layout Format) – a pure Java implementation for Microsoft PowerPoint files.</li>\n<li>HPBF (Horrible PuBlisher Format) – Apache’s pure Java implementation for Microsoft Publisher files.</li>\n<li>DDF (Dreadful Drawing Format) – Apache POI package for decoding the Microsoft Office Drawing format.</li>\n</ul>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<h3 id=\"步骤一导入依赖\"><a class=\"markdownIt-Anchor\" href=\"#步骤一导入依赖\">#</a> 步骤一：导入依赖</h3>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n    &lt;artifactId&gt;poi&lt;/artifactId&gt;\n    &lt;version&gt;4.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;\n    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;\n    &lt;version&gt;4.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/10/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",
            "url": "http://1405904364.github.io/2023/08/10/Java/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",
            "title": "函数式编程",
            "date_published": "2023-08-10T08:29:50.061Z",
            "content_html": "<h1 id=\"函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#函数式编程\">#</a> 函数式编程</h1>\n<p>一种 语法优雅、简洁健壮、高并发、易于测试和调试 的编程方式，这就是函数式编程 (FP) 的意义所在。</p>\n<blockquote>\n<p>OO (Object oriented, 面向对象) 是抽象数据<br>\n FP (Function programming, 函数式编程) 是抽象行为</p>\n</blockquote>\n<p>两个关键概念:</p>\n<blockquote>\n<ul>\n<li>函数是第一等公民</li>\n<li>函数要满足以下约束\n<ul>\n<li>函数的返回值仅取决于传递给函数的输入参数</li>\n<li>函数的执行没有副作用</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"函数是一等公民\"><a class=\"markdownIt-Anchor\" href=\"#函数是一等公民\">#</a> 函数是一等公民</h3>\n<blockquote>\n<p>在函数式编程范式中，函数是语言的第一等公民。这意味着可以创建函数的 “实例”，对函数实例的变量引用，就像对字符串、Map 或者任何其他对象的引用一样。函数也可以作为参数传递给其他函数。</p>\n</blockquote>\n<blockquote>\n<p>在 Java 中，函数显然不是第一等公民，类 (Class) 才是。所以 Java 才引用 Lambda 表达式，这个语法糖从表现层让 Java 拥有了函数，让函数可以作为变量的引用、方法的参数等等。（为什么说是从表现层呢？因为实际上，在编译的时候，Java 编译器还是会把 Lambda 表达式编译成类。</p>\n</blockquote>\n<hr>\n<h3 id=\"纯函数\"><a class=\"markdownIt-Anchor\" href=\"#纯函数\">#</a> 纯函数</h3>\n<p>函数式编程中，有个纯函数 (Pure Function) 的概念，如果一个函数满足以下条件，才是纯函数：</p>\n<ul>\n<li>该函数的执行没有副作用</li>\n<li>函数的返回值仅取决于传递给函数的输入参数</li>\n</ul>\n<pre><code class=\"language-Java\">public class ObjectWithPureFunction&#123;\n    public int sum(int a, int b)&#123;\n        return a+b;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"非纯函数\"><a class=\"markdownIt-Anchor\" href=\"#非纯函数\">#</a> 非纯函数</h3>\n<p>上面的 sum 方法的返回值仅取决于其输入参数，而且 sum 是没有副作用的，它不会在任何地方修改函数之外的任何状态 (变量)</p>\n<p>相反，这个一个非纯函数的例子:</p>\n<pre><code class=\"language-Java\">public class ObjectWithNonPureFunction&#123;\n    private int value = 0;\n\n    public int add(int nextValue) &#123;\n        this.value += nextValue;\n        return this.value;\n    &#125;\n&#125;\n</code></pre>\n<p>add 方法使用成员变量 value 来计算返回值，并且它还修改了 value 成员变量，这代表它有副作用，这两个条件都导致 add 方法不是一个纯函数</p>\n<hr>\n<h2 id=\"函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#函数式接口\">#</a> 函数式接口</h2>\n<p>所谓函数式接口，实际上就是接口里面有且只能有一个抽象方法的接口。</p>\n<p>函数式接口也称为 单一抽象方法 (SAM) 接口</p>\n<h3 id=\"函数式接口的特点\"><a class=\"markdownIt-Anchor\" href=\"#函数式接口的特点\">#</a> 函数式接口的特点</h3>\n<ul>\n<li>接口有且仅有一个抽象方法，如接口 Comparator</li>\n<li>允许出现 java.lang.Object 中的 public 方法，如 equals</li>\n<li>允许定义静态非抽象方法</li>\n<li>允许定义默认 default 非抽象方法 (default 方法式 java8 开始出现的)</li>\n<li>FunctionInterface 注解不是必须的，如果一个接口符合 “函数式接口” 的定义，那么不加该注解也没有影响</li>\n</ul>\n<blockquote>\n<p>甚至可以说：函数式接口是专门为 lambda 表达式准备的，lambda 表达式是只实现接口中唯一抽象方法的匿名实现类</p>\n</blockquote>\n<h3 id=\"default关键字\"><a class=\"markdownIt-Anchor\" href=\"#default关键字\">#</a> default 关键字</h3>\n<p>在 java8 之前</p>\n<ul>\n<li>接口是不能有方法的实现，所有的方法必须是抽象方法</li>\n<li>实现接口就必须实现接口里面的所有方法</li>\n</ul>\n<blockquote>\n<p>这样导致：当一个接口有很多实现类的时候，修改这个接口，就必须修改所有的实现类。</p>\n</blockquote>\n<p>不过在 java8 中这个问题得到解决，这就是 default 方法</p>\n<ul>\n<li>default 方法可以有自己的默认实现，即有方法体</li>\n<li>接口实现类可以不去实现 default 方法，并且可以使用 default 方法</li>\n</ul>\n<h3 id=\"jdk中函数式接口的举例\"><a class=\"markdownIt-Anchor\" href=\"#jdk中函数式接口的举例\">#</a> JDK 中函数式接口的举例</h3>\n<ul>\n<li>java.lang.Runnable,</li>\n<li>java.util.Comparator,</li>\n<li>java.util.concurrent.Callable</li>\n<li>java.util.function 包下的接口，如 Consumer、Predicate、Supplier 等</li>\n</ul>\n<blockquote>\n<p>编译器会根据 Lambda 表达式的参数和返回值类型推断出其实现的抽象方法，进而推断出其实现的接口，如果一个接口有多个抽象方法，显然是没有办法用 Lambda 表达式实现该接口的</p>\n</blockquote>\n<h3 id=\"functioninterface-注解\"><a class=\"markdownIt-Anchor\" href=\"#functioninterface-注解\">#</a> @FunctionInterface 注解</h3>\n<p><strong>标注接口是一个函数式接口的注解</strong></p>\n<pre><code class=\"language-Java\">@FunctionalInterface // 标明接口为函数式接口\npublic interface MyInterface &#123;\n    public void run(); //抽象方法\n&#125;\n</code></pre>\n<p>一旦使用了该注解标注接口，Java 的编译器会强制检查该接口是否满足函数式接口的要求：“确实仅有一个抽象方法”，否则将会报错</p>\n<p>需要注意的是，及时不适用该注解，只要有一个接口满足函数式接口的要求，那它仍然是一个函数式接口，使用起来都一样。该注解只起到标记接口指示编译器对其进行检查的作用</p>\n<h3 id=\"java内置的函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#java内置的函数式接口\">#</a> Java 内置的函数式接口</h3>\n<p><strong>Function</strong></p>\n<p>Function 接口（全限定名：java.util.function.Function）是 Java 中最核心的函数式接口。 Function 接口表示一个接受单个参数并返回单个值的函数（方法）</p>\n<p><strong>Predicate</strong></p>\n<p>Predicate 接口 （全限定名：java.util.function.Predicate）表示一个接收单个参数，并返回布尔值 true 或 false 的函数</p>\n<p><strong>Supplier</strong></p>\n<p>Supplier 接口（java.util.function.Supplier），表示提供某种值的函数</p>\n<p><strong>Consume</strong></p>\n<p>Consumer 接口（java.util.function.Consume）表示一个函数，该函数接收一个参数，但是不返回任何值</p>\n<p><strong>Optional</strong></p>\n<p>Optional 接口并不是一个函数式接口，它常在 Stream 操作中出现，作为操作的返回值类型。</p>\n<p>Optional 接口是预防 NullPointerException 的好工具，它是一个简单的容器，其值可以是 null 或非 null。比如一个可能返回一个非空结果的方法，方法在有些情况下返回值，有些情况不满足返回条件返回空值，这种情况下使用 Optional 接口作为返回类型，比直接无值时返回 Null 要更安全</p>\n<hr>\n<h2 id=\"lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#lambda表达式\">#</a> Lambda 表达式</h2>\n<h3 id=\"双冒号语法\"><a class=\"markdownIt-Anchor\" href=\"#双冒号语法\">#</a> 双冒号语法</h3>\n<p>其实双冒号就是 lambda 表达式的简写。被用作方法的引用。使用 lambda 表达式会创建匿名方法，但是有时候会需要一个 lambda 表达式只调用一个已经存在的方法，在此才有了方法的引用</p>\n<ol>\n<li>静态方法的引用 (static method)</li>\n</ol>\n<pre><code class=\"language-Java\">\npublic class Demo &#123;\n\t@Test\n\tpublic void test() &#123;\n\t\tList&lt;String&gt; list = Arrays.asList(&quot;aaaa&quot;, &quot;bbbb&quot;, &quot;cccc&quot;);\n\t\t\n\t\t//静态方法语法\tClassName::methodName\n\t\tlist.forEach(Demo::print);\n\t&#125;\n\t\n\tpublic static void print(String content)&#123;\n\t\tSystem.out.println(content);\n\t&#125;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>对象实例方法的引用</li>\n</ol>\n<pre><code class=\"language-Java\">\npublic class Demo &#123;\n\t@Test\n\tpublic void test() &#123;\n\t\tList&lt;String&gt; list = Arrays.asList(&quot;aaaa&quot;, &quot;bbbb&quot;, &quot;cccc&quot;);\n\t\t\n\t\t//静态方法语法\tClassName::methodName\n\t\tlist.forEach(new Demo()::print);\n\t&#125;\n\t\n\tpublic void print(String content)&#123;\n\t\tSystem.out.println(content);\n\t&#125;\n&#125;\n</code></pre>\n<ol start=\"3\">\n<li>对象的超类方法引用</li>\n</ol>\n<pre><code class=\"language-Java\">public class Example extends BaseExample&#123;\n \n\t@Test\n\tpublic void test() &#123;\n\t\tList&lt;String&gt; list = Arrays.asList(&quot;aaaa&quot;, &quot;bbbb&quot;, &quot;cccc&quot;);\n\t\t\n\t\t//对象的超类方法语法： super::methodName \n\t\tlist.forEach(super::print);\n\t&#125;\n&#125;\n \nclass BaseExample &#123;\n\tpublic void print(String content)&#123;\n\t\tSystem.out.println(content);\n\t&#125;\n&#125;\n</code></pre>\n<ol start=\"4\">\n<li>类构造器引用</li>\n</ol>\n<pre><code class=\"language-Java\">\npublic class Example &#123;\n \n\t@Test\n\tpublic void test() &#123;\n\t\tInterfaceExample com =  Example::new;\n\t\tExample bean = com.create();\n        Example bean = com.create(&quot;STRING&quot;);\n\t\tSystem.out.println(bean);\n\t&#125;\n&#125;\n \ninterface InterfaceExample&#123;\n    //不带参数\n\tExample create();\n    //带参数\n    Example create(String str);\n&#125;\n</code></pre>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://1405904364.github.io/2023/08/10/hello-world/",
            "url": "http://1405904364.github.io/2023/08/10/hello-world/",
            "title": "Hello World",
            "date_published": "2023-08-10T03:59:27.411Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}