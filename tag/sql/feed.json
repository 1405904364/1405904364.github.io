{
    "version": "https://jsonfeed.org/version/1",
    "title": "Live My Life • All posts by \"sql\" tag",
    "description": "个人学习使用",
    "home_page_url": "http://1405904364.github.io",
    "items": [
        {
            "id": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "http://1405904364.github.io/2023/08/31/Mysql/Mysql/%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "数据库概念",
            "date_published": "2023-08-31T01:26:47.678Z",
            "content_html": "<h1 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<h2 id=\"关系型数据库是如何工作的\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库是如何工作的\">#</a> 关系型数据库是如何工作的</h2>\n<h3 id=\"从数据结构说起\"><a class=\"markdownIt-Anchor\" href=\"#从数据结构说起\">#</a> 从数据结构说起</h3>\n<h4 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h4>\n<p>​\t对于数据库而言，重要的不是数据量，而是当数据量增加时运算如何增加。</p>\n<p>​\t时间复杂度用来检验某个算法处理一定量的数据要花费多长时间，时间复杂度不会给出确切的运算次数，但是给出的是一种观念。 <img data-src=\"https://pdai.tech/images/db/sb-sql-learn-1.png\" alt=\"img\"></p>\n<h4 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h4>\n<h4 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\">#</a> 二叉搜索树</h4>\n<p>​\t二叉搜索树只需要 Log (N) 次运算，而如果你直接使用阵列则需要 N 次运算。</p>\n<h4 id=\"b树索引\"><a class=\"markdownIt-Anchor\" href=\"#b树索引\">#</a> B + 树索引</h4>\n<h4 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h4>\n<p>​\t为什么不使用阵列？</p>\n<ul>\n<li>如果有了更好的哈希函数，在哈希表里搜索的时间复杂度就是 O (1)。</li>\n<li>一个哈希表可以只装载一半到内存，剩下的哈希捅可以留在硬盘上。</li>\n<li>用列阵的话，你需要一个连续的内存空间，如果你加载一张大表，很难分配足够的连续的内存空间。</li>\n</ul>\n<h2 id=\"关系型数据库设计理论\"><a class=\"markdownIt-Anchor\" href=\"#关系型数据库设计理论\">#</a> 关系型数据库设计理论</h2>\n<h3 id=\"重要术语\"><a class=\"markdownIt-Anchor\" href=\"#重要术语\">#</a> 重要术语</h3>\n<ul>\n<li>属性：列的名字。</li>\n<li>依赖：列属性间存在的某种联系。</li>\n<li>元组：每一个行（每一条数据）。</li>\n<li>表：由多个属性，以及众多元组组成。</li>\n<li>模式：这里我们指逻辑结构。</li>\n<li>域：数据类型。</li>\n<li>键：由关系的一个或多个属性组成，任意两个键相同的元组，所有属性都相同。需要保证表示键的属性最少。一个关系可以存在好几种键，一般从这些候选键中，选出一个作为主键（primary key）。</li>\n<li>候选键：由关系的一个或多个属性组成，候选键都具备键的特性，都有资格成为主键。</li>\n<li>超键：包含键的属性集合，无需保证属性集的最小化。每个键也是超键。可以认为是超键的超集。</li>\n<li>外键：如果某一个关系 A 中的一个（组）属性是另一个关系 B 的键，则该（组）属性在 A 中成为外键。</li>\n<li>主属性：所有候选键所包含的属性都是主属性。</li>\n<li>投影：选取特定的列，如将关系学生信息投影为学号、姓名，即得到上表中仅包含学号、姓名的列。</li>\n<li>选择：按照一定条件选取特定元组，如选择上表中分数 &gt; 80 的元组。</li>\n<li>笛卡尔积（交叉连接）：第一个关系每一行分别与第二个关系的每一行组合。</li>\n<li>自然连接：第一个关系中每一行与第二个关系的每一行进行匹配，如果得到有交叉部分则合并，若无交叉部分则舍弃。</li>\n<li>连接：即加上约束条件的笛卡尔积，先得到笛卡尔积，然后根据约束条件删除不满足的元组。</li>\n<li>外连接：执行自然连接后，将舍弃的部分也加入，并且匹配失败处的属性用 Null 代替。</li>\n<li>除法运算：关系 R 除以关系 S 的结果为 T，则 T 包含所有在 R 但不在 S 的属性，且 T 的元组与 S 的元组的所有组合在 R 中。</li>\n</ul>\n<h2 id=\"数据库系统核心知识点\"><a class=\"markdownIt-Anchor\" href=\"#数据库系统核心知识点\">#</a> 数据库系统核心知识点</h2>\n<h3 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h3>\n<h4 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h4>\n<p>​\t事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以用 Rollback 进行回滚。 <img data-src=\"https://pdai.tech/images/pics/185b9c49-4c13-4241-a848-fbff85c03a64.png\" alt=\"image\"></p>\n<h4 id=\"acid\"><a class=\"markdownIt-Anchor\" href=\"#acid\">#</a> ACID</h4>\n<ul>\n<li><strong>原子性 (Atomicity)</strong>：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</li>\n<li><strong>一致性 (Consistency)</strong>：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</li>\n<li><strong>隔离性 (lsolation)</strong>：一个事务所做的修改在最终提交以前，对其他事务是不可见的。</li>\n<li><strong>持久性 (Durability)</strong>：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统崩溃，事务执行的结果也不能丢失。可以通过数据库备份和恢复来实现，在系统发生崩溃时，使用备份数据库进行数据恢复。</li>\n</ul>\n<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系:</p>\n<ul>\n<li>只有满足一致性，事务的执行结果才是正确的。</li>\n<li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>\n<li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>\n<li>事务满足持久化是为了能应对数据库崩溃的情况。 <img data-src=\"https://pdai.tech/images/pics/a58e294a-615d-4ea0-9fbf-064a6daec4b2.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"autocommit\"><a class=\"markdownIt-Anchor\" href=\"#autocommit\">#</a> AUTOCOMMIT</h4>\n<p>​\tmysql 默认采用自动提交模式。如果不显示使用 start transaction 语句来开始一个事务，那么每个查询都会被当作一个事务自动提交。</p>\n<h3 id=\"并发一致性问题\"><a class=\"markdownIt-Anchor\" href=\"#并发一致性问题\">#</a> 并发一致性问题</h3>\n<p>​\t在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>\n<h4 id=\"丢失修改\"><a class=\"markdownIt-Anchor\" href=\"#丢失修改\">#</a> 丢失修改</h4>\n<p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>\n<h4 id=\"读脏数据\"><a class=\"markdownIt-Anchor\" href=\"#读脏数据\">#</a> 读脏数据</h4>\n<p>T1 修改了一个数据，T2 随后读取了这个数据。如果 T1 撤销了修改，那么 T2 读取的是脏数据。</p>\n<h4 id=\"不可重复读\"><a class=\"markdownIt-Anchor\" href=\"#不可重复读\">#</a> 不可重复读</h4>\n<p>T2 读取了一个数据，T1 对该数据做了修改。如果 T2 再次读取了这个数据，此时读取的数据和第一次读取的数据结果不同。</p>\n<h4 id=\"幻影读\"><a class=\"markdownIt-Anchor\" href=\"#幻影读\">#</a> 幻影读</h4>\n<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和第一次读取的结果不同。</p>\n<p><strong>产生并发不一致问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己操作，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</strong></p>\n<h3 id=\"封锁\"><a class=\"markdownIt-Anchor\" href=\"#封锁\">#</a> 封锁</h3>\n<h4 id=\"封锁粒度\"><a class=\"markdownIt-Anchor\" href=\"#封锁粒度\">#</a> 封锁粒度</h4>\n<p>Mysql 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的粒度越小，发生锁争用的可能性就越小，系统的并发程度就越高。</p>\n<p>但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销越大。</p>\n<p><strong>在选择锁粒度时，需要在锁开销和并发程度之间做一个权衡</strong></p>\n<h4 id=\"封锁类型\"><a class=\"markdownIt-Anchor\" href=\"#封锁类型\">#</a> 封锁类型</h4>\n<pre><code>##### 读写锁\n</code></pre>\n<ul>\n<li>\n<p>排它锁（Exclusive）：简写为 X 锁，又称写锁。</p>\n</li>\n<li>\n<p>共享锁（Shared）：简写为 S 锁，又称读锁。</p>\n<p>有一下两个规定：</p>\n<ul>\n<li>​\t一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间，其他事务不能对 A 加任何锁。</li>\n<li>​    一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取，但不能进行更新操作。加锁期间其他事务只能对 A 加 S 锁，但不能加 X 锁。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"意向锁\"><a class=\"markdownIt-Anchor\" href=\"#意向锁\">#</a> 意向锁</h5>\n<p>​\t使用意向锁可以更容易地支持多粒度封锁。</p>\n<p>​\t存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其他事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p>\n<p>​\t意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中某个数据行上加上 X 锁或 S 锁。有一下两个规定：</p>\n<ul>\n<li>\n<p>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁。</p>\n</li>\n<li>\n<p>一个事务在获取某个数据行对象的 X 锁之前，必须先获取表的 X 锁。</p>\n<p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其他事务正在使用这个表或者表中的某一行的锁，因此事务 T 加锁失败。</p>\n<p>各种锁的兼容关系如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th style=\"text-align:center\">X</th>\n<th style=\"text-align:center\">IX</th>\n<th style=\"text-align:center\">S</th>\n<th style=\"text-align:center\">IS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IX</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IS</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p>解释如下：</p>\n<ul>\n<li>\n<p>​\t任意 IS/IX 锁之间都是兼容的，因为他们只是表示想要对表加锁，而不是正真的加锁。</p>\n</li>\n<li>\n<p>​    S 锁只与 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其他事务可以已经获得对表或者对表中行的 S 锁。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#封锁协议\">#</a> 封锁协议</h3>\n<h4 id=\"三级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级锁协议\">#</a> 三级锁协议</h4>\n<h5 id=\"一级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#一级锁协议\">#</a> 一级锁协议</h5>\n<p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束猜释放锁。</p>\n<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>\n<h5 id=\"二级锁协议\"><a class=\"markdownIt-Anchor\" href=\"#二级锁协议\">#</a> 二级锁协议</h5>\n<p>在一级的基础上，要求读取数据 A 时，必须加上 S 锁，读取完马上释放 S 锁。</p>\n<p>可以解决数据脏读问题。因为一个事务在对数据 A 进行修改，根据一级协议，必须加 X 锁，那么就不能再加 S 锁了，也就不会读入数据了。</p>\n<h5 id=\"三级封锁协议\"><a class=\"markdownIt-Anchor\" href=\"#三级封锁协议\">#</a> 三级封锁协议</h5>\n<p>在二级的基础上，要求读取数据 A 时必须加上 S 锁，直到事务结束才释放 S 锁。</p>\n<p>可以解决不可重复度问题，因为读 A 时，其他事务不能加 X 锁，从而避免了在读数据期间数据发生改变。</p>\n<h4 id=\"两段锁协议\"><a class=\"markdownIt-Anchor\" href=\"#两段锁协议\">#</a> 两段锁协议</h4>\n<p>​\t加锁和解锁分两个阶段进行。</p>\n<p>​\t可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>​\t<strong>事务遵循两段锁协议是保证可串行化调度的充分条件</strong></p>\n<h3 id=\"mysql-隐式与显式锁定\"><a class=\"markdownIt-Anchor\" href=\"#mysql-隐式与显式锁定\">#</a> Mysql 隐式与显式锁定</h3>\n<p>Mysql 的 InnoDB 存储引擎采用的是两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定。</p>\n<pre><code class=\"language-mysql\">select ...... LOCK In SHARE MODE;\nselect ...... FOR UPDATE;\n</code></pre>\n<h3 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h3>\n<h4 id=\"未提交读read-uncommited\"><a class=\"markdownIt-Anchor\" href=\"#未提交读read-uncommited\">#</a> 未提交读（READ UNCOMMITED)</h4>\n<p>事务中的修改，即使没有提交，对其他事务也是可见的。</p>\n<h4 id=\"提交读read-commited\"><a class=\"markdownIt-Anchor\" href=\"#提交读read-commited\">#</a> 提交读（READ COMMITED)</h4>\n<p>一个事务只能读取已经提交的事务所作的修改。换个话说，一个事务所做的修改，在提交之前，对其他事务都是不可见的。</p>\n<h4 id=\"可重复读repeatable-read\"><a class=\"markdownIt-Anchor\" href=\"#可重复读repeatable-read\">#</a> 可重复读（REPEATABLE READ)</h4>\n<p>保证在同一个事务中多次读取同样的数据结果是一样的。</p>\n<h4 id=\"可串行化serializable\"><a class=\"markdownIt-Anchor\" href=\"#可串行化serializable\">#</a> 可串行化（SERIALIZABLE)</h4>\n<p>强制事务串行执行。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">未提交读</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">提交读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可重复读</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可串行化</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多版本并发控制\"><a class=\"markdownIt-Anchor\" href=\"#多版本并发控制\">#</a> 多版本并发控制</h3>\n<p>多版本并发控制 (Multi-Version Concurrency Control, MVCC) 是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>\n<h3 id=\"版本号\"><a class=\"markdownIt-Anchor\" href=\"#版本号\">#</a> 版本号</h3>\n<ul>\n<li>系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li>\n<li>事务版本号：事务开始时的系统版本号。</li>\n</ul>\n<h3 id=\"隐藏的列\"><a class=\"markdownIt-Anchor\" href=\"#隐藏的列\">#</a> 隐藏的列</h3>\n<p>MVCC 在每行记录后边都保存着两个隐藏的列，用来存储两个版本号。</p>\n<ul>\n<li>创建版本号：指示创建一个数据行的快照时的系统版本号。</li>\n<li>删除版本号如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示快照已经把欸删除了。</li>\n</ul>\n<h3 id=\"undo-日志\"><a class=\"markdownIt-Anchor\" href=\"#undo-日志\">#</a> Undo 日志</h3>\n<p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行 (Record) 的所有快照连接起来。</p>\n<p><img data-src=\"https://pdai.tech/images/pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" alt=\"image\"></p>\n<h3 id=\"实现过程\"><a class=\"markdownIt-Anchor\" href=\"#实现过程\">#</a> 实现过程</h3>\n<p>以下实现过程针对可重复读隔离级别。</p>\n<p>当开始新一个事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号，理解这一点很关键。</p>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> <a href=\"#_1-select\">#</a> 1. SELECT</h4>\n<p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p>\n<p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于 T 的版本号，因为如果大于或者等于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> <a href=\"#_2-insert\">#</a> 2. INSERT</h4>\n<p>将当前系统版本号作为数据行快照的创建版本号。</p>\n<h4 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> <a href=\"#_3-delete\">#</a> 3. DELETE</h4>\n<p>将当前系统版本号作为数据行快照的删除版本号。</p>\n<h4 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\">#</a> <a href=\"#_4-update\">#</a> 4. UPDATE</h4>\n<p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p>\n<h3 id=\"-5\"><a class=\"markdownIt-Anchor\" href=\"#-5\">#</a> <a href=\"#%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 快照读与当前读</h3>\n<h4 id=\"-6\"><a class=\"markdownIt-Anchor\" href=\"#-6\">#</a> <a href=\"#_1-%E5%BF%AB%E7%85%A7%E8%AF%BB\">#</a> 1. 快照读</h4>\n<p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-7\"><a class=\"markdownIt-Anchor\" href=\"#-7\">#</a> <a href=\"#_2-%E5%BD%93%E5%89%8D%E8%AF%BB\">#</a> 2. 当前读</h4>\n<p>读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">lock</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">share</span> <span class=\"token keyword\">mode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">where</span> ? <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"六-next-key-locks\"><a class=\"markdownIt-Anchor\" href=\"#六-next-key-locks\">#</a> 六、Next-Key Locks</h3>\n<p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p>\n<p>MVCC 不能解决幻读的问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读 (REPEATABLE READ) 隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p>\n<h4 id=\"-8\"><a class=\"markdownIt-Anchor\" href=\"#-8\">#</a> <a href=\"#record-locks\">#</a> Record Locks</h4>\n<p>锁定一个记录上的索引，而不是记录本身。</p>\n<p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p>\n<h4 id=\"-9\"><a class=\"markdownIt-Anchor\" href=\"#-9\">#</a> <a href=\"#gap-locks\">#</a> Gap Locks</h4>\n<p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> c <span class=\"token keyword\">FROM</span> t <span class=\"token keyword\">WHERE</span> c <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">10</span> <span class=\"token operator\">and</span> <span class=\"token number\">20</span> <span class=\"token keyword\">FOR</span> <span class=\"token keyword\">UPDATE</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"-10\"><a class=\"markdownIt-Anchor\" href=\"#-10\">#</a> <a href=\"#next-key-locks\">#</a> Next-Key Locks</h4>\n<p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。</p>\n",
            "tags": [
                "Sql"
            ]
        }
    ]
}