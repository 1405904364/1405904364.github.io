<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://1405904364.github.io</id>
    <title>Live My Life • Posts by &#34;vuex&#34; tag</title>
    <link href="http://1405904364.github.io" />
    <updated>2024-02-18T08:13:45.154Z</updated>
    <category term="linux" />
    <category term="自控" />
    <category term="PowerDesigner" />
    <category term="Vuex" />
    <category term="npm" />
    <category term="Gradle" />
    <category term="Java" />
    <category term="maven" />
    <category term="Mysql" />
    <category term="Sql" />
    <category term="SqlServer" />
    <category term="webService" />
    <category term="Vue" />
    <category term="Html" />
    <category term="SpringCloud" />
    <entry>
        <id>http://1405904364.github.io/2024/02/18/%E5%89%8D%E7%AB%AF/Vuex/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
        <title>Vuex核心概念</title>
        <link rel="alternate" href="http://1405904364.github.io/2024/02/18/%E5%89%8D%E7%AB%AF/Vuex/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
        <content type="html"></content>
        <category term="Vuex" />
        <updated>2024-02-18T08:13:45.154Z</updated>
    </entry>
    <entry>
        <id>http://1405904364.github.io/2024/02/18/%E5%89%8D%E7%AB%AF/Vuex/%E4%BB%8B%E7%BB%8DVuex/</id>
        <title>Vuex介绍</title>
        <link rel="alternate" href="http://1405904364.github.io/2024/02/18/%E5%89%8D%E7%AB%AF/Vuex/%E4%BB%8B%E7%BB%8DVuex/"/>
        <content type="html">&lt;h1 id=&#34;什么是vuex&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是vuex&#34;&gt;#&lt;/a&gt; 什么是 Vuex&lt;/h1&gt;
&lt;p&gt;Vuex 是一 i 个专门为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式&lt;/strong&gt;。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extensnio ，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。&lt;/p&gt;
&lt;h2 id=&#34;什么是状态管理模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是状态管理模式&#34;&gt;#&lt;/a&gt; 什么是 “状态管理模式”?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;
new Vue(&amp;#123;
  // state
  data () &amp;#123;
    return &amp;#123;
      count: 0
    &amp;#125;
  &amp;#125;,
  // view
  template: `
    &amp;lt;div&amp;gt;&amp;#123;&amp;#123; count &amp;#125;&amp;#125;&amp;lt;/div&amp;gt;
  `,
  // actions
  methods: &amp;#123;
    increment () &amp;#123;
      this.count++
    &amp;#125;
  &amp;#125;
&amp;#125;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个状态自管理应用包含一下几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state，驱动应用的数据源&lt;/li&gt;
&lt;li&gt;view，以声明方式将 state 映射到视图&lt;/li&gt;
&lt;li&gt;actions，相应在 view 上的用户输入导致的状态变化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下表示 “单向数据流” 理念的简单示意图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image/../../../image/%E5%89%8D%E7%AB%AF/Vuex/flow.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是，当我们的应用遇到&lt;strong&gt;多个组件共享状态&lt;/strong&gt;时，单向数据流的简洁性很容易遭到破坏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个视图依赖于同一个状态&lt;/li&gt;
&lt;li&gt;来自不同视图的行为需要变更同一个状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。&lt;/p&gt;
&lt;p&gt;因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的 “视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！&lt;/p&gt;
&lt;p&gt;通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;./image/../../../image/%E5%89%8D%E7%AB%AF/Vuex/vuex.png&#34; alt=&#34;图片&#34;&gt;&lt;/p&gt;
</content>
        <category term="Vuex" />
        <updated>2024-02-18T08:13:45.154Z</updated>
    </entry>
</feed>
